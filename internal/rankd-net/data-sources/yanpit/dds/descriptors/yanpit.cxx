// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file yanpit.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "reporting/dds/descriptors/yanpit.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define Yanpit_ActiveTools_max_cdr_typesize 4ULL;
#define Yanpit_YanpitStatus_max_cdr_typesize 14ULL;
#define Yanpit_LocalnetStatus_max_cdr_typesize 1ULL;
#define Yanpit_IperfStatus_max_cdr_typesize 4ULL;
#define Yanpit_PassiveTools_max_cdr_typesize 2ULL;
#define Yanpit_NcmStatus_max_cdr_typesize 1ULL;
#define Yanpit_ActiveTools_max_key_cdr_typesize 0ULL;
#define Yanpit_YanpitStatus_max_key_cdr_typesize 8ULL;
#define Yanpit_LocalnetStatus_max_key_cdr_typesize 0ULL;
#define Yanpit_IperfStatus_max_key_cdr_typesize 0ULL;
#define Yanpit_PassiveTools_max_key_cdr_typesize 0ULL;
#define Yanpit_NcmStatus_max_key_cdr_typesize 0ULL;

Yanpit::IperfStatus::IperfStatus()
{
    // unsigned long m_running_instances
    m_running_instances = 0;

}

Yanpit::IperfStatus::~IperfStatus()
{
}

Yanpit::IperfStatus::IperfStatus(
        const IperfStatus& x)
{
    m_running_instances = x.m_running_instances;
}

Yanpit::IperfStatus::IperfStatus(
        IperfStatus&& x) noexcept 
{
    m_running_instances = x.m_running_instances;
}

Yanpit::IperfStatus& Yanpit::IperfStatus::operator =(
        const IperfStatus& x)
{

    m_running_instances = x.m_running_instances;

    return *this;
}

Yanpit::IperfStatus& Yanpit::IperfStatus::operator =(
        IperfStatus&& x) noexcept
{

    m_running_instances = x.m_running_instances;

    return *this;
}

bool Yanpit::IperfStatus::operator ==(
        const IperfStatus& x) const
{

    return (m_running_instances == x.m_running_instances);
}

bool Yanpit::IperfStatus::operator !=(
        const IperfStatus& x) const
{
    return !(*this == x);
}

size_t Yanpit::IperfStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_IperfStatus_max_cdr_typesize;
}

size_t Yanpit::IperfStatus::getCdrSerializedSize(
        const Yanpit::IperfStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Yanpit::IperfStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_running_instances;

}

void Yanpit::IperfStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_running_instances;
}

/*!
 * @brief This function sets a value in member running_instances
 * @param _running_instances New value for member running_instances
 */
void Yanpit::IperfStatus::running_instances(
        uint32_t _running_instances)
{
    m_running_instances = _running_instances;
}

/*!
 * @brief This function returns the value of member running_instances
 * @return Value of member running_instances
 */
uint32_t Yanpit::IperfStatus::running_instances() const
{
    return m_running_instances;
}

/*!
 * @brief This function returns a reference to member running_instances
 * @return Reference to member running_instances
 */
uint32_t& Yanpit::IperfStatus::running_instances()
{
    return m_running_instances;
}



size_t Yanpit::IperfStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_IperfStatus_max_key_cdr_typesize;
}

bool Yanpit::IperfStatus::isKeyDefined()
{
    return false;
}

void Yanpit::IperfStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Yanpit::ActiveTools::ActiveTools()
{
    // Yanpit::IperfStatus m_iperf


}

Yanpit::ActiveTools::~ActiveTools()
{
}

Yanpit::ActiveTools::ActiveTools(
        const ActiveTools& x)
{
    m_iperf = x.m_iperf;
}

Yanpit::ActiveTools::ActiveTools(
        ActiveTools&& x) noexcept 
{
    m_iperf = std::move(x.m_iperf);
}

Yanpit::ActiveTools& Yanpit::ActiveTools::operator =(
        const ActiveTools& x)
{

    m_iperf = x.m_iperf;

    return *this;
}

Yanpit::ActiveTools& Yanpit::ActiveTools::operator =(
        ActiveTools&& x) noexcept
{

    m_iperf = std::move(x.m_iperf);

    return *this;
}

bool Yanpit::ActiveTools::operator ==(
        const ActiveTools& x) const
{

    return (m_iperf == x.m_iperf);
}

bool Yanpit::ActiveTools::operator !=(
        const ActiveTools& x) const
{
    return !(*this == x);
}

size_t Yanpit::ActiveTools::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_ActiveTools_max_cdr_typesize;
}

size_t Yanpit::ActiveTools::getCdrSerializedSize(
        const Yanpit::ActiveTools& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Yanpit::IperfStatus::getCdrSerializedSize(data.iperf(), current_alignment);

    return current_alignment - initial_alignment;
}

void Yanpit::ActiveTools::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_iperf;

}

void Yanpit::ActiveTools::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_iperf;
}

/*!
 * @brief This function copies the value in member iperf
 * @param _iperf New value to be copied in member iperf
 */
void Yanpit::ActiveTools::iperf(
        const Yanpit::IperfStatus& _iperf)
{
    m_iperf = _iperf;
}

/*!
 * @brief This function moves the value in member iperf
 * @param _iperf New value to be moved in member iperf
 */
void Yanpit::ActiveTools::iperf(
        Yanpit::IperfStatus&& _iperf)
{
    m_iperf = std::move(_iperf);
}

/*!
 * @brief This function returns a constant reference to member iperf
 * @return Constant reference to member iperf
 */
const Yanpit::IperfStatus& Yanpit::ActiveTools::iperf() const
{
    return m_iperf;
}

/*!
 * @brief This function returns a reference to member iperf
 * @return Reference to member iperf
 */
Yanpit::IperfStatus& Yanpit::ActiveTools::iperf()
{
    return m_iperf;
}


size_t Yanpit::ActiveTools::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_ActiveTools_max_key_cdr_typesize;
}

bool Yanpit::ActiveTools::isKeyDefined()
{
    return false;
}

void Yanpit::ActiveTools::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Yanpit::NcmStatus::NcmStatus()
{
    // boolean m_is_running
    m_is_running = false;

}

Yanpit::NcmStatus::~NcmStatus()
{
}

Yanpit::NcmStatus::NcmStatus(
        const NcmStatus& x)
{
    m_is_running = x.m_is_running;
}

Yanpit::NcmStatus::NcmStatus(
        NcmStatus&& x) noexcept 
{
    m_is_running = x.m_is_running;
}

Yanpit::NcmStatus& Yanpit::NcmStatus::operator =(
        const NcmStatus& x)
{

    m_is_running = x.m_is_running;

    return *this;
}

Yanpit::NcmStatus& Yanpit::NcmStatus::operator =(
        NcmStatus&& x) noexcept
{

    m_is_running = x.m_is_running;

    return *this;
}

bool Yanpit::NcmStatus::operator ==(
        const NcmStatus& x) const
{

    return (m_is_running == x.m_is_running);
}

bool Yanpit::NcmStatus::operator !=(
        const NcmStatus& x) const
{
    return !(*this == x);
}

size_t Yanpit::NcmStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_NcmStatus_max_cdr_typesize;
}

size_t Yanpit::NcmStatus::getCdrSerializedSize(
        const Yanpit::NcmStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void Yanpit::NcmStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_is_running;

}

void Yanpit::NcmStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_is_running;
}

/*!
 * @brief This function sets a value in member is_running
 * @param _is_running New value for member is_running
 */
void Yanpit::NcmStatus::is_running(
        bool _is_running)
{
    m_is_running = _is_running;
}

/*!
 * @brief This function returns the value of member is_running
 * @return Value of member is_running
 */
bool Yanpit::NcmStatus::is_running() const
{
    return m_is_running;
}

/*!
 * @brief This function returns a reference to member is_running
 * @return Reference to member is_running
 */
bool& Yanpit::NcmStatus::is_running()
{
    return m_is_running;
}



size_t Yanpit::NcmStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_NcmStatus_max_key_cdr_typesize;
}

bool Yanpit::NcmStatus::isKeyDefined()
{
    return false;
}

void Yanpit::NcmStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Yanpit::LocalnetStatus::LocalnetStatus()
{
    // boolean m_is_running
    m_is_running = false;

}

Yanpit::LocalnetStatus::~LocalnetStatus()
{
}

Yanpit::LocalnetStatus::LocalnetStatus(
        const LocalnetStatus& x)
{
    m_is_running = x.m_is_running;
}

Yanpit::LocalnetStatus::LocalnetStatus(
        LocalnetStatus&& x) noexcept 
{
    m_is_running = x.m_is_running;
}

Yanpit::LocalnetStatus& Yanpit::LocalnetStatus::operator =(
        const LocalnetStatus& x)
{

    m_is_running = x.m_is_running;

    return *this;
}

Yanpit::LocalnetStatus& Yanpit::LocalnetStatus::operator =(
        LocalnetStatus&& x) noexcept
{

    m_is_running = x.m_is_running;

    return *this;
}

bool Yanpit::LocalnetStatus::operator ==(
        const LocalnetStatus& x) const
{

    return (m_is_running == x.m_is_running);
}

bool Yanpit::LocalnetStatus::operator !=(
        const LocalnetStatus& x) const
{
    return !(*this == x);
}

size_t Yanpit::LocalnetStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_LocalnetStatus_max_cdr_typesize;
}

size_t Yanpit::LocalnetStatus::getCdrSerializedSize(
        const Yanpit::LocalnetStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void Yanpit::LocalnetStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_is_running;

}

void Yanpit::LocalnetStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_is_running;
}

/*!
 * @brief This function sets a value in member is_running
 * @param _is_running New value for member is_running
 */
void Yanpit::LocalnetStatus::is_running(
        bool _is_running)
{
    m_is_running = _is_running;
}

/*!
 * @brief This function returns the value of member is_running
 * @return Value of member is_running
 */
bool Yanpit::LocalnetStatus::is_running() const
{
    return m_is_running;
}

/*!
 * @brief This function returns a reference to member is_running
 * @return Reference to member is_running
 */
bool& Yanpit::LocalnetStatus::is_running()
{
    return m_is_running;
}



size_t Yanpit::LocalnetStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_LocalnetStatus_max_key_cdr_typesize;
}

bool Yanpit::LocalnetStatus::isKeyDefined()
{
    return false;
}

void Yanpit::LocalnetStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Yanpit::PassiveTools::PassiveTools()
{
    // Yanpit::NcmStatus m_ncm

    // Yanpit::LocalnetStatus m_localnet


}

Yanpit::PassiveTools::~PassiveTools()
{


}

Yanpit::PassiveTools::PassiveTools(
        const PassiveTools& x)
{
    m_ncm = x.m_ncm;
    m_localnet = x.m_localnet;
}

Yanpit::PassiveTools::PassiveTools(
        PassiveTools&& x) noexcept 
{
    m_ncm = std::move(x.m_ncm);
    m_localnet = std::move(x.m_localnet);
}

Yanpit::PassiveTools& Yanpit::PassiveTools::operator =(
        const PassiveTools& x)
{

    m_ncm = x.m_ncm;
    m_localnet = x.m_localnet;

    return *this;
}

Yanpit::PassiveTools& Yanpit::PassiveTools::operator =(
        PassiveTools&& x) noexcept
{

    m_ncm = std::move(x.m_ncm);
    m_localnet = std::move(x.m_localnet);

    return *this;
}

bool Yanpit::PassiveTools::operator ==(
        const PassiveTools& x) const
{

    return (m_ncm == x.m_ncm && m_localnet == x.m_localnet);
}

bool Yanpit::PassiveTools::operator !=(
        const PassiveTools& x) const
{
    return !(*this == x);
}

size_t Yanpit::PassiveTools::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_PassiveTools_max_cdr_typesize;
}

size_t Yanpit::PassiveTools::getCdrSerializedSize(
        const Yanpit::PassiveTools& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Yanpit::NcmStatus::getCdrSerializedSize(data.ncm(), current_alignment);
    current_alignment += Yanpit::LocalnetStatus::getCdrSerializedSize(data.localnet(), current_alignment);

    return current_alignment - initial_alignment;
}

void Yanpit::PassiveTools::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_ncm;
    scdr << m_localnet;

}

void Yanpit::PassiveTools::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_ncm;
    dcdr >> m_localnet;
}

/*!
 * @brief This function copies the value in member ncm
 * @param _ncm New value to be copied in member ncm
 */
void Yanpit::PassiveTools::ncm(
        const Yanpit::NcmStatus& _ncm)
{
    m_ncm = _ncm;
}

/*!
 * @brief This function moves the value in member ncm
 * @param _ncm New value to be moved in member ncm
 */
void Yanpit::PassiveTools::ncm(
        Yanpit::NcmStatus&& _ncm)
{
    m_ncm = std::move(_ncm);
}

/*!
 * @brief This function returns a constant reference to member ncm
 * @return Constant reference to member ncm
 */
const Yanpit::NcmStatus& Yanpit::PassiveTools::ncm() const
{
    return m_ncm;
}

/*!
 * @brief This function returns a reference to member ncm
 * @return Reference to member ncm
 */
Yanpit::NcmStatus& Yanpit::PassiveTools::ncm()
{
    return m_ncm;
}
/*!
 * @brief This function copies the value in member localnet
 * @param _localnet New value to be copied in member localnet
 */
void Yanpit::PassiveTools::localnet(
        const Yanpit::LocalnetStatus& _localnet)
{
    m_localnet = _localnet;
}

/*!
 * @brief This function moves the value in member localnet
 * @param _localnet New value to be moved in member localnet
 */
void Yanpit::PassiveTools::localnet(
        Yanpit::LocalnetStatus&& _localnet)
{
    m_localnet = std::move(_localnet);
}

/*!
 * @brief This function returns a constant reference to member localnet
 * @return Constant reference to member localnet
 */
const Yanpit::LocalnetStatus& Yanpit::PassiveTools::localnet() const
{
    return m_localnet;
}

/*!
 * @brief This function returns a reference to member localnet
 * @return Reference to member localnet
 */
Yanpit::LocalnetStatus& Yanpit::PassiveTools::localnet()
{
    return m_localnet;
}


size_t Yanpit::PassiveTools::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_PassiveTools_max_key_cdr_typesize;
}

bool Yanpit::PassiveTools::isKeyDefined()
{
    return false;
}

void Yanpit::PassiveTools::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Yanpit::YanpitStatus::YanpitStatus()
{
    // unsigned long long m_timestamp
    m_timestamp = 0;
    // Yanpit::ActiveTools m_active_tools

    // Yanpit::PassiveTools m_passive_tools


}

Yanpit::YanpitStatus::~YanpitStatus()
{



}

Yanpit::YanpitStatus::YanpitStatus(
        const YanpitStatus& x)
{
    m_timestamp = x.m_timestamp;
    m_active_tools = x.m_active_tools;
    m_passive_tools = x.m_passive_tools;
}

Yanpit::YanpitStatus::YanpitStatus(
        YanpitStatus&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_active_tools = std::move(x.m_active_tools);
    m_passive_tools = std::move(x.m_passive_tools);
}

Yanpit::YanpitStatus& Yanpit::YanpitStatus::operator =(
        const YanpitStatus& x)
{

    m_timestamp = x.m_timestamp;
    m_active_tools = x.m_active_tools;
    m_passive_tools = x.m_passive_tools;

    return *this;
}

Yanpit::YanpitStatus& Yanpit::YanpitStatus::operator =(
        YanpitStatus&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_active_tools = std::move(x.m_active_tools);
    m_passive_tools = std::move(x.m_passive_tools);

    return *this;
}

bool Yanpit::YanpitStatus::operator ==(
        const YanpitStatus& x) const
{

    return (m_timestamp == x.m_timestamp && m_active_tools == x.m_active_tools && m_passive_tools == x.m_passive_tools);
}

bool Yanpit::YanpitStatus::operator !=(
        const YanpitStatus& x) const
{
    return !(*this == x);
}

size_t Yanpit::YanpitStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_YanpitStatus_max_cdr_typesize;
}

size_t Yanpit::YanpitStatus::getCdrSerializedSize(
        const Yanpit::YanpitStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += Yanpit::ActiveTools::getCdrSerializedSize(data.active_tools(), current_alignment);
    current_alignment += Yanpit::PassiveTools::getCdrSerializedSize(data.passive_tools(), current_alignment);

    return current_alignment - initial_alignment;
}

void Yanpit::YanpitStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_active_tools;
    scdr << m_passive_tools;

}

void Yanpit::YanpitStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_active_tools;
    dcdr >> m_passive_tools;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Yanpit::YanpitStatus::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t Yanpit::YanpitStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& Yanpit::YanpitStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member active_tools
 * @param _active_tools New value to be copied in member active_tools
 */
void Yanpit::YanpitStatus::active_tools(
        const Yanpit::ActiveTools& _active_tools)
{
    m_active_tools = _active_tools;
}

/*!
 * @brief This function moves the value in member active_tools
 * @param _active_tools New value to be moved in member active_tools
 */
void Yanpit::YanpitStatus::active_tools(
        Yanpit::ActiveTools&& _active_tools)
{
    m_active_tools = std::move(_active_tools);
}

/*!
 * @brief This function returns a constant reference to member active_tools
 * @return Constant reference to member active_tools
 */
const Yanpit::ActiveTools& Yanpit::YanpitStatus::active_tools() const
{
    return m_active_tools;
}

/*!
 * @brief This function returns a reference to member active_tools
 * @return Reference to member active_tools
 */
Yanpit::ActiveTools& Yanpit::YanpitStatus::active_tools()
{
    return m_active_tools;
}
/*!
 * @brief This function copies the value in member passive_tools
 * @param _passive_tools New value to be copied in member passive_tools
 */
void Yanpit::YanpitStatus::passive_tools(
        const Yanpit::PassiveTools& _passive_tools)
{
    m_passive_tools = _passive_tools;
}

/*!
 * @brief This function moves the value in member passive_tools
 * @param _passive_tools New value to be moved in member passive_tools
 */
void Yanpit::YanpitStatus::passive_tools(
        Yanpit::PassiveTools&& _passive_tools)
{
    m_passive_tools = std::move(_passive_tools);
}

/*!
 * @brief This function returns a constant reference to member passive_tools
 * @return Constant reference to member passive_tools
 */
const Yanpit::PassiveTools& Yanpit::YanpitStatus::passive_tools() const
{
    return m_passive_tools;
}

/*!
 * @brief This function returns a reference to member passive_tools
 * @return Reference to member passive_tools
 */
Yanpit::PassiveTools& Yanpit::YanpitStatus::passive_tools()
{
    return m_passive_tools;
}


size_t Yanpit::YanpitStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Yanpit_YanpitStatus_max_key_cdr_typesize;
}

bool Yanpit::YanpitStatus::isKeyDefined()
{
    return true;
}

void Yanpit::YanpitStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
   scdr << m_timestamp;
   
 
  
}

