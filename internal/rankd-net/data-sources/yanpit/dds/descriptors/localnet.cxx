// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file localnet.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "data-sources/yanpit/dds/descriptors/localnet.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define Localnet_NetworkInterface_max_cdr_typesize 52864ULL;
#define Localnet_MapEntry_max_cdr_typesize 53120ULL;
#define Localnet_LocalnetStatus_max_cdr_typesize 5312016ULL;
#define Localnet_NetworkInterface_max_key_cdr_typesize 0ULL;
#define Localnet_MapEntry_max_key_cdr_typesize 260ULL;
#define Localnet_LocalnetStatus_max_key_cdr_typesize 8ULL;

Localnet::NetworkInterface::NetworkInterface()
{
    // string m_mac_address
    m_mac_address ="";
    // sequence<string> m_ip4_addresses

    // sequence<string> m_ip6_addresses

    // boolean m_has_carrier
    m_has_carrier = false;
    // string m_duplex_type
    m_duplex_type ="";
    // unsigned long m_interface_index
    m_interface_index = 0;
    // unsigned long m_enslaved_interface_index
    m_enslaved_interface_index = 0;
    // unsigned long m_mtu
    m_mtu = 0;
    // string m_operation_state
    m_operation_state ="";
    // long long m_speed
    m_speed = 0;
    // long long m_rx_bytes
    m_rx_bytes = 0;
    // long long m_tx_bytes
    m_tx_bytes = 0;
    // long long m_rx_packets
    m_rx_packets = 0;
    // long long m_tx_packets
    m_tx_packets = 0;
    // unsigned long m_rx_errors
    m_rx_errors = 0;
    // unsigned long m_tx_errors
    m_tx_errors = 0;
    // unsigned long m_rx_dropped
    m_rx_dropped = 0;
    // unsigned long m_tx_dropped
    m_tx_dropped = 0;

}

Localnet::NetworkInterface::~NetworkInterface()
{


















}

Localnet::NetworkInterface::NetworkInterface(
        const NetworkInterface& x)
{
    m_mac_address = x.m_mac_address;
    m_ip4_addresses = x.m_ip4_addresses;
    m_ip6_addresses = x.m_ip6_addresses;
    m_has_carrier = x.m_has_carrier;
    m_duplex_type = x.m_duplex_type;
    m_interface_index = x.m_interface_index;
    m_enslaved_interface_index = x.m_enslaved_interface_index;
    m_mtu = x.m_mtu;
    m_operation_state = x.m_operation_state;
    m_speed = x.m_speed;
    m_rx_bytes = x.m_rx_bytes;
    m_tx_bytes = x.m_tx_bytes;
    m_rx_packets = x.m_rx_packets;
    m_tx_packets = x.m_tx_packets;
    m_rx_errors = x.m_rx_errors;
    m_tx_errors = x.m_tx_errors;
    m_rx_dropped = x.m_rx_dropped;
    m_tx_dropped = x.m_tx_dropped;
}

Localnet::NetworkInterface::NetworkInterface(
        NetworkInterface&& x) noexcept 
{
    m_mac_address = std::move(x.m_mac_address);
    m_ip4_addresses = std::move(x.m_ip4_addresses);
    m_ip6_addresses = std::move(x.m_ip6_addresses);
    m_has_carrier = x.m_has_carrier;
    m_duplex_type = std::move(x.m_duplex_type);
    m_interface_index = x.m_interface_index;
    m_enslaved_interface_index = x.m_enslaved_interface_index;
    m_mtu = x.m_mtu;
    m_operation_state = std::move(x.m_operation_state);
    m_speed = x.m_speed;
    m_rx_bytes = x.m_rx_bytes;
    m_tx_bytes = x.m_tx_bytes;
    m_rx_packets = x.m_rx_packets;
    m_tx_packets = x.m_tx_packets;
    m_rx_errors = x.m_rx_errors;
    m_tx_errors = x.m_tx_errors;
    m_rx_dropped = x.m_rx_dropped;
    m_tx_dropped = x.m_tx_dropped;
}

Localnet::NetworkInterface& Localnet::NetworkInterface::operator =(
        const NetworkInterface& x)
{

    m_mac_address = x.m_mac_address;
    m_ip4_addresses = x.m_ip4_addresses;
    m_ip6_addresses = x.m_ip6_addresses;
    m_has_carrier = x.m_has_carrier;
    m_duplex_type = x.m_duplex_type;
    m_interface_index = x.m_interface_index;
    m_enslaved_interface_index = x.m_enslaved_interface_index;
    m_mtu = x.m_mtu;
    m_operation_state = x.m_operation_state;
    m_speed = x.m_speed;
    m_rx_bytes = x.m_rx_bytes;
    m_tx_bytes = x.m_tx_bytes;
    m_rx_packets = x.m_rx_packets;
    m_tx_packets = x.m_tx_packets;
    m_rx_errors = x.m_rx_errors;
    m_tx_errors = x.m_tx_errors;
    m_rx_dropped = x.m_rx_dropped;
    m_tx_dropped = x.m_tx_dropped;

    return *this;
}

Localnet::NetworkInterface& Localnet::NetworkInterface::operator =(
        NetworkInterface&& x) noexcept
{

    m_mac_address = std::move(x.m_mac_address);
    m_ip4_addresses = std::move(x.m_ip4_addresses);
    m_ip6_addresses = std::move(x.m_ip6_addresses);
    m_has_carrier = x.m_has_carrier;
    m_duplex_type = std::move(x.m_duplex_type);
    m_interface_index = x.m_interface_index;
    m_enslaved_interface_index = x.m_enslaved_interface_index;
    m_mtu = x.m_mtu;
    m_operation_state = std::move(x.m_operation_state);
    m_speed = x.m_speed;
    m_rx_bytes = x.m_rx_bytes;
    m_tx_bytes = x.m_tx_bytes;
    m_rx_packets = x.m_rx_packets;
    m_tx_packets = x.m_tx_packets;
    m_rx_errors = x.m_rx_errors;
    m_tx_errors = x.m_tx_errors;
    m_rx_dropped = x.m_rx_dropped;
    m_tx_dropped = x.m_tx_dropped;

    return *this;
}

bool Localnet::NetworkInterface::operator ==(
        const NetworkInterface& x) const
{

    return (m_mac_address == x.m_mac_address && m_ip4_addresses == x.m_ip4_addresses && m_ip6_addresses == x.m_ip6_addresses && m_has_carrier == x.m_has_carrier && m_duplex_type == x.m_duplex_type && m_interface_index == x.m_interface_index && m_enslaved_interface_index == x.m_enslaved_interface_index && m_mtu == x.m_mtu && m_operation_state == x.m_operation_state && m_speed == x.m_speed && m_rx_bytes == x.m_rx_bytes && m_tx_bytes == x.m_tx_bytes && m_rx_packets == x.m_rx_packets && m_tx_packets == x.m_tx_packets && m_rx_errors == x.m_rx_errors && m_tx_errors == x.m_tx_errors && m_rx_dropped == x.m_rx_dropped && m_tx_dropped == x.m_tx_dropped);
}

bool Localnet::NetworkInterface::operator !=(
        const NetworkInterface& x) const
{
    return !(*this == x);
}

size_t Localnet::NetworkInterface::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_NetworkInterface_max_cdr_typesize;
}

size_t Localnet::NetworkInterface::getCdrSerializedSize(
        const Localnet::NetworkInterface& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mac_address().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.ip4_addresses().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.ip4_addresses().at(a).size() + 1;
    }
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.ip6_addresses().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.ip6_addresses().at(a).size() + 1;
    }
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.duplex_type().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.operation_state().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Localnet::NetworkInterface::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_mac_address.c_str();
    scdr << m_ip4_addresses;
    scdr << m_ip6_addresses;
    scdr << m_has_carrier;
    scdr << m_duplex_type.c_str();
    scdr << m_interface_index;
    scdr << m_enslaved_interface_index;
    scdr << m_mtu;
    scdr << m_operation_state.c_str();
    scdr << m_speed;
    scdr << m_rx_bytes;
    scdr << m_tx_bytes;
    scdr << m_rx_packets;
    scdr << m_tx_packets;
    scdr << m_rx_errors;
    scdr << m_tx_errors;
    scdr << m_rx_dropped;
    scdr << m_tx_dropped;

}

void Localnet::NetworkInterface::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_mac_address;
    dcdr >> m_ip4_addresses;
    dcdr >> m_ip6_addresses;
    dcdr >> m_has_carrier;
    dcdr >> m_duplex_type;
    dcdr >> m_interface_index;
    dcdr >> m_enslaved_interface_index;
    dcdr >> m_mtu;
    dcdr >> m_operation_state;
    dcdr >> m_speed;
    dcdr >> m_rx_bytes;
    dcdr >> m_tx_bytes;
    dcdr >> m_rx_packets;
    dcdr >> m_tx_packets;
    dcdr >> m_rx_errors;
    dcdr >> m_tx_errors;
    dcdr >> m_rx_dropped;
    dcdr >> m_tx_dropped;
}

/*!
 * @brief This function copies the value in member mac_address
 * @param _mac_address New value to be copied in member mac_address
 */
void Localnet::NetworkInterface::mac_address(
        const std::string& _mac_address)
{
    m_mac_address = _mac_address;
}

/*!
 * @brief This function moves the value in member mac_address
 * @param _mac_address New value to be moved in member mac_address
 */
void Localnet::NetworkInterface::mac_address(
        std::string&& _mac_address)
{
    m_mac_address = std::move(_mac_address);
}

/*!
 * @brief This function returns a constant reference to member mac_address
 * @return Constant reference to member mac_address
 */
const std::string& Localnet::NetworkInterface::mac_address() const
{
    return m_mac_address;
}

/*!
 * @brief This function returns a reference to member mac_address
 * @return Reference to member mac_address
 */
std::string& Localnet::NetworkInterface::mac_address()
{
    return m_mac_address;
}
/*!
 * @brief This function copies the value in member ip4_addresses
 * @param _ip4_addresses New value to be copied in member ip4_addresses
 */
void Localnet::NetworkInterface::ip4_addresses(
        const std::vector<std::string>& _ip4_addresses)
{
    m_ip4_addresses = _ip4_addresses;
}

/*!
 * @brief This function moves the value in member ip4_addresses
 * @param _ip4_addresses New value to be moved in member ip4_addresses
 */
void Localnet::NetworkInterface::ip4_addresses(
        std::vector<std::string>&& _ip4_addresses)
{
    m_ip4_addresses = std::move(_ip4_addresses);
}

/*!
 * @brief This function returns a constant reference to member ip4_addresses
 * @return Constant reference to member ip4_addresses
 */
const std::vector<std::string>& Localnet::NetworkInterface::ip4_addresses() const
{
    return m_ip4_addresses;
}

/*!
 * @brief This function returns a reference to member ip4_addresses
 * @return Reference to member ip4_addresses
 */
std::vector<std::string>& Localnet::NetworkInterface::ip4_addresses()
{
    return m_ip4_addresses;
}
/*!
 * @brief This function copies the value in member ip6_addresses
 * @param _ip6_addresses New value to be copied in member ip6_addresses
 */
void Localnet::NetworkInterface::ip6_addresses(
        const std::vector<std::string>& _ip6_addresses)
{
    m_ip6_addresses = _ip6_addresses;
}

/*!
 * @brief This function moves the value in member ip6_addresses
 * @param _ip6_addresses New value to be moved in member ip6_addresses
 */
void Localnet::NetworkInterface::ip6_addresses(
        std::vector<std::string>&& _ip6_addresses)
{
    m_ip6_addresses = std::move(_ip6_addresses);
}

/*!
 * @brief This function returns a constant reference to member ip6_addresses
 * @return Constant reference to member ip6_addresses
 */
const std::vector<std::string>& Localnet::NetworkInterface::ip6_addresses() const
{
    return m_ip6_addresses;
}

/*!
 * @brief This function returns a reference to member ip6_addresses
 * @return Reference to member ip6_addresses
 */
std::vector<std::string>& Localnet::NetworkInterface::ip6_addresses()
{
    return m_ip6_addresses;
}
/*!
 * @brief This function sets a value in member has_carrier
 * @param _has_carrier New value for member has_carrier
 */
void Localnet::NetworkInterface::has_carrier(
        bool _has_carrier)
{
    m_has_carrier = _has_carrier;
}

/*!
 * @brief This function returns the value of member has_carrier
 * @return Value of member has_carrier
 */
bool Localnet::NetworkInterface::has_carrier() const
{
    return m_has_carrier;
}

/*!
 * @brief This function returns a reference to member has_carrier
 * @return Reference to member has_carrier
 */
bool& Localnet::NetworkInterface::has_carrier()
{
    return m_has_carrier;
}

/*!
 * @brief This function copies the value in member duplex_type
 * @param _duplex_type New value to be copied in member duplex_type
 */
void Localnet::NetworkInterface::duplex_type(
        const std::string& _duplex_type)
{
    m_duplex_type = _duplex_type;
}

/*!
 * @brief This function moves the value in member duplex_type
 * @param _duplex_type New value to be moved in member duplex_type
 */
void Localnet::NetworkInterface::duplex_type(
        std::string&& _duplex_type)
{
    m_duplex_type = std::move(_duplex_type);
}

/*!
 * @brief This function returns a constant reference to member duplex_type
 * @return Constant reference to member duplex_type
 */
const std::string& Localnet::NetworkInterface::duplex_type() const
{
    return m_duplex_type;
}

/*!
 * @brief This function returns a reference to member duplex_type
 * @return Reference to member duplex_type
 */
std::string& Localnet::NetworkInterface::duplex_type()
{
    return m_duplex_type;
}
/*!
 * @brief This function sets a value in member interface_index
 * @param _interface_index New value for member interface_index
 */
void Localnet::NetworkInterface::interface_index(
        uint32_t _interface_index)
{
    m_interface_index = _interface_index;
}

/*!
 * @brief This function returns the value of member interface_index
 * @return Value of member interface_index
 */
uint32_t Localnet::NetworkInterface::interface_index() const
{
    return m_interface_index;
}

/*!
 * @brief This function returns a reference to member interface_index
 * @return Reference to member interface_index
 */
uint32_t& Localnet::NetworkInterface::interface_index()
{
    return m_interface_index;
}

/*!
 * @brief This function sets a value in member enslaved_interface_index
 * @param _enslaved_interface_index New value for member enslaved_interface_index
 */
void Localnet::NetworkInterface::enslaved_interface_index(
        uint32_t _enslaved_interface_index)
{
    m_enslaved_interface_index = _enslaved_interface_index;
}

/*!
 * @brief This function returns the value of member enslaved_interface_index
 * @return Value of member enslaved_interface_index
 */
uint32_t Localnet::NetworkInterface::enslaved_interface_index() const
{
    return m_enslaved_interface_index;
}

/*!
 * @brief This function returns a reference to member enslaved_interface_index
 * @return Reference to member enslaved_interface_index
 */
uint32_t& Localnet::NetworkInterface::enslaved_interface_index()
{
    return m_enslaved_interface_index;
}

/*!
 * @brief This function sets a value in member mtu
 * @param _mtu New value for member mtu
 */
void Localnet::NetworkInterface::mtu(
        uint32_t _mtu)
{
    m_mtu = _mtu;
}

/*!
 * @brief This function returns the value of member mtu
 * @return Value of member mtu
 */
uint32_t Localnet::NetworkInterface::mtu() const
{
    return m_mtu;
}

/*!
 * @brief This function returns a reference to member mtu
 * @return Reference to member mtu
 */
uint32_t& Localnet::NetworkInterface::mtu()
{
    return m_mtu;
}

/*!
 * @brief This function copies the value in member operation_state
 * @param _operation_state New value to be copied in member operation_state
 */
void Localnet::NetworkInterface::operation_state(
        const std::string& _operation_state)
{
    m_operation_state = _operation_state;
}

/*!
 * @brief This function moves the value in member operation_state
 * @param _operation_state New value to be moved in member operation_state
 */
void Localnet::NetworkInterface::operation_state(
        std::string&& _operation_state)
{
    m_operation_state = std::move(_operation_state);
}

/*!
 * @brief This function returns a constant reference to member operation_state
 * @return Constant reference to member operation_state
 */
const std::string& Localnet::NetworkInterface::operation_state() const
{
    return m_operation_state;
}

/*!
 * @brief This function returns a reference to member operation_state
 * @return Reference to member operation_state
 */
std::string& Localnet::NetworkInterface::operation_state()
{
    return m_operation_state;
}
/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void Localnet::NetworkInterface::speed(
        int64_t _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
int64_t Localnet::NetworkInterface::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
int64_t& Localnet::NetworkInterface::speed()
{
    return m_speed;
}

/*!
 * @brief This function sets a value in member rx_bytes
 * @param _rx_bytes New value for member rx_bytes
 */
void Localnet::NetworkInterface::rx_bytes(
        int64_t _rx_bytes)
{
    m_rx_bytes = _rx_bytes;
}

/*!
 * @brief This function returns the value of member rx_bytes
 * @return Value of member rx_bytes
 */
int64_t Localnet::NetworkInterface::rx_bytes() const
{
    return m_rx_bytes;
}

/*!
 * @brief This function returns a reference to member rx_bytes
 * @return Reference to member rx_bytes
 */
int64_t& Localnet::NetworkInterface::rx_bytes()
{
    return m_rx_bytes;
}

/*!
 * @brief This function sets a value in member tx_bytes
 * @param _tx_bytes New value for member tx_bytes
 */
void Localnet::NetworkInterface::tx_bytes(
        int64_t _tx_bytes)
{
    m_tx_bytes = _tx_bytes;
}

/*!
 * @brief This function returns the value of member tx_bytes
 * @return Value of member tx_bytes
 */
int64_t Localnet::NetworkInterface::tx_bytes() const
{
    return m_tx_bytes;
}

/*!
 * @brief This function returns a reference to member tx_bytes
 * @return Reference to member tx_bytes
 */
int64_t& Localnet::NetworkInterface::tx_bytes()
{
    return m_tx_bytes;
}

/*!
 * @brief This function sets a value in member rx_packets
 * @param _rx_packets New value for member rx_packets
 */
void Localnet::NetworkInterface::rx_packets(
        int64_t _rx_packets)
{
    m_rx_packets = _rx_packets;
}

/*!
 * @brief This function returns the value of member rx_packets
 * @return Value of member rx_packets
 */
int64_t Localnet::NetworkInterface::rx_packets() const
{
    return m_rx_packets;
}

/*!
 * @brief This function returns a reference to member rx_packets
 * @return Reference to member rx_packets
 */
int64_t& Localnet::NetworkInterface::rx_packets()
{
    return m_rx_packets;
}

/*!
 * @brief This function sets a value in member tx_packets
 * @param _tx_packets New value for member tx_packets
 */
void Localnet::NetworkInterface::tx_packets(
        int64_t _tx_packets)
{
    m_tx_packets = _tx_packets;
}

/*!
 * @brief This function returns the value of member tx_packets
 * @return Value of member tx_packets
 */
int64_t Localnet::NetworkInterface::tx_packets() const
{
    return m_tx_packets;
}

/*!
 * @brief This function returns a reference to member tx_packets
 * @return Reference to member tx_packets
 */
int64_t& Localnet::NetworkInterface::tx_packets()
{
    return m_tx_packets;
}

/*!
 * @brief This function sets a value in member rx_errors
 * @param _rx_errors New value for member rx_errors
 */
void Localnet::NetworkInterface::rx_errors(
        uint32_t _rx_errors)
{
    m_rx_errors = _rx_errors;
}

/*!
 * @brief This function returns the value of member rx_errors
 * @return Value of member rx_errors
 */
uint32_t Localnet::NetworkInterface::rx_errors() const
{
    return m_rx_errors;
}

/*!
 * @brief This function returns a reference to member rx_errors
 * @return Reference to member rx_errors
 */
uint32_t& Localnet::NetworkInterface::rx_errors()
{
    return m_rx_errors;
}

/*!
 * @brief This function sets a value in member tx_errors
 * @param _tx_errors New value for member tx_errors
 */
void Localnet::NetworkInterface::tx_errors(
        uint32_t _tx_errors)
{
    m_tx_errors = _tx_errors;
}

/*!
 * @brief This function returns the value of member tx_errors
 * @return Value of member tx_errors
 */
uint32_t Localnet::NetworkInterface::tx_errors() const
{
    return m_tx_errors;
}

/*!
 * @brief This function returns a reference to member tx_errors
 * @return Reference to member tx_errors
 */
uint32_t& Localnet::NetworkInterface::tx_errors()
{
    return m_tx_errors;
}

/*!
 * @brief This function sets a value in member rx_dropped
 * @param _rx_dropped New value for member rx_dropped
 */
void Localnet::NetworkInterface::rx_dropped(
        uint32_t _rx_dropped)
{
    m_rx_dropped = _rx_dropped;
}

/*!
 * @brief This function returns the value of member rx_dropped
 * @return Value of member rx_dropped
 */
uint32_t Localnet::NetworkInterface::rx_dropped() const
{
    return m_rx_dropped;
}

/*!
 * @brief This function returns a reference to member rx_dropped
 * @return Reference to member rx_dropped
 */
uint32_t& Localnet::NetworkInterface::rx_dropped()
{
    return m_rx_dropped;
}

/*!
 * @brief This function sets a value in member tx_dropped
 * @param _tx_dropped New value for member tx_dropped
 */
void Localnet::NetworkInterface::tx_dropped(
        uint32_t _tx_dropped)
{
    m_tx_dropped = _tx_dropped;
}

/*!
 * @brief This function returns the value of member tx_dropped
 * @return Value of member tx_dropped
 */
uint32_t Localnet::NetworkInterface::tx_dropped() const
{
    return m_tx_dropped;
}

/*!
 * @brief This function returns a reference to member tx_dropped
 * @return Reference to member tx_dropped
 */
uint32_t& Localnet::NetworkInterface::tx_dropped()
{
    return m_tx_dropped;
}



size_t Localnet::NetworkInterface::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_NetworkInterface_max_key_cdr_typesize;
}

bool Localnet::NetworkInterface::isKeyDefined()
{
    return false;
}

void Localnet::NetworkInterface::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Localnet::MapEntry::MapEntry()
{
    // string m_interface_name
    m_interface_name ="";
    // Localnet::NetworkInterface m_interface_item


}

Localnet::MapEntry::~MapEntry()
{


}

Localnet::MapEntry::MapEntry(
        const MapEntry& x)
{
    m_interface_name = x.m_interface_name;
    m_interface_item = x.m_interface_item;
}

Localnet::MapEntry::MapEntry(
        MapEntry&& x) noexcept 
{
    m_interface_name = std::move(x.m_interface_name);
    m_interface_item = std::move(x.m_interface_item);
}

Localnet::MapEntry& Localnet::MapEntry::operator =(
        const MapEntry& x)
{

    m_interface_name = x.m_interface_name;
    m_interface_item = x.m_interface_item;

    return *this;
}

Localnet::MapEntry& Localnet::MapEntry::operator =(
        MapEntry&& x) noexcept
{

    m_interface_name = std::move(x.m_interface_name);
    m_interface_item = std::move(x.m_interface_item);

    return *this;
}

bool Localnet::MapEntry::operator ==(
        const MapEntry& x) const
{

    return (m_interface_name == x.m_interface_name && m_interface_item == x.m_interface_item);
}

bool Localnet::MapEntry::operator !=(
        const MapEntry& x) const
{
    return !(*this == x);
}

size_t Localnet::MapEntry::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_MapEntry_max_cdr_typesize;
}

size_t Localnet::MapEntry::getCdrSerializedSize(
        const Localnet::MapEntry& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.interface_name().size() + 1;

    current_alignment += Localnet::NetworkInterface::getCdrSerializedSize(data.interface_item(), current_alignment);

    return current_alignment - initial_alignment;
}

void Localnet::MapEntry::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_interface_name.c_str();
    scdr << m_interface_item;

}

void Localnet::MapEntry::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_interface_name;
    dcdr >> m_interface_item;
}

/*!
 * @brief This function copies the value in member interface_name
 * @param _interface_name New value to be copied in member interface_name
 */
void Localnet::MapEntry::interface_name(
        const std::string& _interface_name)
{
    m_interface_name = _interface_name;
}

/*!
 * @brief This function moves the value in member interface_name
 * @param _interface_name New value to be moved in member interface_name
 */
void Localnet::MapEntry::interface_name(
        std::string&& _interface_name)
{
    m_interface_name = std::move(_interface_name);
}

/*!
 * @brief This function returns a constant reference to member interface_name
 * @return Constant reference to member interface_name
 */
const std::string& Localnet::MapEntry::interface_name() const
{
    return m_interface_name;
}

/*!
 * @brief This function returns a reference to member interface_name
 * @return Reference to member interface_name
 */
std::string& Localnet::MapEntry::interface_name()
{
    return m_interface_name;
}
/*!
 * @brief This function copies the value in member interface_item
 * @param _interface_item New value to be copied in member interface_item
 */
void Localnet::MapEntry::interface_item(
        const Localnet::NetworkInterface& _interface_item)
{
    m_interface_item = _interface_item;
}

/*!
 * @brief This function moves the value in member interface_item
 * @param _interface_item New value to be moved in member interface_item
 */
void Localnet::MapEntry::interface_item(
        Localnet::NetworkInterface&& _interface_item)
{
    m_interface_item = std::move(_interface_item);
}

/*!
 * @brief This function returns a constant reference to member interface_item
 * @return Constant reference to member interface_item
 */
const Localnet::NetworkInterface& Localnet::MapEntry::interface_item() const
{
    return m_interface_item;
}

/*!
 * @brief This function returns a reference to member interface_item
 * @return Reference to member interface_item
 */
Localnet::NetworkInterface& Localnet::MapEntry::interface_item()
{
    return m_interface_item;
}


size_t Localnet::MapEntry::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_MapEntry_max_key_cdr_typesize;
}

bool Localnet::MapEntry::isKeyDefined()
{
    return true;
}

void Localnet::MapEntry::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
   scdr << m_interface_name.c_str();
   
  
}

Localnet::LocalnetStatus::LocalnetStatus()
{
    // unsigned long long m_timestamp
    m_timestamp = 0;
    // sequence<Localnet::MapEntry> m_interfaces


}

Localnet::LocalnetStatus::~LocalnetStatus()
{


}

Localnet::LocalnetStatus::LocalnetStatus(
        const LocalnetStatus& x)
{
    m_timestamp = x.m_timestamp;
    m_interfaces = x.m_interfaces;
}

Localnet::LocalnetStatus::LocalnetStatus(
        LocalnetStatus&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_interfaces = std::move(x.m_interfaces);
}

Localnet::LocalnetStatus& Localnet::LocalnetStatus::operator =(
        const LocalnetStatus& x)
{

    m_timestamp = x.m_timestamp;
    m_interfaces = x.m_interfaces;

    return *this;
}

Localnet::LocalnetStatus& Localnet::LocalnetStatus::operator =(
        LocalnetStatus&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_interfaces = std::move(x.m_interfaces);

    return *this;
}

bool Localnet::LocalnetStatus::operator ==(
        const LocalnetStatus& x) const
{

    return (m_timestamp == x.m_timestamp && m_interfaces == x.m_interfaces);
}

bool Localnet::LocalnetStatus::operator !=(
        const LocalnetStatus& x) const
{
    return !(*this == x);
}

size_t Localnet::LocalnetStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_LocalnetStatus_max_cdr_typesize;
}

size_t Localnet::LocalnetStatus::getCdrSerializedSize(
        const Localnet::LocalnetStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.interfaces().size(); ++a)
    {
        current_alignment += Localnet::MapEntry::getCdrSerializedSize(data.interfaces().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void Localnet::LocalnetStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_interfaces;

}

void Localnet::LocalnetStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_interfaces;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Localnet::LocalnetStatus::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t Localnet::LocalnetStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& Localnet::LocalnetStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member interfaces
 * @param _interfaces New value to be copied in member interfaces
 */
void Localnet::LocalnetStatus::interfaces(
        const std::vector<Localnet::MapEntry>& _interfaces)
{
    m_interfaces = _interfaces;
}

/*!
 * @brief This function moves the value in member interfaces
 * @param _interfaces New value to be moved in member interfaces
 */
void Localnet::LocalnetStatus::interfaces(
        std::vector<Localnet::MapEntry>&& _interfaces)
{
    m_interfaces = std::move(_interfaces);
}

/*!
 * @brief This function returns a constant reference to member interfaces
 * @return Constant reference to member interfaces
 */
const std::vector<Localnet::MapEntry>& Localnet::LocalnetStatus::interfaces() const
{
    return m_interfaces;
}

/*!
 * @brief This function returns a reference to member interfaces
 * @return Reference to member interfaces
 */
std::vector<Localnet::MapEntry>& Localnet::LocalnetStatus::interfaces()
{
    return m_interfaces;
}


size_t Localnet::LocalnetStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Localnet_LocalnetStatus_max_key_cdr_typesize;
}

bool Localnet::LocalnetStatus::isKeyDefined()
{
    return true;
}

void Localnet::LocalnetStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
   scdr << m_timestamp;
   
  
}

