// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file iperf.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "reporting/dds/descriptors/iperf.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define Iperf_Connection_max_cdr_typesize 53468ULL;
#define Iperf_BootstrapInformation_max_cdr_typesize 584ULL;
#define Iperf_Report_max_cdr_typesize 9752ULL;
#define Iperf_Stream_max_cdr_typesize 50ULL;

#define Iperf_ReportedReceivingStream_max_cdr_typesize 49ULL;
#define Iperf_ResourceStatistics_max_cdr_typesize 48ULL;
#define Iperf_ConnectionStatus_max_cdr_typesize 532ULL;
#define Iperf_ReportedSummariesPair_max_cdr_typesize 89ULL;
#define Iperf_Header_max_cdr_typesize 54320ULL;
#define Iperf_ReportedSendingStream_max_cdr_typesize 49ULL;
#define Iperf_ReportedStreamsPair_max_cdr_typesize 97ULL;
#define Iperf_Interval_max_cdr_typesize 4802ULL;
#define Iperf_IperfStatus_max_cdr_typesize 109776008ULL;
#define Iperf_IperfEntity_max_cdr_typesize 548880ULL;
#define Iperf_ConnectionIntention_max_cdr_typesize 264ULL;
#define Iperf_ReportedSendingSummary_max_cdr_typesize 41ULL;
#define Iperf_ReportedReceivingSummary_max_cdr_typesize 41ULL;
#define Iperf_CumulativeInterval_max_cdr_typesize 40ULL;
#define Iperf_Connection_max_key_cdr_typesize 0ULL;
#define Iperf_BootstrapInformation_max_key_cdr_typesize 0ULL;
#define Iperf_Report_max_key_cdr_typesize 0ULL;
#define Iperf_Stream_max_key_cdr_typesize 0ULL;

#define Iperf_ReportedReceivingStream_max_key_cdr_typesize 0ULL;
#define Iperf_ResourceStatistics_max_key_cdr_typesize 0ULL;
#define Iperf_ConnectionStatus_max_key_cdr_typesize 0ULL;
#define Iperf_ReportedSummariesPair_max_key_cdr_typesize 0ULL;
#define Iperf_Header_max_key_cdr_typesize 0ULL;
#define Iperf_ReportedSendingStream_max_key_cdr_typesize 0ULL;
#define Iperf_ReportedStreamsPair_max_key_cdr_typesize 0ULL;
#define Iperf_Interval_max_key_cdr_typesize 0ULL;
#define Iperf_IperfStatus_max_key_cdr_typesize 8ULL;
#define Iperf_IperfEntity_max_key_cdr_typesize 0ULL;
#define Iperf_ConnectionIntention_max_key_cdr_typesize 0ULL;
#define Iperf_ReportedSendingSummary_max_key_cdr_typesize 0ULL;
#define Iperf_ReportedReceivingSummary_max_key_cdr_typesize 0ULL;
#define Iperf_CumulativeInterval_max_key_cdr_typesize 0ULL;

Iperf::ConnectionStatus::ConnectionStatus()
{
    // long m_socket_number
    m_socket_number = 0;
    // string m_local_host
    m_local_host ="";
    // unsigned long m_local_port
    m_local_port = 0;
    // string m_remote_host
    m_remote_host ="";
    // unsigned long m_remote_port
    m_remote_port = 0;

}

Iperf::ConnectionStatus::~ConnectionStatus()
{





}

Iperf::ConnectionStatus::ConnectionStatus(
        const ConnectionStatus& x)
{
    m_socket_number = x.m_socket_number;
    m_local_host = x.m_local_host;
    m_local_port = x.m_local_port;
    m_remote_host = x.m_remote_host;
    m_remote_port = x.m_remote_port;
}

Iperf::ConnectionStatus::ConnectionStatus(
        ConnectionStatus&& x) noexcept 
{
    m_socket_number = x.m_socket_number;
    m_local_host = std::move(x.m_local_host);
    m_local_port = x.m_local_port;
    m_remote_host = std::move(x.m_remote_host);
    m_remote_port = x.m_remote_port;
}

Iperf::ConnectionStatus& Iperf::ConnectionStatus::operator =(
        const ConnectionStatus& x)
{

    m_socket_number = x.m_socket_number;
    m_local_host = x.m_local_host;
    m_local_port = x.m_local_port;
    m_remote_host = x.m_remote_host;
    m_remote_port = x.m_remote_port;

    return *this;
}

Iperf::ConnectionStatus& Iperf::ConnectionStatus::operator =(
        ConnectionStatus&& x) noexcept
{

    m_socket_number = x.m_socket_number;
    m_local_host = std::move(x.m_local_host);
    m_local_port = x.m_local_port;
    m_remote_host = std::move(x.m_remote_host);
    m_remote_port = x.m_remote_port;

    return *this;
}

bool Iperf::ConnectionStatus::operator ==(
        const ConnectionStatus& x) const
{

    return (m_socket_number == x.m_socket_number && m_local_host == x.m_local_host && m_local_port == x.m_local_port && m_remote_host == x.m_remote_host && m_remote_port == x.m_remote_port);
}

bool Iperf::ConnectionStatus::operator !=(
        const ConnectionStatus& x) const
{
    return !(*this == x);
}

size_t Iperf::ConnectionStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ConnectionStatus_max_cdr_typesize;
}

size_t Iperf::ConnectionStatus::getCdrSerializedSize(
        const Iperf::ConnectionStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.local_host().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.remote_host().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Iperf::ConnectionStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_socket_number;
    scdr << m_local_host.c_str();
    scdr << m_local_port;
    scdr << m_remote_host.c_str();
    scdr << m_remote_port;

}

void Iperf::ConnectionStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_socket_number;
    dcdr >> m_local_host;
    dcdr >> m_local_port;
    dcdr >> m_remote_host;
    dcdr >> m_remote_port;
}

/*!
 * @brief This function sets a value in member socket_number
 * @param _socket_number New value for member socket_number
 */
void Iperf::ConnectionStatus::socket_number(
        int32_t _socket_number)
{
    m_socket_number = _socket_number;
}

/*!
 * @brief This function returns the value of member socket_number
 * @return Value of member socket_number
 */
int32_t Iperf::ConnectionStatus::socket_number() const
{
    return m_socket_number;
}

/*!
 * @brief This function returns a reference to member socket_number
 * @return Reference to member socket_number
 */
int32_t& Iperf::ConnectionStatus::socket_number()
{
    return m_socket_number;
}

/*!
 * @brief This function copies the value in member local_host
 * @param _local_host New value to be copied in member local_host
 */
void Iperf::ConnectionStatus::local_host(
        const std::string& _local_host)
{
    m_local_host = _local_host;
}

/*!
 * @brief This function moves the value in member local_host
 * @param _local_host New value to be moved in member local_host
 */
void Iperf::ConnectionStatus::local_host(
        std::string&& _local_host)
{
    m_local_host = std::move(_local_host);
}

/*!
 * @brief This function returns a constant reference to member local_host
 * @return Constant reference to member local_host
 */
const std::string& Iperf::ConnectionStatus::local_host() const
{
    return m_local_host;
}

/*!
 * @brief This function returns a reference to member local_host
 * @return Reference to member local_host
 */
std::string& Iperf::ConnectionStatus::local_host()
{
    return m_local_host;
}
/*!
 * @brief This function sets a value in member local_port
 * @param _local_port New value for member local_port
 */
void Iperf::ConnectionStatus::local_port(
        uint32_t _local_port)
{
    m_local_port = _local_port;
}

/*!
 * @brief This function returns the value of member local_port
 * @return Value of member local_port
 */
uint32_t Iperf::ConnectionStatus::local_port() const
{
    return m_local_port;
}

/*!
 * @brief This function returns a reference to member local_port
 * @return Reference to member local_port
 */
uint32_t& Iperf::ConnectionStatus::local_port()
{
    return m_local_port;
}

/*!
 * @brief This function copies the value in member remote_host
 * @param _remote_host New value to be copied in member remote_host
 */
void Iperf::ConnectionStatus::remote_host(
        const std::string& _remote_host)
{
    m_remote_host = _remote_host;
}

/*!
 * @brief This function moves the value in member remote_host
 * @param _remote_host New value to be moved in member remote_host
 */
void Iperf::ConnectionStatus::remote_host(
        std::string&& _remote_host)
{
    m_remote_host = std::move(_remote_host);
}

/*!
 * @brief This function returns a constant reference to member remote_host
 * @return Constant reference to member remote_host
 */
const std::string& Iperf::ConnectionStatus::remote_host() const
{
    return m_remote_host;
}

/*!
 * @brief This function returns a reference to member remote_host
 * @return Reference to member remote_host
 */
std::string& Iperf::ConnectionStatus::remote_host()
{
    return m_remote_host;
}
/*!
 * @brief This function sets a value in member remote_port
 * @param _remote_port New value for member remote_port
 */
void Iperf::ConnectionStatus::remote_port(
        uint32_t _remote_port)
{
    m_remote_port = _remote_port;
}

/*!
 * @brief This function returns the value of member remote_port
 * @return Value of member remote_port
 */
uint32_t Iperf::ConnectionStatus::remote_port() const
{
    return m_remote_port;
}

/*!
 * @brief This function returns a reference to member remote_port
 * @return Reference to member remote_port
 */
uint32_t& Iperf::ConnectionStatus::remote_port()
{
    return m_remote_port;
}



size_t Iperf::ConnectionStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ConnectionStatus_max_key_cdr_typesize;
}

bool Iperf::ConnectionStatus::isKeyDefined()
{
    return false;
}

void Iperf::ConnectionStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ConnectionIntention::ConnectionIntention()
{
    // string m_host
    m_host ="";
    // unsigned long m_port
    m_port = 0;

}

Iperf::ConnectionIntention::~ConnectionIntention()
{


}

Iperf::ConnectionIntention::ConnectionIntention(
        const ConnectionIntention& x)
{
    m_host = x.m_host;
    m_port = x.m_port;
}

Iperf::ConnectionIntention::ConnectionIntention(
        ConnectionIntention&& x) noexcept 
{
    m_host = std::move(x.m_host);
    m_port = x.m_port;
}

Iperf::ConnectionIntention& Iperf::ConnectionIntention::operator =(
        const ConnectionIntention& x)
{

    m_host = x.m_host;
    m_port = x.m_port;

    return *this;
}

Iperf::ConnectionIntention& Iperf::ConnectionIntention::operator =(
        ConnectionIntention&& x) noexcept
{

    m_host = std::move(x.m_host);
    m_port = x.m_port;

    return *this;
}

bool Iperf::ConnectionIntention::operator ==(
        const ConnectionIntention& x) const
{

    return (m_host == x.m_host && m_port == x.m_port);
}

bool Iperf::ConnectionIntention::operator !=(
        const ConnectionIntention& x) const
{
    return !(*this == x);
}

size_t Iperf::ConnectionIntention::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ConnectionIntention_max_cdr_typesize;
}

size_t Iperf::ConnectionIntention::getCdrSerializedSize(
        const Iperf::ConnectionIntention& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.host().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Iperf::ConnectionIntention::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_host.c_str();
    scdr << m_port;

}

void Iperf::ConnectionIntention::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_host;
    dcdr >> m_port;
}

/*!
 * @brief This function copies the value in member host
 * @param _host New value to be copied in member host
 */
void Iperf::ConnectionIntention::host(
        const std::string& _host)
{
    m_host = _host;
}

/*!
 * @brief This function moves the value in member host
 * @param _host New value to be moved in member host
 */
void Iperf::ConnectionIntention::host(
        std::string&& _host)
{
    m_host = std::move(_host);
}

/*!
 * @brief This function returns a constant reference to member host
 * @return Constant reference to member host
 */
const std::string& Iperf::ConnectionIntention::host() const
{
    return m_host;
}

/*!
 * @brief This function returns a reference to member host
 * @return Reference to member host
 */
std::string& Iperf::ConnectionIntention::host()
{
    return m_host;
}
/*!
 * @brief This function sets a value in member port
 * @param _port New value for member port
 */
void Iperf::ConnectionIntention::port(
        uint32_t _port)
{
    m_port = _port;
}

/*!
 * @brief This function returns the value of member port
 * @return Value of member port
 */
uint32_t Iperf::ConnectionIntention::port() const
{
    return m_port;
}

/*!
 * @brief This function returns a reference to member port
 * @return Reference to member port
 */
uint32_t& Iperf::ConnectionIntention::port()
{
    return m_port;
}



size_t Iperf::ConnectionIntention::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ConnectionIntention_max_key_cdr_typesize;
}

bool Iperf::ConnectionIntention::isKeyDefined()
{
    return false;
}

void Iperf::ConnectionIntention::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::Connection::Connection()
{
    // sequence<Iperf::ConnectionStatus> m_connections

    // Iperf::ConnectionIntention m_intention


}

Iperf::Connection::~Connection()
{


}

Iperf::Connection::Connection(
        const Connection& x)
{
    m_connections = x.m_connections;
    m_intention = x.m_intention;
}

Iperf::Connection::Connection(
        Connection&& x) noexcept 
{
    m_connections = std::move(x.m_connections);
    m_intention = std::move(x.m_intention);
}

Iperf::Connection& Iperf::Connection::operator =(
        const Connection& x)
{

    m_connections = x.m_connections;
    m_intention = x.m_intention;

    return *this;
}

Iperf::Connection& Iperf::Connection::operator =(
        Connection&& x) noexcept
{

    m_connections = std::move(x.m_connections);
    m_intention = std::move(x.m_intention);

    return *this;
}

bool Iperf::Connection::operator ==(
        const Connection& x) const
{

    return (m_connections == x.m_connections && m_intention == x.m_intention);
}

bool Iperf::Connection::operator !=(
        const Connection& x) const
{
    return !(*this == x);
}

size_t Iperf::Connection::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Connection_max_cdr_typesize;
}

size_t Iperf::Connection::getCdrSerializedSize(
        const Iperf::Connection& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.connections().size(); ++a)
    {
        current_alignment += Iperf::ConnectionStatus::getCdrSerializedSize(data.connections().at(a), current_alignment);}

    current_alignment += Iperf::ConnectionIntention::getCdrSerializedSize(data.intention(), current_alignment);

    return current_alignment - initial_alignment;
}

void Iperf::Connection::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_connections;
    scdr << m_intention;

}

void Iperf::Connection::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_connections;
    dcdr >> m_intention;
}

/*!
 * @brief This function copies the value in member connections
 * @param _connections New value to be copied in member connections
 */
void Iperf::Connection::connections(
        const std::vector<Iperf::ConnectionStatus>& _connections)
{
    m_connections = _connections;
}

/*!
 * @brief This function moves the value in member connections
 * @param _connections New value to be moved in member connections
 */
void Iperf::Connection::connections(
        std::vector<Iperf::ConnectionStatus>&& _connections)
{
    m_connections = std::move(_connections);
}

/*!
 * @brief This function returns a constant reference to member connections
 * @return Constant reference to member connections
 */
const std::vector<Iperf::ConnectionStatus>& Iperf::Connection::connections() const
{
    return m_connections;
}

/*!
 * @brief This function returns a reference to member connections
 * @return Reference to member connections
 */
std::vector<Iperf::ConnectionStatus>& Iperf::Connection::connections()
{
    return m_connections;
}
/*!
 * @brief This function copies the value in member intention
 * @param _intention New value to be copied in member intention
 */
void Iperf::Connection::intention(
        const Iperf::ConnectionIntention& _intention)
{
    m_intention = _intention;
}

/*!
 * @brief This function moves the value in member intention
 * @param _intention New value to be moved in member intention
 */
void Iperf::Connection::intention(
        Iperf::ConnectionIntention&& _intention)
{
    m_intention = std::move(_intention);
}

/*!
 * @brief This function returns a constant reference to member intention
 * @return Constant reference to member intention
 */
const Iperf::ConnectionIntention& Iperf::Connection::intention() const
{
    return m_intention;
}

/*!
 * @brief This function returns a reference to member intention
 * @return Reference to member intention
 */
Iperf::ConnectionIntention& Iperf::Connection::intention()
{
    return m_intention;
}


size_t Iperf::Connection::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Connection_max_key_cdr_typesize;
}

bool Iperf::Connection::isKeyDefined()
{
    return false;
}

void Iperf::Connection::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


Iperf::BootstrapInformation::BootstrapInformation()
{
    // string m_version
    m_version ="";
    // string m_system_information
    m_system_information ="";
    // long m_tcp_mss_default
    m_tcp_mss_default = 0;
    // double m_target_bitrate
    m_target_bitrate = 0.0;
    // long m_sock_bufsize
    m_sock_bufsize = 0;
    // long m_sndbuf_actual
    m_sndbuf_actual = 0;
    // long m_rcvbuf_actual
    m_rcvbuf_actual = 0;
    // Iperf::ProtocolType m_protocol
    m_protocol = Iperf::TCP;
    // long m_number_of_streams
    m_number_of_streams = 0;
    // long m_block_size
    m_block_size = 0;
    // long m_omitted_seconds
    m_omitted_seconds = 0;
    // long m_duration
    m_duration = 0;
    // long m_bytes
    m_bytes = 0;
    // long m_blocks
    m_blocks = 0;
    // boolean m_reverse_mode
    m_reverse_mode = false;
    // long m_tos
    m_tos = 0;

}

Iperf::BootstrapInformation::~BootstrapInformation()
{
















}

Iperf::BootstrapInformation::BootstrapInformation(
        const BootstrapInformation& x)
{
    m_version = x.m_version;
    m_system_information = x.m_system_information;
    m_tcp_mss_default = x.m_tcp_mss_default;
    m_target_bitrate = x.m_target_bitrate;
    m_sock_bufsize = x.m_sock_bufsize;
    m_sndbuf_actual = x.m_sndbuf_actual;
    m_rcvbuf_actual = x.m_rcvbuf_actual;
    m_protocol = x.m_protocol;
    m_number_of_streams = x.m_number_of_streams;
    m_block_size = x.m_block_size;
    m_omitted_seconds = x.m_omitted_seconds;
    m_duration = x.m_duration;
    m_bytes = x.m_bytes;
    m_blocks = x.m_blocks;
    m_reverse_mode = x.m_reverse_mode;
    m_tos = x.m_tos;
}

Iperf::BootstrapInformation::BootstrapInformation(
        BootstrapInformation&& x) noexcept 
{
    m_version = std::move(x.m_version);
    m_system_information = std::move(x.m_system_information);
    m_tcp_mss_default = x.m_tcp_mss_default;
    m_target_bitrate = x.m_target_bitrate;
    m_sock_bufsize = x.m_sock_bufsize;
    m_sndbuf_actual = x.m_sndbuf_actual;
    m_rcvbuf_actual = x.m_rcvbuf_actual;
    m_protocol = x.m_protocol;
    m_number_of_streams = x.m_number_of_streams;
    m_block_size = x.m_block_size;
    m_omitted_seconds = x.m_omitted_seconds;
    m_duration = x.m_duration;
    m_bytes = x.m_bytes;
    m_blocks = x.m_blocks;
    m_reverse_mode = x.m_reverse_mode;
    m_tos = x.m_tos;
}

Iperf::BootstrapInformation& Iperf::BootstrapInformation::operator =(
        const BootstrapInformation& x)
{

    m_version = x.m_version;
    m_system_information = x.m_system_information;
    m_tcp_mss_default = x.m_tcp_mss_default;
    m_target_bitrate = x.m_target_bitrate;
    m_sock_bufsize = x.m_sock_bufsize;
    m_sndbuf_actual = x.m_sndbuf_actual;
    m_rcvbuf_actual = x.m_rcvbuf_actual;
    m_protocol = x.m_protocol;
    m_number_of_streams = x.m_number_of_streams;
    m_block_size = x.m_block_size;
    m_omitted_seconds = x.m_omitted_seconds;
    m_duration = x.m_duration;
    m_bytes = x.m_bytes;
    m_blocks = x.m_blocks;
    m_reverse_mode = x.m_reverse_mode;
    m_tos = x.m_tos;

    return *this;
}

Iperf::BootstrapInformation& Iperf::BootstrapInformation::operator =(
        BootstrapInformation&& x) noexcept
{

    m_version = std::move(x.m_version);
    m_system_information = std::move(x.m_system_information);
    m_tcp_mss_default = x.m_tcp_mss_default;
    m_target_bitrate = x.m_target_bitrate;
    m_sock_bufsize = x.m_sock_bufsize;
    m_sndbuf_actual = x.m_sndbuf_actual;
    m_rcvbuf_actual = x.m_rcvbuf_actual;
    m_protocol = x.m_protocol;
    m_number_of_streams = x.m_number_of_streams;
    m_block_size = x.m_block_size;
    m_omitted_seconds = x.m_omitted_seconds;
    m_duration = x.m_duration;
    m_bytes = x.m_bytes;
    m_blocks = x.m_blocks;
    m_reverse_mode = x.m_reverse_mode;
    m_tos = x.m_tos;

    return *this;
}

bool Iperf::BootstrapInformation::operator ==(
        const BootstrapInformation& x) const
{

    return (m_version == x.m_version && m_system_information == x.m_system_information && m_tcp_mss_default == x.m_tcp_mss_default && m_target_bitrate == x.m_target_bitrate && m_sock_bufsize == x.m_sock_bufsize && m_sndbuf_actual == x.m_sndbuf_actual && m_rcvbuf_actual == x.m_rcvbuf_actual && m_protocol == x.m_protocol && m_number_of_streams == x.m_number_of_streams && m_block_size == x.m_block_size && m_omitted_seconds == x.m_omitted_seconds && m_duration == x.m_duration && m_bytes == x.m_bytes && m_blocks == x.m_blocks && m_reverse_mode == x.m_reverse_mode && m_tos == x.m_tos);
}

bool Iperf::BootstrapInformation::operator !=(
        const BootstrapInformation& x) const
{
    return !(*this == x);
}

size_t Iperf::BootstrapInformation::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_BootstrapInformation_max_cdr_typesize;
}

size_t Iperf::BootstrapInformation::getCdrSerializedSize(
        const Iperf::BootstrapInformation& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.version().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.system_information().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Iperf::BootstrapInformation::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_version.c_str();
    scdr << m_system_information.c_str();
    scdr << m_tcp_mss_default;
    scdr << m_target_bitrate;
    scdr << m_sock_bufsize;
    scdr << m_sndbuf_actual;
    scdr << m_rcvbuf_actual;
    scdr << (uint32_t)m_protocol;
    scdr << m_number_of_streams;
    scdr << m_block_size;
    scdr << m_omitted_seconds;
    scdr << m_duration;
    scdr << m_bytes;
    scdr << m_blocks;
    scdr << m_reverse_mode;
    scdr << m_tos;

}

void Iperf::BootstrapInformation::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_version;
    dcdr >> m_system_information;
    dcdr >> m_tcp_mss_default;
    dcdr >> m_target_bitrate;
    dcdr >> m_sock_bufsize;
    dcdr >> m_sndbuf_actual;
    dcdr >> m_rcvbuf_actual;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_protocol = (Iperf::ProtocolType)enum_value;
    }

    dcdr >> m_number_of_streams;
    dcdr >> m_block_size;
    dcdr >> m_omitted_seconds;
    dcdr >> m_duration;
    dcdr >> m_bytes;
    dcdr >> m_blocks;
    dcdr >> m_reverse_mode;
    dcdr >> m_tos;
}

/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void Iperf::BootstrapInformation::version(
        const std::string& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void Iperf::BootstrapInformation::version(
        std::string&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const std::string& Iperf::BootstrapInformation::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
std::string& Iperf::BootstrapInformation::version()
{
    return m_version;
}
/*!
 * @brief This function copies the value in member system_information
 * @param _system_information New value to be copied in member system_information
 */
void Iperf::BootstrapInformation::system_information(
        const std::string& _system_information)
{
    m_system_information = _system_information;
}

/*!
 * @brief This function moves the value in member system_information
 * @param _system_information New value to be moved in member system_information
 */
void Iperf::BootstrapInformation::system_information(
        std::string&& _system_information)
{
    m_system_information = std::move(_system_information);
}

/*!
 * @brief This function returns a constant reference to member system_information
 * @return Constant reference to member system_information
 */
const std::string& Iperf::BootstrapInformation::system_information() const
{
    return m_system_information;
}

/*!
 * @brief This function returns a reference to member system_information
 * @return Reference to member system_information
 */
std::string& Iperf::BootstrapInformation::system_information()
{
    return m_system_information;
}
/*!
 * @brief This function sets a value in member tcp_mss_default
 * @param _tcp_mss_default New value for member tcp_mss_default
 */
void Iperf::BootstrapInformation::tcp_mss_default(
        int32_t _tcp_mss_default)
{
    m_tcp_mss_default = _tcp_mss_default;
}

/*!
 * @brief This function returns the value of member tcp_mss_default
 * @return Value of member tcp_mss_default
 */
int32_t Iperf::BootstrapInformation::tcp_mss_default() const
{
    return m_tcp_mss_default;
}

/*!
 * @brief This function returns a reference to member tcp_mss_default
 * @return Reference to member tcp_mss_default
 */
int32_t& Iperf::BootstrapInformation::tcp_mss_default()
{
    return m_tcp_mss_default;
}

/*!
 * @brief This function sets a value in member target_bitrate
 * @param _target_bitrate New value for member target_bitrate
 */
void Iperf::BootstrapInformation::target_bitrate(
        double _target_bitrate)
{
    m_target_bitrate = _target_bitrate;
}

/*!
 * @brief This function returns the value of member target_bitrate
 * @return Value of member target_bitrate
 */
double Iperf::BootstrapInformation::target_bitrate() const
{
    return m_target_bitrate;
}

/*!
 * @brief This function returns a reference to member target_bitrate
 * @return Reference to member target_bitrate
 */
double& Iperf::BootstrapInformation::target_bitrate()
{
    return m_target_bitrate;
}

/*!
 * @brief This function sets a value in member sock_bufsize
 * @param _sock_bufsize New value for member sock_bufsize
 */
void Iperf::BootstrapInformation::sock_bufsize(
        int32_t _sock_bufsize)
{
    m_sock_bufsize = _sock_bufsize;
}

/*!
 * @brief This function returns the value of member sock_bufsize
 * @return Value of member sock_bufsize
 */
int32_t Iperf::BootstrapInformation::sock_bufsize() const
{
    return m_sock_bufsize;
}

/*!
 * @brief This function returns a reference to member sock_bufsize
 * @return Reference to member sock_bufsize
 */
int32_t& Iperf::BootstrapInformation::sock_bufsize()
{
    return m_sock_bufsize;
}

/*!
 * @brief This function sets a value in member sndbuf_actual
 * @param _sndbuf_actual New value for member sndbuf_actual
 */
void Iperf::BootstrapInformation::sndbuf_actual(
        int32_t _sndbuf_actual)
{
    m_sndbuf_actual = _sndbuf_actual;
}

/*!
 * @brief This function returns the value of member sndbuf_actual
 * @return Value of member sndbuf_actual
 */
int32_t Iperf::BootstrapInformation::sndbuf_actual() const
{
    return m_sndbuf_actual;
}

/*!
 * @brief This function returns a reference to member sndbuf_actual
 * @return Reference to member sndbuf_actual
 */
int32_t& Iperf::BootstrapInformation::sndbuf_actual()
{
    return m_sndbuf_actual;
}

/*!
 * @brief This function sets a value in member rcvbuf_actual
 * @param _rcvbuf_actual New value for member rcvbuf_actual
 */
void Iperf::BootstrapInformation::rcvbuf_actual(
        int32_t _rcvbuf_actual)
{
    m_rcvbuf_actual = _rcvbuf_actual;
}

/*!
 * @brief This function returns the value of member rcvbuf_actual
 * @return Value of member rcvbuf_actual
 */
int32_t Iperf::BootstrapInformation::rcvbuf_actual() const
{
    return m_rcvbuf_actual;
}

/*!
 * @brief This function returns a reference to member rcvbuf_actual
 * @return Reference to member rcvbuf_actual
 */
int32_t& Iperf::BootstrapInformation::rcvbuf_actual()
{
    return m_rcvbuf_actual;
}

/*!
 * @brief This function sets a value in member protocol
 * @param _protocol New value for member protocol
 */
void Iperf::BootstrapInformation::protocol(
        Iperf::ProtocolType _protocol)
{
    m_protocol = _protocol;
}

/*!
 * @brief This function returns the value of member protocol
 * @return Value of member protocol
 */
Iperf::ProtocolType Iperf::BootstrapInformation::protocol() const
{
    return m_protocol;
}

/*!
 * @brief This function returns a reference to member protocol
 * @return Reference to member protocol
 */
Iperf::ProtocolType& Iperf::BootstrapInformation::protocol()
{
    return m_protocol;
}

/*!
 * @brief This function sets a value in member number_of_streams
 * @param _number_of_streams New value for member number_of_streams
 */
void Iperf::BootstrapInformation::number_of_streams(
        int32_t _number_of_streams)
{
    m_number_of_streams = _number_of_streams;
}

/*!
 * @brief This function returns the value of member number_of_streams
 * @return Value of member number_of_streams
 */
int32_t Iperf::BootstrapInformation::number_of_streams() const
{
    return m_number_of_streams;
}

/*!
 * @brief This function returns a reference to member number_of_streams
 * @return Reference to member number_of_streams
 */
int32_t& Iperf::BootstrapInformation::number_of_streams()
{
    return m_number_of_streams;
}

/*!
 * @brief This function sets a value in member block_size
 * @param _block_size New value for member block_size
 */
void Iperf::BootstrapInformation::block_size(
        int32_t _block_size)
{
    m_block_size = _block_size;
}

/*!
 * @brief This function returns the value of member block_size
 * @return Value of member block_size
 */
int32_t Iperf::BootstrapInformation::block_size() const
{
    return m_block_size;
}

/*!
 * @brief This function returns a reference to member block_size
 * @return Reference to member block_size
 */
int32_t& Iperf::BootstrapInformation::block_size()
{
    return m_block_size;
}

/*!
 * @brief This function sets a value in member omitted_seconds
 * @param _omitted_seconds New value for member omitted_seconds
 */
void Iperf::BootstrapInformation::omitted_seconds(
        int32_t _omitted_seconds)
{
    m_omitted_seconds = _omitted_seconds;
}

/*!
 * @brief This function returns the value of member omitted_seconds
 * @return Value of member omitted_seconds
 */
int32_t Iperf::BootstrapInformation::omitted_seconds() const
{
    return m_omitted_seconds;
}

/*!
 * @brief This function returns a reference to member omitted_seconds
 * @return Reference to member omitted_seconds
 */
int32_t& Iperf::BootstrapInformation::omitted_seconds()
{
    return m_omitted_seconds;
}

/*!
 * @brief This function sets a value in member duration
 * @param _duration New value for member duration
 */
void Iperf::BootstrapInformation::duration(
        int32_t _duration)
{
    m_duration = _duration;
}

/*!
 * @brief This function returns the value of member duration
 * @return Value of member duration
 */
int32_t Iperf::BootstrapInformation::duration() const
{
    return m_duration;
}

/*!
 * @brief This function returns a reference to member duration
 * @return Reference to member duration
 */
int32_t& Iperf::BootstrapInformation::duration()
{
    return m_duration;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::BootstrapInformation::bytes(
        int32_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
int32_t Iperf::BootstrapInformation::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
int32_t& Iperf::BootstrapInformation::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member blocks
 * @param _blocks New value for member blocks
 */
void Iperf::BootstrapInformation::blocks(
        int32_t _blocks)
{
    m_blocks = _blocks;
}

/*!
 * @brief This function returns the value of member blocks
 * @return Value of member blocks
 */
int32_t Iperf::BootstrapInformation::blocks() const
{
    return m_blocks;
}

/*!
 * @brief This function returns a reference to member blocks
 * @return Reference to member blocks
 */
int32_t& Iperf::BootstrapInformation::blocks()
{
    return m_blocks;
}

/*!
 * @brief This function sets a value in member reverse_mode
 * @param _reverse_mode New value for member reverse_mode
 */
void Iperf::BootstrapInformation::reverse_mode(
        bool _reverse_mode)
{
    m_reverse_mode = _reverse_mode;
}

/*!
 * @brief This function returns the value of member reverse_mode
 * @return Value of member reverse_mode
 */
bool Iperf::BootstrapInformation::reverse_mode() const
{
    return m_reverse_mode;
}

/*!
 * @brief This function returns a reference to member reverse_mode
 * @return Reference to member reverse_mode
 */
bool& Iperf::BootstrapInformation::reverse_mode()
{
    return m_reverse_mode;
}

/*!
 * @brief This function sets a value in member tos
 * @param _tos New value for member tos
 */
void Iperf::BootstrapInformation::tos(
        int32_t _tos)
{
    m_tos = _tos;
}

/*!
 * @brief This function returns the value of member tos
 * @return Value of member tos
 */
int32_t Iperf::BootstrapInformation::tos() const
{
    return m_tos;
}

/*!
 * @brief This function returns a reference to member tos
 * @return Reference to member tos
 */
int32_t& Iperf::BootstrapInformation::tos()
{
    return m_tos;
}



size_t Iperf::BootstrapInformation::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_BootstrapInformation_max_key_cdr_typesize;
}

bool Iperf::BootstrapInformation::isKeyDefined()
{
    return false;
}

void Iperf::BootstrapInformation::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::Header::Header()
{
    // string m_cookie
    m_cookie ="";
    // Iperf::Connection m_connection_item

    // Iperf::BootstrapInformation m_information

    // long long m_starting_time
    m_starting_time = 0;

}

Iperf::Header::~Header()
{




}

Iperf::Header::Header(
        const Header& x)
{
    m_cookie = x.m_cookie;
    m_connection_item = x.m_connection_item;
    m_information = x.m_information;
    m_starting_time = x.m_starting_time;
}

Iperf::Header::Header(
        Header&& x) noexcept 
{
    m_cookie = std::move(x.m_cookie);
    m_connection_item = std::move(x.m_connection_item);
    m_information = std::move(x.m_information);
    m_starting_time = x.m_starting_time;
}

Iperf::Header& Iperf::Header::operator =(
        const Header& x)
{

    m_cookie = x.m_cookie;
    m_connection_item = x.m_connection_item;
    m_information = x.m_information;
    m_starting_time = x.m_starting_time;

    return *this;
}

Iperf::Header& Iperf::Header::operator =(
        Header&& x) noexcept
{

    m_cookie = std::move(x.m_cookie);
    m_connection_item = std::move(x.m_connection_item);
    m_information = std::move(x.m_information);
    m_starting_time = x.m_starting_time;

    return *this;
}

bool Iperf::Header::operator ==(
        const Header& x) const
{

    return (m_cookie == x.m_cookie && m_connection_item == x.m_connection_item && m_information == x.m_information && m_starting_time == x.m_starting_time);
}

bool Iperf::Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

size_t Iperf::Header::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Header_max_cdr_typesize;
}

size_t Iperf::Header::getCdrSerializedSize(
        const Iperf::Header& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.cookie().size() + 1;

    current_alignment += Iperf::Connection::getCdrSerializedSize(data.connection_item(), current_alignment);
    current_alignment += Iperf::BootstrapInformation::getCdrSerializedSize(data.information(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void Iperf::Header::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_cookie.c_str();
    scdr << m_connection_item;
    scdr << m_information;
    scdr << m_starting_time;

}

void Iperf::Header::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_cookie;
    dcdr >> m_connection_item;
    dcdr >> m_information;
    dcdr >> m_starting_time;
}

/*!
 * @brief This function copies the value in member cookie
 * @param _cookie New value to be copied in member cookie
 */
void Iperf::Header::cookie(
        const std::string& _cookie)
{
    m_cookie = _cookie;
}

/*!
 * @brief This function moves the value in member cookie
 * @param _cookie New value to be moved in member cookie
 */
void Iperf::Header::cookie(
        std::string&& _cookie)
{
    m_cookie = std::move(_cookie);
}

/*!
 * @brief This function returns a constant reference to member cookie
 * @return Constant reference to member cookie
 */
const std::string& Iperf::Header::cookie() const
{
    return m_cookie;
}

/*!
 * @brief This function returns a reference to member cookie
 * @return Reference to member cookie
 */
std::string& Iperf::Header::cookie()
{
    return m_cookie;
}
/*!
 * @brief This function copies the value in member connection_item
 * @param _connection_item New value to be copied in member connection_item
 */
void Iperf::Header::connection_item(
        const Iperf::Connection& _connection_item)
{
    m_connection_item = _connection_item;
}

/*!
 * @brief This function moves the value in member connection_item
 * @param _connection_item New value to be moved in member connection_item
 */
void Iperf::Header::connection_item(
        Iperf::Connection&& _connection_item)
{
    m_connection_item = std::move(_connection_item);
}

/*!
 * @brief This function returns a constant reference to member connection_item
 * @return Constant reference to member connection_item
 */
const Iperf::Connection& Iperf::Header::connection_item() const
{
    return m_connection_item;
}

/*!
 * @brief This function returns a reference to member connection_item
 * @return Reference to member connection_item
 */
Iperf::Connection& Iperf::Header::connection_item()
{
    return m_connection_item;
}
/*!
 * @brief This function copies the value in member information
 * @param _information New value to be copied in member information
 */
void Iperf::Header::information(
        const Iperf::BootstrapInformation& _information)
{
    m_information = _information;
}

/*!
 * @brief This function moves the value in member information
 * @param _information New value to be moved in member information
 */
void Iperf::Header::information(
        Iperf::BootstrapInformation&& _information)
{
    m_information = std::move(_information);
}

/*!
 * @brief This function returns a constant reference to member information
 * @return Constant reference to member information
 */
const Iperf::BootstrapInformation& Iperf::Header::information() const
{
    return m_information;
}

/*!
 * @brief This function returns a reference to member information
 * @return Reference to member information
 */
Iperf::BootstrapInformation& Iperf::Header::information()
{
    return m_information;
}
/*!
 * @brief This function sets a value in member starting_time
 * @param _starting_time New value for member starting_time
 */
void Iperf::Header::starting_time(
        int64_t _starting_time)
{
    m_starting_time = _starting_time;
}

/*!
 * @brief This function returns the value of member starting_time
 * @return Value of member starting_time
 */
int64_t Iperf::Header::starting_time() const
{
    return m_starting_time;
}

/*!
 * @brief This function returns a reference to member starting_time
 * @return Reference to member starting_time
 */
int64_t& Iperf::Header::starting_time()
{
    return m_starting_time;
}



size_t Iperf::Header::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Header_max_key_cdr_typesize;
}

bool Iperf::Header::isKeyDefined()
{
    return false;
}

void Iperf::Header::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::Stream::Stream()
{
    // long m_socket_number
    m_socket_number = 0;
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;
    // boolean m_omitted
    m_omitted = false;
    // boolean m_sender
    m_sender = false;

}

Iperf::Stream::~Stream()
{








}

Iperf::Stream::Stream(
        const Stream& x)
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_omitted = x.m_omitted;
    m_sender = x.m_sender;
}

Iperf::Stream::Stream(
        Stream&& x) noexcept 
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_omitted = x.m_omitted;
    m_sender = x.m_sender;
}

Iperf::Stream& Iperf::Stream::operator =(
        const Stream& x)
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_omitted = x.m_omitted;
    m_sender = x.m_sender;

    return *this;
}

Iperf::Stream& Iperf::Stream::operator =(
        Stream&& x) noexcept
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_omitted = x.m_omitted;
    m_sender = x.m_sender;

    return *this;
}

bool Iperf::Stream::operator ==(
        const Stream& x) const
{

    return (m_socket_number == x.m_socket_number && m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second && m_omitted == x.m_omitted && m_sender == x.m_sender);
}

bool Iperf::Stream::operator !=(
        const Stream& x) const
{
    return !(*this == x);
}

size_t Iperf::Stream::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Stream_max_cdr_typesize;
}

size_t Iperf::Stream::getCdrSerializedSize(
        const Iperf::Stream& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void Iperf::Stream::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_socket_number;
    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;
    scdr << m_omitted;
    scdr << m_sender;

}

void Iperf::Stream::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_socket_number;
    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
    dcdr >> m_omitted;
    dcdr >> m_sender;
}

/*!
 * @brief This function sets a value in member socket_number
 * @param _socket_number New value for member socket_number
 */
void Iperf::Stream::socket_number(
        int32_t _socket_number)
{
    m_socket_number = _socket_number;
}

/*!
 * @brief This function returns the value of member socket_number
 * @return Value of member socket_number
 */
int32_t Iperf::Stream::socket_number() const
{
    return m_socket_number;
}

/*!
 * @brief This function returns a reference to member socket_number
 * @return Reference to member socket_number
 */
int32_t& Iperf::Stream::socket_number()
{
    return m_socket_number;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::Stream::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::Stream::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::Stream::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::Stream::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::Stream::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::Stream::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::Stream::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::Stream::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::Stream::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::Stream::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::Stream::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::Stream::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::Stream::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::Stream::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::Stream::bits_per_second()
{
    return m_bits_per_second;
}

/*!
 * @brief This function sets a value in member omitted
 * @param _omitted New value for member omitted
 */
void Iperf::Stream::omitted(
        bool _omitted)
{
    m_omitted = _omitted;
}

/*!
 * @brief This function returns the value of member omitted
 * @return Value of member omitted
 */
bool Iperf::Stream::omitted() const
{
    return m_omitted;
}

/*!
 * @brief This function returns a reference to member omitted
 * @return Reference to member omitted
 */
bool& Iperf::Stream::omitted()
{
    return m_omitted;
}

/*!
 * @brief This function sets a value in member sender
 * @param _sender New value for member sender
 */
void Iperf::Stream::sender(
        bool _sender)
{
    m_sender = _sender;
}

/*!
 * @brief This function returns the value of member sender
 * @return Value of member sender
 */
bool Iperf::Stream::sender() const
{
    return m_sender;
}

/*!
 * @brief This function returns a reference to member sender
 * @return Reference to member sender
 */
bool& Iperf::Stream::sender()
{
    return m_sender;
}



size_t Iperf::Stream::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Stream_max_key_cdr_typesize;
}

bool Iperf::Stream::isKeyDefined()
{
    return false;
}

void Iperf::Stream::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::Interval::Interval()
{
    // sequence<Iperf::Stream> m_streams


}

Iperf::Interval::~Interval()
{
}

Iperf::Interval::Interval(
        const Interval& x)
{
    m_streams = x.m_streams;
}

Iperf::Interval::Interval(
        Interval&& x) noexcept 
{
    m_streams = std::move(x.m_streams);
}

Iperf::Interval& Iperf::Interval::operator =(
        const Interval& x)
{

    m_streams = x.m_streams;

    return *this;
}

Iperf::Interval& Iperf::Interval::operator =(
        Interval&& x) noexcept
{

    m_streams = std::move(x.m_streams);

    return *this;
}

bool Iperf::Interval::operator ==(
        const Interval& x) const
{

    return (m_streams == x.m_streams);
}

bool Iperf::Interval::operator !=(
        const Interval& x) const
{
    return !(*this == x);
}

size_t Iperf::Interval::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Interval_max_cdr_typesize;
}

size_t Iperf::Interval::getCdrSerializedSize(
        const Iperf::Interval& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.streams().size(); ++a)
    {
        current_alignment += Iperf::Stream::getCdrSerializedSize(data.streams().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void Iperf::Interval::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_streams;
}

void Iperf::Interval::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_streams;}

/*!
 * @brief This function copies the value in member streams
 * @param _streams New value to be copied in member streams
 */
void Iperf::Interval::streams(
        const std::vector<Iperf::Stream>& _streams)
{
    m_streams = _streams;
}

/*!
 * @brief This function moves the value in member streams
 * @param _streams New value to be moved in member streams
 */
void Iperf::Interval::streams(
        std::vector<Iperf::Stream>&& _streams)
{
    m_streams = std::move(_streams);
}

/*!
 * @brief This function returns a constant reference to member streams
 * @return Constant reference to member streams
 */
const std::vector<Iperf::Stream>& Iperf::Interval::streams() const
{
    return m_streams;
}

/*!
 * @brief This function returns a reference to member streams
 * @return Reference to member streams
 */
std::vector<Iperf::Stream>& Iperf::Interval::streams()
{
    return m_streams;
}


size_t Iperf::Interval::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Interval_max_key_cdr_typesize;
}

bool Iperf::Interval::isKeyDefined()
{
    return false;
}

void Iperf::Interval::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::CumulativeInterval::CumulativeInterval()
{
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;

}

Iperf::CumulativeInterval::~CumulativeInterval()
{





}

Iperf::CumulativeInterval::CumulativeInterval(
        const CumulativeInterval& x)
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
}

Iperf::CumulativeInterval::CumulativeInterval(
        CumulativeInterval&& x) noexcept 
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
}

Iperf::CumulativeInterval& Iperf::CumulativeInterval::operator =(
        const CumulativeInterval& x)
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;

    return *this;
}

Iperf::CumulativeInterval& Iperf::CumulativeInterval::operator =(
        CumulativeInterval&& x) noexcept
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;

    return *this;
}

bool Iperf::CumulativeInterval::operator ==(
        const CumulativeInterval& x) const
{

    return (m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second);
}

bool Iperf::CumulativeInterval::operator !=(
        const CumulativeInterval& x) const
{
    return !(*this == x);
}

size_t Iperf::CumulativeInterval::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_CumulativeInterval_max_cdr_typesize;
}

size_t Iperf::CumulativeInterval::getCdrSerializedSize(
        const Iperf::CumulativeInterval& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void Iperf::CumulativeInterval::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;

}

void Iperf::CumulativeInterval::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::CumulativeInterval::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::CumulativeInterval::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::CumulativeInterval::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::CumulativeInterval::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::CumulativeInterval::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::CumulativeInterval::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::CumulativeInterval::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::CumulativeInterval::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::CumulativeInterval::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::CumulativeInterval::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::CumulativeInterval::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::CumulativeInterval::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::CumulativeInterval::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::CumulativeInterval::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::CumulativeInterval::bits_per_second()
{
    return m_bits_per_second;
}



size_t Iperf::CumulativeInterval::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_CumulativeInterval_max_key_cdr_typesize;
}

bool Iperf::CumulativeInterval::isKeyDefined()
{
    return false;
}

void Iperf::CumulativeInterval::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedSendingStream::ReportedSendingStream()
{
    // long m_socket_number
    m_socket_number = 0;
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;
    // boolean m_sender
    m_sender = false;

}

Iperf::ReportedSendingStream::~ReportedSendingStream()
{







}

Iperf::ReportedSendingStream::ReportedSendingStream(
        const ReportedSendingStream& x)
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedSendingStream::ReportedSendingStream(
        ReportedSendingStream&& x) noexcept 
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedSendingStream& Iperf::ReportedSendingStream::operator =(
        const ReportedSendingStream& x)
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

Iperf::ReportedSendingStream& Iperf::ReportedSendingStream::operator =(
        ReportedSendingStream&& x) noexcept
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

bool Iperf::ReportedSendingStream::operator ==(
        const ReportedSendingStream& x) const
{

    return (m_socket_number == x.m_socket_number && m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second && m_sender == x.m_sender);
}

bool Iperf::ReportedSendingStream::operator !=(
        const ReportedSendingStream& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedSendingStream::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSendingStream_max_cdr_typesize;
}

size_t Iperf::ReportedSendingStream::getCdrSerializedSize(
        const Iperf::ReportedSendingStream& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void Iperf::ReportedSendingStream::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_socket_number;
    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;
    scdr << m_sender;

}

void Iperf::ReportedSendingStream::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_socket_number;
    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
    dcdr >> m_sender;
}

/*!
 * @brief This function sets a value in member socket_number
 * @param _socket_number New value for member socket_number
 */
void Iperf::ReportedSendingStream::socket_number(
        int32_t _socket_number)
{
    m_socket_number = _socket_number;
}

/*!
 * @brief This function returns the value of member socket_number
 * @return Value of member socket_number
 */
int32_t Iperf::ReportedSendingStream::socket_number() const
{
    return m_socket_number;
}

/*!
 * @brief This function returns a reference to member socket_number
 * @return Reference to member socket_number
 */
int32_t& Iperf::ReportedSendingStream::socket_number()
{
    return m_socket_number;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::ReportedSendingStream::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::ReportedSendingStream::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::ReportedSendingStream::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::ReportedSendingStream::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::ReportedSendingStream::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::ReportedSendingStream::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::ReportedSendingStream::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::ReportedSendingStream::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::ReportedSendingStream::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::ReportedSendingStream::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::ReportedSendingStream::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::ReportedSendingStream::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::ReportedSendingStream::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::ReportedSendingStream::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::ReportedSendingStream::bits_per_second()
{
    return m_bits_per_second;
}

/*!
 * @brief This function sets a value in member sender
 * @param _sender New value for member sender
 */
void Iperf::ReportedSendingStream::sender(
        bool _sender)
{
    m_sender = _sender;
}

/*!
 * @brief This function returns the value of member sender
 * @return Value of member sender
 */
bool Iperf::ReportedSendingStream::sender() const
{
    return m_sender;
}

/*!
 * @brief This function returns a reference to member sender
 * @return Reference to member sender
 */
bool& Iperf::ReportedSendingStream::sender()
{
    return m_sender;
}



size_t Iperf::ReportedSendingStream::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSendingStream_max_key_cdr_typesize;
}

bool Iperf::ReportedSendingStream::isKeyDefined()
{
    return false;
}

void Iperf::ReportedSendingStream::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedReceivingStream::ReportedReceivingStream()
{
    // long m_socket_number
    m_socket_number = 0;
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;
    // boolean m_sender
    m_sender = false;

}

Iperf::ReportedReceivingStream::~ReportedReceivingStream()
{







}

Iperf::ReportedReceivingStream::ReportedReceivingStream(
        const ReportedReceivingStream& x)
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedReceivingStream::ReportedReceivingStream(
        ReportedReceivingStream&& x) noexcept 
{
    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedReceivingStream& Iperf::ReportedReceivingStream::operator =(
        const ReportedReceivingStream& x)
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

Iperf::ReportedReceivingStream& Iperf::ReportedReceivingStream::operator =(
        ReportedReceivingStream&& x) noexcept
{

    m_socket_number = x.m_socket_number;
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

bool Iperf::ReportedReceivingStream::operator ==(
        const ReportedReceivingStream& x) const
{

    return (m_socket_number == x.m_socket_number && m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second && m_sender == x.m_sender);
}

bool Iperf::ReportedReceivingStream::operator !=(
        const ReportedReceivingStream& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedReceivingStream::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedReceivingStream_max_cdr_typesize;
}

size_t Iperf::ReportedReceivingStream::getCdrSerializedSize(
        const Iperf::ReportedReceivingStream& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void Iperf::ReportedReceivingStream::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_socket_number;
    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;
    scdr << m_sender;

}

void Iperf::ReportedReceivingStream::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_socket_number;
    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
    dcdr >> m_sender;
}

/*!
 * @brief This function sets a value in member socket_number
 * @param _socket_number New value for member socket_number
 */
void Iperf::ReportedReceivingStream::socket_number(
        int32_t _socket_number)
{
    m_socket_number = _socket_number;
}

/*!
 * @brief This function returns the value of member socket_number
 * @return Value of member socket_number
 */
int32_t Iperf::ReportedReceivingStream::socket_number() const
{
    return m_socket_number;
}

/*!
 * @brief This function returns a reference to member socket_number
 * @return Reference to member socket_number
 */
int32_t& Iperf::ReportedReceivingStream::socket_number()
{
    return m_socket_number;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::ReportedReceivingStream::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::ReportedReceivingStream::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::ReportedReceivingStream::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::ReportedReceivingStream::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::ReportedReceivingStream::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::ReportedReceivingStream::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::ReportedReceivingStream::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::ReportedReceivingStream::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::ReportedReceivingStream::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::ReportedReceivingStream::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::ReportedReceivingStream::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::ReportedReceivingStream::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::ReportedReceivingStream::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::ReportedReceivingStream::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::ReportedReceivingStream::bits_per_second()
{
    return m_bits_per_second;
}

/*!
 * @brief This function sets a value in member sender
 * @param _sender New value for member sender
 */
void Iperf::ReportedReceivingStream::sender(
        bool _sender)
{
    m_sender = _sender;
}

/*!
 * @brief This function returns the value of member sender
 * @return Value of member sender
 */
bool Iperf::ReportedReceivingStream::sender() const
{
    return m_sender;
}

/*!
 * @brief This function returns a reference to member sender
 * @return Reference to member sender
 */
bool& Iperf::ReportedReceivingStream::sender()
{
    return m_sender;
}



size_t Iperf::ReportedReceivingStream::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedReceivingStream_max_key_cdr_typesize;
}

bool Iperf::ReportedReceivingStream::isKeyDefined()
{
    return false;
}

void Iperf::ReportedReceivingStream::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedStreamsPair::ReportedStreamsPair()
{
    // Iperf::ReportedSendingStream m_sending_stream

    // Iperf::ReportedReceivingStream m_receiving_stream


}

Iperf::ReportedStreamsPair::~ReportedStreamsPair()
{


}

Iperf::ReportedStreamsPair::ReportedStreamsPair(
        const ReportedStreamsPair& x)
{
    m_sending_stream = x.m_sending_stream;
    m_receiving_stream = x.m_receiving_stream;
}

Iperf::ReportedStreamsPair::ReportedStreamsPair(
        ReportedStreamsPair&& x) noexcept 
{
    m_sending_stream = std::move(x.m_sending_stream);
    m_receiving_stream = std::move(x.m_receiving_stream);
}

Iperf::ReportedStreamsPair& Iperf::ReportedStreamsPair::operator =(
        const ReportedStreamsPair& x)
{

    m_sending_stream = x.m_sending_stream;
    m_receiving_stream = x.m_receiving_stream;

    return *this;
}

Iperf::ReportedStreamsPair& Iperf::ReportedStreamsPair::operator =(
        ReportedStreamsPair&& x) noexcept
{

    m_sending_stream = std::move(x.m_sending_stream);
    m_receiving_stream = std::move(x.m_receiving_stream);

    return *this;
}

bool Iperf::ReportedStreamsPair::operator ==(
        const ReportedStreamsPair& x) const
{

    return (m_sending_stream == x.m_sending_stream && m_receiving_stream == x.m_receiving_stream);
}

bool Iperf::ReportedStreamsPair::operator !=(
        const ReportedStreamsPair& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedStreamsPair::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedStreamsPair_max_cdr_typesize;
}

size_t Iperf::ReportedStreamsPair::getCdrSerializedSize(
        const Iperf::ReportedStreamsPair& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Iperf::ReportedSendingStream::getCdrSerializedSize(data.sending_stream(), current_alignment);
    current_alignment += Iperf::ReportedReceivingStream::getCdrSerializedSize(data.receiving_stream(), current_alignment);

    return current_alignment - initial_alignment;
}

void Iperf::ReportedStreamsPair::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sending_stream;
    scdr << m_receiving_stream;

}

void Iperf::ReportedStreamsPair::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sending_stream;
    dcdr >> m_receiving_stream;
}

/*!
 * @brief This function copies the value in member sending_stream
 * @param _sending_stream New value to be copied in member sending_stream
 */
void Iperf::ReportedStreamsPair::sending_stream(
        const Iperf::ReportedSendingStream& _sending_stream)
{
    m_sending_stream = _sending_stream;
}

/*!
 * @brief This function moves the value in member sending_stream
 * @param _sending_stream New value to be moved in member sending_stream
 */
void Iperf::ReportedStreamsPair::sending_stream(
        Iperf::ReportedSendingStream&& _sending_stream)
{
    m_sending_stream = std::move(_sending_stream);
}

/*!
 * @brief This function returns a constant reference to member sending_stream
 * @return Constant reference to member sending_stream
 */
const Iperf::ReportedSendingStream& Iperf::ReportedStreamsPair::sending_stream() const
{
    return m_sending_stream;
}

/*!
 * @brief This function returns a reference to member sending_stream
 * @return Reference to member sending_stream
 */
Iperf::ReportedSendingStream& Iperf::ReportedStreamsPair::sending_stream()
{
    return m_sending_stream;
}
/*!
 * @brief This function copies the value in member receiving_stream
 * @param _receiving_stream New value to be copied in member receiving_stream
 */
void Iperf::ReportedStreamsPair::receiving_stream(
        const Iperf::ReportedReceivingStream& _receiving_stream)
{
    m_receiving_stream = _receiving_stream;
}

/*!
 * @brief This function moves the value in member receiving_stream
 * @param _receiving_stream New value to be moved in member receiving_stream
 */
void Iperf::ReportedStreamsPair::receiving_stream(
        Iperf::ReportedReceivingStream&& _receiving_stream)
{
    m_receiving_stream = std::move(_receiving_stream);
}

/*!
 * @brief This function returns a constant reference to member receiving_stream
 * @return Constant reference to member receiving_stream
 */
const Iperf::ReportedReceivingStream& Iperf::ReportedStreamsPair::receiving_stream() const
{
    return m_receiving_stream;
}

/*!
 * @brief This function returns a reference to member receiving_stream
 * @return Reference to member receiving_stream
 */
Iperf::ReportedReceivingStream& Iperf::ReportedStreamsPair::receiving_stream()
{
    return m_receiving_stream;
}


size_t Iperf::ReportedStreamsPair::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedStreamsPair_max_key_cdr_typesize;
}

bool Iperf::ReportedStreamsPair::isKeyDefined()
{
    return false;
}

void Iperf::ReportedStreamsPair::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedSendingSummary::ReportedSendingSummary()
{
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;
    // boolean m_sender
    m_sender = false;

}

Iperf::ReportedSendingSummary::~ReportedSendingSummary()
{






}

Iperf::ReportedSendingSummary::ReportedSendingSummary(
        const ReportedSendingSummary& x)
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedSendingSummary::ReportedSendingSummary(
        ReportedSendingSummary&& x) noexcept 
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedSendingSummary& Iperf::ReportedSendingSummary::operator =(
        const ReportedSendingSummary& x)
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

Iperf::ReportedSendingSummary& Iperf::ReportedSendingSummary::operator =(
        ReportedSendingSummary&& x) noexcept
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

bool Iperf::ReportedSendingSummary::operator ==(
        const ReportedSendingSummary& x) const
{

    return (m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second && m_sender == x.m_sender);
}

bool Iperf::ReportedSendingSummary::operator !=(
        const ReportedSendingSummary& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedSendingSummary::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSendingSummary_max_cdr_typesize;
}

size_t Iperf::ReportedSendingSummary::getCdrSerializedSize(
        const Iperf::ReportedSendingSummary& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void Iperf::ReportedSendingSummary::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;
    scdr << m_sender;

}

void Iperf::ReportedSendingSummary::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
    dcdr >> m_sender;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::ReportedSendingSummary::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::ReportedSendingSummary::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::ReportedSendingSummary::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::ReportedSendingSummary::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::ReportedSendingSummary::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::ReportedSendingSummary::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::ReportedSendingSummary::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::ReportedSendingSummary::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::ReportedSendingSummary::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::ReportedSendingSummary::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::ReportedSendingSummary::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::ReportedSendingSummary::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::ReportedSendingSummary::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::ReportedSendingSummary::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::ReportedSendingSummary::bits_per_second()
{
    return m_bits_per_second;
}

/*!
 * @brief This function sets a value in member sender
 * @param _sender New value for member sender
 */
void Iperf::ReportedSendingSummary::sender(
        bool _sender)
{
    m_sender = _sender;
}

/*!
 * @brief This function returns the value of member sender
 * @return Value of member sender
 */
bool Iperf::ReportedSendingSummary::sender() const
{
    return m_sender;
}

/*!
 * @brief This function returns a reference to member sender
 * @return Reference to member sender
 */
bool& Iperf::ReportedSendingSummary::sender()
{
    return m_sender;
}



size_t Iperf::ReportedSendingSummary::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSendingSummary_max_key_cdr_typesize;
}

bool Iperf::ReportedSendingSummary::isKeyDefined()
{
    return false;
}

void Iperf::ReportedSendingSummary::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedReceivingSummary::ReportedReceivingSummary()
{
    // double m_start
    m_start = 0.0;
    // double m_end
    m_end = 0.0;
    // double m_range
    m_range = 0.0;
    // unsigned long long m_bytes
    m_bytes = 0;
    // double m_bits_per_second
    m_bits_per_second = 0.0;
    // boolean m_sender
    m_sender = false;

}

Iperf::ReportedReceivingSummary::~ReportedReceivingSummary()
{






}

Iperf::ReportedReceivingSummary::ReportedReceivingSummary(
        const ReportedReceivingSummary& x)
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedReceivingSummary::ReportedReceivingSummary(
        ReportedReceivingSummary&& x) noexcept 
{
    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;
}

Iperf::ReportedReceivingSummary& Iperf::ReportedReceivingSummary::operator =(
        const ReportedReceivingSummary& x)
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

Iperf::ReportedReceivingSummary& Iperf::ReportedReceivingSummary::operator =(
        ReportedReceivingSummary&& x) noexcept
{

    m_start = x.m_start;
    m_end = x.m_end;
    m_range = x.m_range;
    m_bytes = x.m_bytes;
    m_bits_per_second = x.m_bits_per_second;
    m_sender = x.m_sender;

    return *this;
}

bool Iperf::ReportedReceivingSummary::operator ==(
        const ReportedReceivingSummary& x) const
{

    return (m_start == x.m_start && m_end == x.m_end && m_range == x.m_range && m_bytes == x.m_bytes && m_bits_per_second == x.m_bits_per_second && m_sender == x.m_sender);
}

bool Iperf::ReportedReceivingSummary::operator !=(
        const ReportedReceivingSummary& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedReceivingSummary::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedReceivingSummary_max_cdr_typesize;
}

size_t Iperf::ReportedReceivingSummary::getCdrSerializedSize(
        const Iperf::ReportedReceivingSummary& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void Iperf::ReportedReceivingSummary::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_start;
    scdr << m_end;
    scdr << m_range;
    scdr << m_bytes;
    scdr << m_bits_per_second;
    scdr << m_sender;

}

void Iperf::ReportedReceivingSummary::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_start;
    dcdr >> m_end;
    dcdr >> m_range;
    dcdr >> m_bytes;
    dcdr >> m_bits_per_second;
    dcdr >> m_sender;
}

/*!
 * @brief This function sets a value in member start
 * @param _start New value for member start
 */
void Iperf::ReportedReceivingSummary::start(
        double _start)
{
    m_start = _start;
}

/*!
 * @brief This function returns the value of member start
 * @return Value of member start
 */
double Iperf::ReportedReceivingSummary::start() const
{
    return m_start;
}

/*!
 * @brief This function returns a reference to member start
 * @return Reference to member start
 */
double& Iperf::ReportedReceivingSummary::start()
{
    return m_start;
}

/*!
 * @brief This function sets a value in member end
 * @param _end New value for member end
 */
void Iperf::ReportedReceivingSummary::end(
        double _end)
{
    m_end = _end;
}

/*!
 * @brief This function returns the value of member end
 * @return Value of member end
 */
double Iperf::ReportedReceivingSummary::end() const
{
    return m_end;
}

/*!
 * @brief This function returns a reference to member end
 * @return Reference to member end
 */
double& Iperf::ReportedReceivingSummary::end()
{
    return m_end;
}

/*!
 * @brief This function sets a value in member range
 * @param _range New value for member range
 */
void Iperf::ReportedReceivingSummary::range(
        double _range)
{
    m_range = _range;
}

/*!
 * @brief This function returns the value of member range
 * @return Value of member range
 */
double Iperf::ReportedReceivingSummary::range() const
{
    return m_range;
}

/*!
 * @brief This function returns a reference to member range
 * @return Reference to member range
 */
double& Iperf::ReportedReceivingSummary::range()
{
    return m_range;
}

/*!
 * @brief This function sets a value in member bytes
 * @param _bytes New value for member bytes
 */
void Iperf::ReportedReceivingSummary::bytes(
        uint64_t _bytes)
{
    m_bytes = _bytes;
}

/*!
 * @brief This function returns the value of member bytes
 * @return Value of member bytes
 */
uint64_t Iperf::ReportedReceivingSummary::bytes() const
{
    return m_bytes;
}

/*!
 * @brief This function returns a reference to member bytes
 * @return Reference to member bytes
 */
uint64_t& Iperf::ReportedReceivingSummary::bytes()
{
    return m_bytes;
}

/*!
 * @brief This function sets a value in member bits_per_second
 * @param _bits_per_second New value for member bits_per_second
 */
void Iperf::ReportedReceivingSummary::bits_per_second(
        double _bits_per_second)
{
    m_bits_per_second = _bits_per_second;
}

/*!
 * @brief This function returns the value of member bits_per_second
 * @return Value of member bits_per_second
 */
double Iperf::ReportedReceivingSummary::bits_per_second() const
{
    return m_bits_per_second;
}

/*!
 * @brief This function returns a reference to member bits_per_second
 * @return Reference to member bits_per_second
 */
double& Iperf::ReportedReceivingSummary::bits_per_second()
{
    return m_bits_per_second;
}

/*!
 * @brief This function sets a value in member sender
 * @param _sender New value for member sender
 */
void Iperf::ReportedReceivingSummary::sender(
        bool _sender)
{
    m_sender = _sender;
}

/*!
 * @brief This function returns the value of member sender
 * @return Value of member sender
 */
bool Iperf::ReportedReceivingSummary::sender() const
{
    return m_sender;
}

/*!
 * @brief This function returns a reference to member sender
 * @return Reference to member sender
 */
bool& Iperf::ReportedReceivingSummary::sender()
{
    return m_sender;
}



size_t Iperf::ReportedReceivingSummary::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedReceivingSummary_max_key_cdr_typesize;
}

bool Iperf::ReportedReceivingSummary::isKeyDefined()
{
    return false;
}

void Iperf::ReportedReceivingSummary::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ReportedSummariesPair::ReportedSummariesPair()
{
    // Iperf::ReportedSendingSummary m_sending_summary

    // Iperf::ReportedReceivingSummary m_receiving_summary


}

Iperf::ReportedSummariesPair::~ReportedSummariesPair()
{


}

Iperf::ReportedSummariesPair::ReportedSummariesPair(
        const ReportedSummariesPair& x)
{
    m_sending_summary = x.m_sending_summary;
    m_receiving_summary = x.m_receiving_summary;
}

Iperf::ReportedSummariesPair::ReportedSummariesPair(
        ReportedSummariesPair&& x) noexcept 
{
    m_sending_summary = std::move(x.m_sending_summary);
    m_receiving_summary = std::move(x.m_receiving_summary);
}

Iperf::ReportedSummariesPair& Iperf::ReportedSummariesPair::operator =(
        const ReportedSummariesPair& x)
{

    m_sending_summary = x.m_sending_summary;
    m_receiving_summary = x.m_receiving_summary;

    return *this;
}

Iperf::ReportedSummariesPair& Iperf::ReportedSummariesPair::operator =(
        ReportedSummariesPair&& x) noexcept
{

    m_sending_summary = std::move(x.m_sending_summary);
    m_receiving_summary = std::move(x.m_receiving_summary);

    return *this;
}

bool Iperf::ReportedSummariesPair::operator ==(
        const ReportedSummariesPair& x) const
{

    return (m_sending_summary == x.m_sending_summary && m_receiving_summary == x.m_receiving_summary);
}

bool Iperf::ReportedSummariesPair::operator !=(
        const ReportedSummariesPair& x) const
{
    return !(*this == x);
}

size_t Iperf::ReportedSummariesPair::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSummariesPair_max_cdr_typesize;
}

size_t Iperf::ReportedSummariesPair::getCdrSerializedSize(
        const Iperf::ReportedSummariesPair& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Iperf::ReportedSendingSummary::getCdrSerializedSize(data.sending_summary(), current_alignment);
    current_alignment += Iperf::ReportedReceivingSummary::getCdrSerializedSize(data.receiving_summary(), current_alignment);

    return current_alignment - initial_alignment;
}

void Iperf::ReportedSummariesPair::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sending_summary;
    scdr << m_receiving_summary;

}

void Iperf::ReportedSummariesPair::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sending_summary;
    dcdr >> m_receiving_summary;
}

/*!
 * @brief This function copies the value in member sending_summary
 * @param _sending_summary New value to be copied in member sending_summary
 */
void Iperf::ReportedSummariesPair::sending_summary(
        const Iperf::ReportedSendingSummary& _sending_summary)
{
    m_sending_summary = _sending_summary;
}

/*!
 * @brief This function moves the value in member sending_summary
 * @param _sending_summary New value to be moved in member sending_summary
 */
void Iperf::ReportedSummariesPair::sending_summary(
        Iperf::ReportedSendingSummary&& _sending_summary)
{
    m_sending_summary = std::move(_sending_summary);
}

/*!
 * @brief This function returns a constant reference to member sending_summary
 * @return Constant reference to member sending_summary
 */
const Iperf::ReportedSendingSummary& Iperf::ReportedSummariesPair::sending_summary() const
{
    return m_sending_summary;
}

/*!
 * @brief This function returns a reference to member sending_summary
 * @return Reference to member sending_summary
 */
Iperf::ReportedSendingSummary& Iperf::ReportedSummariesPair::sending_summary()
{
    return m_sending_summary;
}
/*!
 * @brief This function copies the value in member receiving_summary
 * @param _receiving_summary New value to be copied in member receiving_summary
 */
void Iperf::ReportedSummariesPair::receiving_summary(
        const Iperf::ReportedReceivingSummary& _receiving_summary)
{
    m_receiving_summary = _receiving_summary;
}

/*!
 * @brief This function moves the value in member receiving_summary
 * @param _receiving_summary New value to be moved in member receiving_summary
 */
void Iperf::ReportedSummariesPair::receiving_summary(
        Iperf::ReportedReceivingSummary&& _receiving_summary)
{
    m_receiving_summary = std::move(_receiving_summary);
}

/*!
 * @brief This function returns a constant reference to member receiving_summary
 * @return Constant reference to member receiving_summary
 */
const Iperf::ReportedReceivingSummary& Iperf::ReportedSummariesPair::receiving_summary() const
{
    return m_receiving_summary;
}

/*!
 * @brief This function returns a reference to member receiving_summary
 * @return Reference to member receiving_summary
 */
Iperf::ReportedReceivingSummary& Iperf::ReportedSummariesPair::receiving_summary()
{
    return m_receiving_summary;
}


size_t Iperf::ReportedSummariesPair::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ReportedSummariesPair_max_key_cdr_typesize;
}

bool Iperf::ReportedSummariesPair::isKeyDefined()
{
    return false;
}

void Iperf::ReportedSummariesPair::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::ResourceStatistics::ResourceStatistics()
{
    // double m_host_total
    m_host_total = 0.0;
    // double m_host_user
    m_host_user = 0.0;
    // double m_host_system
    m_host_system = 0.0;
    // double m_remote_total
    m_remote_total = 0.0;
    // double m_remote_user
    m_remote_user = 0.0;
    // double m_remote_system
    m_remote_system = 0.0;

}

Iperf::ResourceStatistics::~ResourceStatistics()
{






}

Iperf::ResourceStatistics::ResourceStatistics(
        const ResourceStatistics& x)
{
    m_host_total = x.m_host_total;
    m_host_user = x.m_host_user;
    m_host_system = x.m_host_system;
    m_remote_total = x.m_remote_total;
    m_remote_user = x.m_remote_user;
    m_remote_system = x.m_remote_system;
}

Iperf::ResourceStatistics::ResourceStatistics(
        ResourceStatistics&& x) noexcept 
{
    m_host_total = x.m_host_total;
    m_host_user = x.m_host_user;
    m_host_system = x.m_host_system;
    m_remote_total = x.m_remote_total;
    m_remote_user = x.m_remote_user;
    m_remote_system = x.m_remote_system;
}

Iperf::ResourceStatistics& Iperf::ResourceStatistics::operator =(
        const ResourceStatistics& x)
{

    m_host_total = x.m_host_total;
    m_host_user = x.m_host_user;
    m_host_system = x.m_host_system;
    m_remote_total = x.m_remote_total;
    m_remote_user = x.m_remote_user;
    m_remote_system = x.m_remote_system;

    return *this;
}

Iperf::ResourceStatistics& Iperf::ResourceStatistics::operator =(
        ResourceStatistics&& x) noexcept
{

    m_host_total = x.m_host_total;
    m_host_user = x.m_host_user;
    m_host_system = x.m_host_system;
    m_remote_total = x.m_remote_total;
    m_remote_user = x.m_remote_user;
    m_remote_system = x.m_remote_system;

    return *this;
}

bool Iperf::ResourceStatistics::operator ==(
        const ResourceStatistics& x) const
{

    return (m_host_total == x.m_host_total && m_host_user == x.m_host_user && m_host_system == x.m_host_system && m_remote_total == x.m_remote_total && m_remote_user == x.m_remote_user && m_remote_system == x.m_remote_system);
}

bool Iperf::ResourceStatistics::operator !=(
        const ResourceStatistics& x) const
{
    return !(*this == x);
}

size_t Iperf::ResourceStatistics::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ResourceStatistics_max_cdr_typesize;
}

size_t Iperf::ResourceStatistics::getCdrSerializedSize(
        const Iperf::ResourceStatistics& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void Iperf::ResourceStatistics::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_host_total;
    scdr << m_host_user;
    scdr << m_host_system;
    scdr << m_remote_total;
    scdr << m_remote_user;
    scdr << m_remote_system;

}

void Iperf::ResourceStatistics::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_host_total;
    dcdr >> m_host_user;
    dcdr >> m_host_system;
    dcdr >> m_remote_total;
    dcdr >> m_remote_user;
    dcdr >> m_remote_system;
}

/*!
 * @brief This function sets a value in member host_total
 * @param _host_total New value for member host_total
 */
void Iperf::ResourceStatistics::host_total(
        double _host_total)
{
    m_host_total = _host_total;
}

/*!
 * @brief This function returns the value of member host_total
 * @return Value of member host_total
 */
double Iperf::ResourceStatistics::host_total() const
{
    return m_host_total;
}

/*!
 * @brief This function returns a reference to member host_total
 * @return Reference to member host_total
 */
double& Iperf::ResourceStatistics::host_total()
{
    return m_host_total;
}

/*!
 * @brief This function sets a value in member host_user
 * @param _host_user New value for member host_user
 */
void Iperf::ResourceStatistics::host_user(
        double _host_user)
{
    m_host_user = _host_user;
}

/*!
 * @brief This function returns the value of member host_user
 * @return Value of member host_user
 */
double Iperf::ResourceStatistics::host_user() const
{
    return m_host_user;
}

/*!
 * @brief This function returns a reference to member host_user
 * @return Reference to member host_user
 */
double& Iperf::ResourceStatistics::host_user()
{
    return m_host_user;
}

/*!
 * @brief This function sets a value in member host_system
 * @param _host_system New value for member host_system
 */
void Iperf::ResourceStatistics::host_system(
        double _host_system)
{
    m_host_system = _host_system;
}

/*!
 * @brief This function returns the value of member host_system
 * @return Value of member host_system
 */
double Iperf::ResourceStatistics::host_system() const
{
    return m_host_system;
}

/*!
 * @brief This function returns a reference to member host_system
 * @return Reference to member host_system
 */
double& Iperf::ResourceStatistics::host_system()
{
    return m_host_system;
}

/*!
 * @brief This function sets a value in member remote_total
 * @param _remote_total New value for member remote_total
 */
void Iperf::ResourceStatistics::remote_total(
        double _remote_total)
{
    m_remote_total = _remote_total;
}

/*!
 * @brief This function returns the value of member remote_total
 * @return Value of member remote_total
 */
double Iperf::ResourceStatistics::remote_total() const
{
    return m_remote_total;
}

/*!
 * @brief This function returns a reference to member remote_total
 * @return Reference to member remote_total
 */
double& Iperf::ResourceStatistics::remote_total()
{
    return m_remote_total;
}

/*!
 * @brief This function sets a value in member remote_user
 * @param _remote_user New value for member remote_user
 */
void Iperf::ResourceStatistics::remote_user(
        double _remote_user)
{
    m_remote_user = _remote_user;
}

/*!
 * @brief This function returns the value of member remote_user
 * @return Value of member remote_user
 */
double Iperf::ResourceStatistics::remote_user() const
{
    return m_remote_user;
}

/*!
 * @brief This function returns a reference to member remote_user
 * @return Reference to member remote_user
 */
double& Iperf::ResourceStatistics::remote_user()
{
    return m_remote_user;
}

/*!
 * @brief This function sets a value in member remote_system
 * @param _remote_system New value for member remote_system
 */
void Iperf::ResourceStatistics::remote_system(
        double _remote_system)
{
    m_remote_system = _remote_system;
}

/*!
 * @brief This function returns the value of member remote_system
 * @return Value of member remote_system
 */
double Iperf::ResourceStatistics::remote_system() const
{
    return m_remote_system;
}

/*!
 * @brief This function returns a reference to member remote_system
 * @return Reference to member remote_system
 */
double& Iperf::ResourceStatistics::remote_system()
{
    return m_remote_system;
}



size_t Iperf::ResourceStatistics::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_ResourceStatistics_max_key_cdr_typesize;
}

bool Iperf::ResourceStatistics::isKeyDefined()
{
    return false;
}

void Iperf::ResourceStatistics::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::Report::Report()
{
    // sequence<Iperf::ReportedStreamsPair> m_streams

    // Iperf::ReportedSummariesPair m_summaries

    // Iperf::ResourceStatistics m_cpu_usage


}

Iperf::Report::~Report()
{



}

Iperf::Report::Report(
        const Report& x)
{
    m_streams = x.m_streams;
    m_summaries = x.m_summaries;
    m_cpu_usage = x.m_cpu_usage;
}

Iperf::Report::Report(
        Report&& x) noexcept 
{
    m_streams = std::move(x.m_streams);
    m_summaries = std::move(x.m_summaries);
    m_cpu_usage = std::move(x.m_cpu_usage);
}

Iperf::Report& Iperf::Report::operator =(
        const Report& x)
{

    m_streams = x.m_streams;
    m_summaries = x.m_summaries;
    m_cpu_usage = x.m_cpu_usage;

    return *this;
}

Iperf::Report& Iperf::Report::operator =(
        Report&& x) noexcept
{

    m_streams = std::move(x.m_streams);
    m_summaries = std::move(x.m_summaries);
    m_cpu_usage = std::move(x.m_cpu_usage);

    return *this;
}

bool Iperf::Report::operator ==(
        const Report& x) const
{

    return (m_streams == x.m_streams && m_summaries == x.m_summaries && m_cpu_usage == x.m_cpu_usage);
}

bool Iperf::Report::operator !=(
        const Report& x) const
{
    return !(*this == x);
}

size_t Iperf::Report::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Report_max_cdr_typesize;
}

size_t Iperf::Report::getCdrSerializedSize(
        const Iperf::Report& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.streams().size(); ++a)
    {
        current_alignment += Iperf::ReportedStreamsPair::getCdrSerializedSize(data.streams().at(a), current_alignment);}

    current_alignment += Iperf::ReportedSummariesPair::getCdrSerializedSize(data.summaries(), current_alignment);
    current_alignment += Iperf::ResourceStatistics::getCdrSerializedSize(data.cpu_usage(), current_alignment);

    return current_alignment - initial_alignment;
}

void Iperf::Report::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_streams;
    scdr << m_summaries;
    scdr << m_cpu_usage;

}

void Iperf::Report::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_streams;
    dcdr >> m_summaries;
    dcdr >> m_cpu_usage;
}

/*!
 * @brief This function copies the value in member streams
 * @param _streams New value to be copied in member streams
 */
void Iperf::Report::streams(
        const std::vector<Iperf::ReportedStreamsPair>& _streams)
{
    m_streams = _streams;
}

/*!
 * @brief This function moves the value in member streams
 * @param _streams New value to be moved in member streams
 */
void Iperf::Report::streams(
        std::vector<Iperf::ReportedStreamsPair>&& _streams)
{
    m_streams = std::move(_streams);
}

/*!
 * @brief This function returns a constant reference to member streams
 * @return Constant reference to member streams
 */
const std::vector<Iperf::ReportedStreamsPair>& Iperf::Report::streams() const
{
    return m_streams;
}

/*!
 * @brief This function returns a reference to member streams
 * @return Reference to member streams
 */
std::vector<Iperf::ReportedStreamsPair>& Iperf::Report::streams()
{
    return m_streams;
}
/*!
 * @brief This function copies the value in member summaries
 * @param _summaries New value to be copied in member summaries
 */
void Iperf::Report::summaries(
        const Iperf::ReportedSummariesPair& _summaries)
{
    m_summaries = _summaries;
}

/*!
 * @brief This function moves the value in member summaries
 * @param _summaries New value to be moved in member summaries
 */
void Iperf::Report::summaries(
        Iperf::ReportedSummariesPair&& _summaries)
{
    m_summaries = std::move(_summaries);
}

/*!
 * @brief This function returns a constant reference to member summaries
 * @return Constant reference to member summaries
 */
const Iperf::ReportedSummariesPair& Iperf::Report::summaries() const
{
    return m_summaries;
}

/*!
 * @brief This function returns a reference to member summaries
 * @return Reference to member summaries
 */
Iperf::ReportedSummariesPair& Iperf::Report::summaries()
{
    return m_summaries;
}
/*!
 * @brief This function copies the value in member cpu_usage
 * @param _cpu_usage New value to be copied in member cpu_usage
 */
void Iperf::Report::cpu_usage(
        const Iperf::ResourceStatistics& _cpu_usage)
{
    m_cpu_usage = _cpu_usage;
}

/*!
 * @brief This function moves the value in member cpu_usage
 * @param _cpu_usage New value to be moved in member cpu_usage
 */
void Iperf::Report::cpu_usage(
        Iperf::ResourceStatistics&& _cpu_usage)
{
    m_cpu_usage = std::move(_cpu_usage);
}

/*!
 * @brief This function returns a constant reference to member cpu_usage
 * @return Constant reference to member cpu_usage
 */
const Iperf::ResourceStatistics& Iperf::Report::cpu_usage() const
{
    return m_cpu_usage;
}

/*!
 * @brief This function returns a reference to member cpu_usage
 * @return Reference to member cpu_usage
 */
Iperf::ResourceStatistics& Iperf::Report::cpu_usage()
{
    return m_cpu_usage;
}


size_t Iperf::Report::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_Report_max_key_cdr_typesize;
}

bool Iperf::Report::isKeyDefined()
{
    return false;
}

void Iperf::Report::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::IperfEntity::IperfEntity()
{
    // Iperf::Header m_header_item

    // sequence<Iperf::Interval> m_intervals

    // sequence<Iperf::CumulativeInterval> m_cumulative_intervals

    // Iperf::Report m_end_report


}

Iperf::IperfEntity::~IperfEntity()
{




}

Iperf::IperfEntity::IperfEntity(
        const IperfEntity& x)
{
    m_header_item = x.m_header_item;
    m_intervals = x.m_intervals;
    m_cumulative_intervals = x.m_cumulative_intervals;
    m_end_report = x.m_end_report;
}

Iperf::IperfEntity::IperfEntity(
        IperfEntity&& x) noexcept 
{
    m_header_item = std::move(x.m_header_item);
    m_intervals = std::move(x.m_intervals);
    m_cumulative_intervals = std::move(x.m_cumulative_intervals);
    m_end_report = std::move(x.m_end_report);
}

Iperf::IperfEntity& Iperf::IperfEntity::operator =(
        const IperfEntity& x)
{

    m_header_item = x.m_header_item;
    m_intervals = x.m_intervals;
    m_cumulative_intervals = x.m_cumulative_intervals;
    m_end_report = x.m_end_report;

    return *this;
}

Iperf::IperfEntity& Iperf::IperfEntity::operator =(
        IperfEntity&& x) noexcept
{

    m_header_item = std::move(x.m_header_item);
    m_intervals = std::move(x.m_intervals);
    m_cumulative_intervals = std::move(x.m_cumulative_intervals);
    m_end_report = std::move(x.m_end_report);

    return *this;
}

bool Iperf::IperfEntity::operator ==(
        const IperfEntity& x) const
{

    return (m_header_item == x.m_header_item && m_intervals == x.m_intervals && m_cumulative_intervals == x.m_cumulative_intervals && m_end_report == x.m_end_report);
}

bool Iperf::IperfEntity::operator !=(
        const IperfEntity& x) const
{
    return !(*this == x);
}

size_t Iperf::IperfEntity::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_IperfEntity_max_cdr_typesize;
}

size_t Iperf::IperfEntity::getCdrSerializedSize(
        const Iperf::IperfEntity& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Iperf::Header::getCdrSerializedSize(data.header_item(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.intervals().size(); ++a)
    {
        current_alignment += Iperf::Interval::getCdrSerializedSize(data.intervals().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.cumulative_intervals().size(); ++a)
    {
        current_alignment += Iperf::CumulativeInterval::getCdrSerializedSize(data.cumulative_intervals().at(a), current_alignment);}

    current_alignment += Iperf::Report::getCdrSerializedSize(data.end_report(), current_alignment);

    return current_alignment - initial_alignment;
}

void Iperf::IperfEntity::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header_item;
    scdr << m_intervals;
    scdr << m_cumulative_intervals;
    scdr << m_end_report;

}

void Iperf::IperfEntity::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header_item;
    dcdr >> m_intervals;
    dcdr >> m_cumulative_intervals;
    dcdr >> m_end_report;
}

/*!
 * @brief This function copies the value in member header_item
 * @param _header_item New value to be copied in member header_item
 */
void Iperf::IperfEntity::header_item(
        const Iperf::Header& _header_item)
{
    m_header_item = _header_item;
}

/*!
 * @brief This function moves the value in member header_item
 * @param _header_item New value to be moved in member header_item
 */
void Iperf::IperfEntity::header_item(
        Iperf::Header&& _header_item)
{
    m_header_item = std::move(_header_item);
}

/*!
 * @brief This function returns a constant reference to member header_item
 * @return Constant reference to member header_item
 */
const Iperf::Header& Iperf::IperfEntity::header_item() const
{
    return m_header_item;
}

/*!
 * @brief This function returns a reference to member header_item
 * @return Reference to member header_item
 */
Iperf::Header& Iperf::IperfEntity::header_item()
{
    return m_header_item;
}
/*!
 * @brief This function copies the value in member intervals
 * @param _intervals New value to be copied in member intervals
 */
void Iperf::IperfEntity::intervals(
        const std::vector<Iperf::Interval>& _intervals)
{
    m_intervals = _intervals;
}

/*!
 * @brief This function moves the value in member intervals
 * @param _intervals New value to be moved in member intervals
 */
void Iperf::IperfEntity::intervals(
        std::vector<Iperf::Interval>&& _intervals)
{
    m_intervals = std::move(_intervals);
}

/*!
 * @brief This function returns a constant reference to member intervals
 * @return Constant reference to member intervals
 */
const std::vector<Iperf::Interval>& Iperf::IperfEntity::intervals() const
{
    return m_intervals;
}

/*!
 * @brief This function returns a reference to member intervals
 * @return Reference to member intervals
 */
std::vector<Iperf::Interval>& Iperf::IperfEntity::intervals()
{
    return m_intervals;
}
/*!
 * @brief This function copies the value in member cumulative_intervals
 * @param _cumulative_intervals New value to be copied in member cumulative_intervals
 */
void Iperf::IperfEntity::cumulative_intervals(
        const std::vector<Iperf::CumulativeInterval>& _cumulative_intervals)
{
    m_cumulative_intervals = _cumulative_intervals;
}

/*!
 * @brief This function moves the value in member cumulative_intervals
 * @param _cumulative_intervals New value to be moved in member cumulative_intervals
 */
void Iperf::IperfEntity::cumulative_intervals(
        std::vector<Iperf::CumulativeInterval>&& _cumulative_intervals)
{
    m_cumulative_intervals = std::move(_cumulative_intervals);
}

/*!
 * @brief This function returns a constant reference to member cumulative_intervals
 * @return Constant reference to member cumulative_intervals
 */
const std::vector<Iperf::CumulativeInterval>& Iperf::IperfEntity::cumulative_intervals() const
{
    return m_cumulative_intervals;
}

/*!
 * @brief This function returns a reference to member cumulative_intervals
 * @return Reference to member cumulative_intervals
 */
std::vector<Iperf::CumulativeInterval>& Iperf::IperfEntity::cumulative_intervals()
{
    return m_cumulative_intervals;
}
/*!
 * @brief This function copies the value in member end_report
 * @param _end_report New value to be copied in member end_report
 */
void Iperf::IperfEntity::end_report(
        const Iperf::Report& _end_report)
{
    m_end_report = _end_report;
}

/*!
 * @brief This function moves the value in member end_report
 * @param _end_report New value to be moved in member end_report
 */
void Iperf::IperfEntity::end_report(
        Iperf::Report&& _end_report)
{
    m_end_report = std::move(_end_report);
}

/*!
 * @brief This function returns a constant reference to member end_report
 * @return Constant reference to member end_report
 */
const Iperf::Report& Iperf::IperfEntity::end_report() const
{
    return m_end_report;
}

/*!
 * @brief This function returns a reference to member end_report
 * @return Reference to member end_report
 */
Iperf::Report& Iperf::IperfEntity::end_report()
{
    return m_end_report;
}


size_t Iperf::IperfEntity::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_IperfEntity_max_key_cdr_typesize;
}

bool Iperf::IperfEntity::isKeyDefined()
{
    return false;
}

void Iperf::IperfEntity::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

Iperf::IperfStatus::IperfStatus()
{
    // unsigned long long m_timestamp
    m_timestamp = 0;
    // sequence<Iperf::IperfEntity> m_servers

    // sequence<Iperf::IperfEntity> m_clients


}

Iperf::IperfStatus::~IperfStatus()
{



}

Iperf::IperfStatus::IperfStatus(
        const IperfStatus& x)
{
    m_timestamp = x.m_timestamp;
    m_servers = x.m_servers;
    m_clients = x.m_clients;
}

Iperf::IperfStatus::IperfStatus(
        IperfStatus&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_servers = std::move(x.m_servers);
    m_clients = std::move(x.m_clients);
}

Iperf::IperfStatus& Iperf::IperfStatus::operator =(
        const IperfStatus& x)
{

    m_timestamp = x.m_timestamp;
    m_servers = x.m_servers;
    m_clients = x.m_clients;

    return *this;
}

Iperf::IperfStatus& Iperf::IperfStatus::operator =(
        IperfStatus&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_servers = std::move(x.m_servers);
    m_clients = std::move(x.m_clients);

    return *this;
}

bool Iperf::IperfStatus::operator ==(
        const IperfStatus& x) const
{

    return (m_timestamp == x.m_timestamp && m_servers == x.m_servers && m_clients == x.m_clients);
}

bool Iperf::IperfStatus::operator !=(
        const IperfStatus& x) const
{
    return !(*this == x);
}

size_t Iperf::IperfStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_IperfStatus_max_cdr_typesize;
}

size_t Iperf::IperfStatus::getCdrSerializedSize(
        const Iperf::IperfStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.servers().size(); ++a)
    {
        current_alignment += Iperf::IperfEntity::getCdrSerializedSize(data.servers().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.clients().size(); ++a)
    {
        current_alignment += Iperf::IperfEntity::getCdrSerializedSize(data.clients().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void Iperf::IperfStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_servers;
    scdr << m_clients;

}

void Iperf::IperfStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_servers;
    dcdr >> m_clients;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void Iperf::IperfStatus::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t Iperf::IperfStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& Iperf::IperfStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member servers
 * @param _servers New value to be copied in member servers
 */
void Iperf::IperfStatus::servers(
        const std::vector<Iperf::IperfEntity>& _servers)
{
    m_servers = _servers;
}

/*!
 * @brief This function moves the value in member servers
 * @param _servers New value to be moved in member servers
 */
void Iperf::IperfStatus::servers(
        std::vector<Iperf::IperfEntity>&& _servers)
{
    m_servers = std::move(_servers);
}

/*!
 * @brief This function returns a constant reference to member servers
 * @return Constant reference to member servers
 */
const std::vector<Iperf::IperfEntity>& Iperf::IperfStatus::servers() const
{
    return m_servers;
}

/*!
 * @brief This function returns a reference to member servers
 * @return Reference to member servers
 */
std::vector<Iperf::IperfEntity>& Iperf::IperfStatus::servers()
{
    return m_servers;
}
/*!
 * @brief This function copies the value in member clients
 * @param _clients New value to be copied in member clients
 */
void Iperf::IperfStatus::clients(
        const std::vector<Iperf::IperfEntity>& _clients)
{
    m_clients = _clients;
}

/*!
 * @brief This function moves the value in member clients
 * @param _clients New value to be moved in member clients
 */
void Iperf::IperfStatus::clients(
        std::vector<Iperf::IperfEntity>&& _clients)
{
    m_clients = std::move(_clients);
}

/*!
 * @brief This function returns a constant reference to member clients
 * @return Constant reference to member clients
 */
const std::vector<Iperf::IperfEntity>& Iperf::IperfStatus::clients() const
{
    return m_clients;
}

/*!
 * @brief This function returns a reference to member clients
 * @return Reference to member clients
 */
std::vector<Iperf::IperfEntity>& Iperf::IperfStatus::clients()
{
    return m_clients;
}


size_t Iperf::IperfStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Iperf_IperfStatus_max_key_cdr_typesize;
}

bool Iperf::IperfStatus::isKeyDefined()
{
    return true;
}

void Iperf::IperfStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
   scdr << m_timestamp;
   
 
  
}

