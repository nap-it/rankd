// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ncm.proto

#include "data-sources/yanpit/ncm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ncm_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ncm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ncm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Handover;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ncm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NeighborStation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ncm_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_State;
}  // namespace protobuf_ncm_2eproto
class GpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gps>
      _instance;
} _Gps_default_instance_;
class NeighborStationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighborStation>
      _instance;
} _NeighborStation_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
} _State_default_instance_;
class HandoverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handover>
      _instance;
} _Handover_default_instance_;
class NcmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ncm>
      _instance;
} _Ncm_default_instance_;
namespace protobuf_ncm_2eproto {
static void InitDefaultsGps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Gps_default_instance_;
    new (ptr) ::Gps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGps}, {}};

static void InitDefaultsNeighborStation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NeighborStation_default_instance_;
    new (ptr) ::NeighborStation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NeighborStation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NeighborStation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighborStation}, {
      &protobuf_ncm_2eproto::scc_info_Gps.base,}};

static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_State_default_instance_;
    new (ptr) ::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsState}, {
      &protobuf_ncm_2eproto::scc_info_Gps.base,
      &protobuf_ncm_2eproto::scc_info_NeighborStation.base,}};

static void InitDefaultsHandover() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Handover_default_instance_;
    new (ptr) ::Handover();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Handover::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Handover =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHandover}, {
      &protobuf_ncm_2eproto::scc_info_Gps.base,}};

static void InitDefaultsNcm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ncm_default_instance_;
    new (ptr) ::Ncm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ncm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Ncm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNcm}, {
      &protobuf_ncm_2eproto::scc_info_State.base,
      &protobuf_ncm_2eproto::scc_info_Handover.base,
      &protobuf_ncm_2eproto::scc_info_NeighborStation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Gps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NeighborStation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Handover.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ncm.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gps, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gps, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gps, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Gps, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, identification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, in_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, average_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, tx_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, inactive_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, i_throughput_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, d_throughput_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, rx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, tx_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NeighborStation, tx_fails_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, connection_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, neighbor_station_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, source_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, source_gateway_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, destination_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, destination_gateway_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, average_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Handover, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ncm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ncm, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ncm, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ncm, handover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ncm, stations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Gps)},
  { 9, -1, sizeof(::NeighborStation)},
  { 29, -1, sizeof(::State)},
  { 37, -1, sizeof(::Handover)},
  { 50, -1, sizeof(::Ncm)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Gps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NeighborStation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Handover_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Ncm_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ncm.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tncm.proto\"H\n\003Gps\022\021\n\tlongitude\030\001 \001(\001\022\020\n"
      "\010latitude\030\002 \001(\001\022\r\n\005track\030\003 \001(\001\022\r\n\005speed\030"
      "\004 \001(\001\"\275\002\n\017NeighborStation\022\026\n\016identificat"
      "ion\030\001 \001(\005\022\026\n\010location\030\002 \001(\0132\004.Gps\022\020\n\010in_"
      "range\030\003 \001(\010\022\021\n\ttimestamp\030\004 \001(\003\022\016\n\006signal"
      "\030\005 \001(\005\022\026\n\016average_signal\030\006 \001(\005\022\017\n\007azimut"
      "h\030\007 \001(\001\022\017\n\007tx_rate\030\010 \001(\001\022\025\n\rinactive_tim"
      "e\030\t \001(\005\022\024\n\014i_throughput\030\n \001(\001\022\024\n\014d_throu"
      "ghput\030\013 \001(\001\022\020\n\010rx_bytes\030\014 \001(\003\022\020\n\010tx_byte"
      "s\030\r \001(\003\022\022\n\ntx_retries\030\016 \001(\005\022\020\n\010tx_fails\030"
      "\017 \001(\005\"w\n\005State\022\026\n\010location\030\001 \001(\0132\004.Gps\022*"
      "\n\020connection_state\030\002 \001(\0162\020.ConnectionSta"
      "te\022*\n\020neighbor_station\030\003 \001(\0132\020.NeighborS"
      "tation\"\370\001\n\010Handover\022&\n\014source_state\030\001 \001("
      "\0162\020.ConnectionState\022\031\n\021source_gateway_id"
      "\030\002 \001(\005\022+\n\021destination_state\030\003 \001(\0162\020.Conn"
      "ectionState\022\036\n\026destination_gateway_id\030\004 "
      "\001(\005\022\033\n\004type\030\005 \001(\0162\r.HandoverType\022\026\n\016aver"
      "age_signal\030\006 \001(\005\022\017\n\007azimuth\030\007 \001(\001\022\026\n\010loc"
      "ation\030\010 \001(\0132\004.Gps\"p\n\003Ncm\022\021\n\ttimestamp\030\001 "
      "\001(\003\022\025\n\005state\030\002 \001(\0132\006.State\022\033\n\010handover\030\003"
      " \001(\0132\t.Handover\022\"\n\010stations\030\004 \003(\0132\020.Neig"
      "hborStation*d\n\017ConnectionState\022\020\n\014DISCON"
      "NECTED\020\000\022\026\n\022CONNECTED_CELLULAR\020\001\022\022\n\016CONN"
      "ECTED_WAVE\020\002\022\023\n\017ERRONEOUS_STATE\020\003*O\n\014Han"
      "doverType\022\024\n\020REGULAR_HANDOVER\020\000\022\021\n\rSLOW_"
      "HANDOVER\020\001\022\026\n\022ERRONEOUS_HANDOVER\020\002b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ncm.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ncm_2eproto
const ::google::protobuf::EnumDescriptor* ConnectionState_descriptor() {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ncm_2eproto::file_level_enum_descriptors[0];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HandoverType_descriptor() {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ncm_2eproto::file_level_enum_descriptors[1];
}
bool HandoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Gps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gps::kLongitudeFieldNumber;
const int Gps::kLatitudeFieldNumber;
const int Gps::kTrackFieldNumber;
const int Gps::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gps::Gps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ncm_2eproto::scc_info_Gps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gps)
}
Gps::Gps(const Gps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:Gps)
}

void Gps::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(speed_));
}

Gps::~Gps() {
  // @@protoc_insertion_point(destructor:Gps)
  SharedDtor();
}

void Gps::SharedDtor() {
}

void Gps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gps::descriptor() {
  ::protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gps& Gps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ncm_2eproto::scc_info_Gps.base);
  return *internal_default_instance();
}


void Gps::Clear() {
// @@protoc_insertion_point(message_clear_start:Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool Gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gps)
  return false;
#undef DO_
}

void Gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double track = 3;
  if (this->track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->track(), output);
  }

  // double speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gps)
}

::google::protobuf::uint8* Gps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double track = 3;
  if (this->track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->track(), target);
  }

  // double speed = 4;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gps)
  return target;
}

size_t Gps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gps)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double track = 3;
  if (this->track() != 0) {
    total_size += 1 + 8;
  }

  // double speed = 4;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gps)
  GOOGLE_DCHECK_NE(&from, this);
  const Gps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gps)
    MergeFrom(*source);
  }
}

void Gps::MergeFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.track() != 0) {
    set_track(from.track());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void Gps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gps::CopyFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gps::IsInitialized() const {
  return true;
}

void Gps::Swap(Gps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gps::InternalSwap(Gps* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(track_, other->track_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gps::GetMetadata() const {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NeighborStation::InitAsDefaultInstance() {
  ::_NeighborStation_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gps*>(
      ::Gps::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighborStation::kIdentificationFieldNumber;
const int NeighborStation::kLocationFieldNumber;
const int NeighborStation::kInRangeFieldNumber;
const int NeighborStation::kTimestampFieldNumber;
const int NeighborStation::kSignalFieldNumber;
const int NeighborStation::kAverageSignalFieldNumber;
const int NeighborStation::kAzimuthFieldNumber;
const int NeighborStation::kTxRateFieldNumber;
const int NeighborStation::kInactiveTimeFieldNumber;
const int NeighborStation::kIThroughputFieldNumber;
const int NeighborStation::kDThroughputFieldNumber;
const int NeighborStation::kRxBytesFieldNumber;
const int NeighborStation::kTxBytesFieldNumber;
const int NeighborStation::kTxRetriesFieldNumber;
const int NeighborStation::kTxFailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighborStation::NeighborStation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ncm_2eproto::scc_info_NeighborStation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NeighborStation)
}
NeighborStation::NeighborStation(const NeighborStation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gps(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&identification_, &from.identification_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_fails_) -
    reinterpret_cast<char*>(&identification_)) + sizeof(tx_fails_));
  // @@protoc_insertion_point(copy_constructor:NeighborStation)
}

void NeighborStation::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_fails_) -
      reinterpret_cast<char*>(&location_)) + sizeof(tx_fails_));
}

NeighborStation::~NeighborStation() {
  // @@protoc_insertion_point(destructor:NeighborStation)
  SharedDtor();
}

void NeighborStation::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void NeighborStation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NeighborStation::descriptor() {
  ::protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NeighborStation& NeighborStation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ncm_2eproto::scc_info_NeighborStation.base);
  return *internal_default_instance();
}


void NeighborStation::Clear() {
// @@protoc_insertion_point(message_clear_start:NeighborStation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&identification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_fails_) -
      reinterpret_cast<char*>(&identification_)) + sizeof(tx_fails_));
  _internal_metadata_.Clear();
}

bool NeighborStation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NeighborStation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 identification = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gps location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 average_signal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double azimuth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tx_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tx_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inactive_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inactive_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double i_throughput = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_throughput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double d_throughput = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_throughput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rx_bytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_bytes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tx_retries = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tx_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tx_fails = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tx_fails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NeighborStation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NeighborStation)
  return false;
#undef DO_
}

void NeighborStation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NeighborStation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 identification = 1;
  if (this->identification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->identification(), output);
  }

  // .Gps location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_location(), output);
  }

  // bool in_range = 3;
  if (this->in_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_range(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // int32 signal = 5;
  if (this->signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->signal(), output);
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->average_signal(), output);
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->azimuth(), output);
  }

  // double tx_rate = 8;
  if (this->tx_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tx_rate(), output);
  }

  // int32 inactive_time = 9;
  if (this->inactive_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->inactive_time(), output);
  }

  // double i_throughput = 10;
  if (this->i_throughput() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->i_throughput(), output);
  }

  // double d_throughput = 11;
  if (this->d_throughput() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->d_throughput(), output);
  }

  // int64 rx_bytes = 12;
  if (this->rx_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->rx_bytes(), output);
  }

  // int64 tx_bytes = 13;
  if (this->tx_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tx_bytes(), output);
  }

  // int32 tx_retries = 14;
  if (this->tx_retries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tx_retries(), output);
  }

  // int32 tx_fails = 15;
  if (this->tx_fails() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tx_fails(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NeighborStation)
}

::google::protobuf::uint8* NeighborStation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NeighborStation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 identification = 1;
  if (this->identification() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->identification(), target);
  }

  // .Gps location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_location(), deterministic, target);
  }

  // bool in_range = 3;
  if (this->in_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_range(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // int32 signal = 5;
  if (this->signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->signal(), target);
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->average_signal(), target);
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->azimuth(), target);
  }

  // double tx_rate = 8;
  if (this->tx_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tx_rate(), target);
  }

  // int32 inactive_time = 9;
  if (this->inactive_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->inactive_time(), target);
  }

  // double i_throughput = 10;
  if (this->i_throughput() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->i_throughput(), target);
  }

  // double d_throughput = 11;
  if (this->d_throughput() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->d_throughput(), target);
  }

  // int64 rx_bytes = 12;
  if (this->rx_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->rx_bytes(), target);
  }

  // int64 tx_bytes = 13;
  if (this->tx_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tx_bytes(), target);
  }

  // int32 tx_retries = 14;
  if (this->tx_retries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tx_retries(), target);
  }

  // int32 tx_fails = 15;
  if (this->tx_fails() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tx_fails(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NeighborStation)
  return target;
}

size_t NeighborStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NeighborStation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gps location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 identification = 1;
  if (this->identification() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->identification());
  }

  // bool in_range = 3;
  if (this->in_range() != 0) {
    total_size += 1 + 1;
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 signal = 5;
  if (this->signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signal());
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->average_signal());
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    total_size += 1 + 8;
  }

  // double tx_rate = 8;
  if (this->tx_rate() != 0) {
    total_size += 1 + 8;
  }

  // double i_throughput = 10;
  if (this->i_throughput() != 0) {
    total_size += 1 + 8;
  }

  // double d_throughput = 11;
  if (this->d_throughput() != 0) {
    total_size += 1 + 8;
  }

  // int32 inactive_time = 9;
  if (this->inactive_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inactive_time());
  }

  // int32 tx_retries = 14;
  if (this->tx_retries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tx_retries());
  }

  // int64 rx_bytes = 12;
  if (this->rx_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rx_bytes());
  }

  // int64 tx_bytes = 13;
  if (this->tx_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_bytes());
  }

  // int32 tx_fails = 15;
  if (this->tx_fails() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tx_fails());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeighborStation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NeighborStation)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighborStation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NeighborStation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NeighborStation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NeighborStation)
    MergeFrom(*source);
  }
}

void NeighborStation::MergeFrom(const NeighborStation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NeighborStation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gps::MergeFrom(from.location());
  }
  if (from.identification() != 0) {
    set_identification(from.identification());
  }
  if (from.in_range() != 0) {
    set_in_range(from.in_range());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.signal() != 0) {
    set_signal(from.signal());
  }
  if (from.average_signal() != 0) {
    set_average_signal(from.average_signal());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
  if (from.tx_rate() != 0) {
    set_tx_rate(from.tx_rate());
  }
  if (from.i_throughput() != 0) {
    set_i_throughput(from.i_throughput());
  }
  if (from.d_throughput() != 0) {
    set_d_throughput(from.d_throughput());
  }
  if (from.inactive_time() != 0) {
    set_inactive_time(from.inactive_time());
  }
  if (from.tx_retries() != 0) {
    set_tx_retries(from.tx_retries());
  }
  if (from.rx_bytes() != 0) {
    set_rx_bytes(from.rx_bytes());
  }
  if (from.tx_bytes() != 0) {
    set_tx_bytes(from.tx_bytes());
  }
  if (from.tx_fails() != 0) {
    set_tx_fails(from.tx_fails());
  }
}

void NeighborStation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NeighborStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborStation::CopyFrom(const NeighborStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NeighborStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborStation::IsInitialized() const {
  return true;
}

void NeighborStation::Swap(NeighborStation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighborStation::InternalSwap(NeighborStation* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(identification_, other->identification_);
  swap(in_range_, other->in_range_);
  swap(timestamp_, other->timestamp_);
  swap(signal_, other->signal_);
  swap(average_signal_, other->average_signal_);
  swap(azimuth_, other->azimuth_);
  swap(tx_rate_, other->tx_rate_);
  swap(i_throughput_, other->i_throughput_);
  swap(d_throughput_, other->d_throughput_);
  swap(inactive_time_, other->inactive_time_);
  swap(tx_retries_, other->tx_retries_);
  swap(rx_bytes_, other->rx_bytes_);
  swap(tx_bytes_, other->tx_bytes_);
  swap(tx_fails_, other->tx_fails_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NeighborStation::GetMetadata() const {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::_State_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gps*>(
      ::Gps::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->neighbor_station_ = const_cast< ::NeighborStation*>(
      ::NeighborStation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kLocationFieldNumber;
const int State::kConnectionStateFieldNumber;
const int State::kNeighborStationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ncm_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gps(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_neighbor_station()) {
    neighbor_station_ = new ::NeighborStation(*from.neighbor_station_);
  } else {
    neighbor_station_ = NULL;
  }
  connection_state_ = from.connection_state_;
  // @@protoc_insertion_point(copy_constructor:State)
}

void State::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_state_) -
      reinterpret_cast<char*>(&location_)) + sizeof(connection_state_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete neighbor_station_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ncm_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_station_ != NULL) {
    delete neighbor_station_;
  }
  neighbor_station_ = NULL;
  connection_state_ = 0;
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gps location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConnectionState connection_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connection_state(static_cast< ::ConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NeighborStation neighbor_station = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_station()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gps location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_location(), output);
  }

  // .ConnectionState connection_state = 2;
  if (this->connection_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connection_state(), output);
  }

  // .NeighborStation neighbor_station = 3;
  if (this->has_neighbor_station()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_neighbor_station(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gps location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_location(), deterministic, target);
  }

  // .ConnectionState connection_state = 2;
  if (this->connection_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->connection_state(), target);
  }

  // .NeighborStation neighbor_station = 3;
  if (this->has_neighbor_station()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_neighbor_station(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gps location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .NeighborStation neighbor_station = 3;
  if (this->has_neighbor_station()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_station_);
  }

  // .ConnectionState connection_state = 2;
  if (this->connection_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gps::MergeFrom(from.location());
  }
  if (from.has_neighbor_station()) {
    mutable_neighbor_station()->::NeighborStation::MergeFrom(from.neighbor_station());
  }
  if (from.connection_state() != 0) {
    set_connection_state(from.connection_state());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(neighbor_station_, other->neighbor_station_);
  swap(connection_state_, other->connection_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handover::InitAsDefaultInstance() {
  ::_Handover_default_instance_._instance.get_mutable()->location_ = const_cast< ::Gps*>(
      ::Gps::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handover::kSourceStateFieldNumber;
const int Handover::kSourceGatewayIdFieldNumber;
const int Handover::kDestinationStateFieldNumber;
const int Handover::kDestinationGatewayIdFieldNumber;
const int Handover::kTypeFieldNumber;
const int Handover::kAverageSignalFieldNumber;
const int Handover::kAzimuthFieldNumber;
const int Handover::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handover::Handover()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ncm_2eproto::scc_info_Handover.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Handover)
}
Handover::Handover(const Handover& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::Gps(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&source_state_, &from.source_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuth_) -
    reinterpret_cast<char*>(&source_state_)) + sizeof(azimuth_));
  // @@protoc_insertion_point(copy_constructor:Handover)
}

void Handover::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&location_)) + sizeof(azimuth_));
}

Handover::~Handover() {
  // @@protoc_insertion_point(destructor:Handover)
  SharedDtor();
}

void Handover::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Handover::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Handover::descriptor() {
  ::protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handover& Handover::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ncm_2eproto::scc_info_Handover.base);
  return *internal_default_instance();
}


void Handover::Clear() {
// @@protoc_insertion_point(message_clear_start:Handover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&source_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&source_state_)) + sizeof(azimuth_));
  _internal_metadata_.Clear();
}

bool Handover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Handover)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConnectionState source_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source_state(static_cast< ::ConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source_gateway_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_gateway_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConnectionState destination_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination_state(static_cast< ::ConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 destination_gateway_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_gateway_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HandoverType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::HandoverType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 average_signal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double azimuth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gps location = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Handover)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Handover)
  return false;
#undef DO_
}

void Handover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Handover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectionState source_state = 1;
  if (this->source_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source_state(), output);
  }

  // int32 source_gateway_id = 2;
  if (this->source_gateway_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_gateway_id(), output);
  }

  // .ConnectionState destination_state = 3;
  if (this->destination_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->destination_state(), output);
  }

  // int32 destination_gateway_id = 4;
  if (this->destination_gateway_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->destination_gateway_id(), output);
  }

  // .HandoverType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->average_signal(), output);
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->azimuth(), output);
  }

  // .Gps location = 8;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_location(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Handover)
}

::google::protobuf::uint8* Handover::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Handover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectionState source_state = 1;
  if (this->source_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source_state(), target);
  }

  // int32 source_gateway_id = 2;
  if (this->source_gateway_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source_gateway_id(), target);
  }

  // .ConnectionState destination_state = 3;
  if (this->destination_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->destination_state(), target);
  }

  // int32 destination_gateway_id = 4;
  if (this->destination_gateway_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->destination_gateway_id(), target);
  }

  // .HandoverType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->average_signal(), target);
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->azimuth(), target);
  }

  // .Gps location = 8;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_location(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Handover)
  return target;
}

size_t Handover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Handover)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Gps location = 8;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .ConnectionState source_state = 1;
  if (this->source_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_state());
  }

  // int32 source_gateway_id = 2;
  if (this->source_gateway_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_gateway_id());
  }

  // .ConnectionState destination_state = 3;
  if (this->destination_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_state());
  }

  // int32 destination_gateway_id = 4;
  if (this->destination_gateway_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination_gateway_id());
  }

  // .HandoverType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 average_signal = 6;
  if (this->average_signal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->average_signal());
  }

  // double azimuth = 7;
  if (this->azimuth() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handover::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Handover)
  GOOGLE_DCHECK_NE(&from, this);
  const Handover* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handover>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Handover)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Handover)
    MergeFrom(*source);
  }
}

void Handover::MergeFrom(const Handover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Handover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::Gps::MergeFrom(from.location());
  }
  if (from.source_state() != 0) {
    set_source_state(from.source_state());
  }
  if (from.source_gateway_id() != 0) {
    set_source_gateway_id(from.source_gateway_id());
  }
  if (from.destination_state() != 0) {
    set_destination_state(from.destination_state());
  }
  if (from.destination_gateway_id() != 0) {
    set_destination_gateway_id(from.destination_gateway_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.average_signal() != 0) {
    set_average_signal(from.average_signal());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
}

void Handover::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Handover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handover::CopyFrom(const Handover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Handover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handover::IsInitialized() const {
  return true;
}

void Handover::Swap(Handover* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handover::InternalSwap(Handover* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(source_state_, other->source_state_);
  swap(source_gateway_id_, other->source_gateway_id_);
  swap(destination_state_, other->destination_state_);
  swap(destination_gateway_id_, other->destination_gateway_id_);
  swap(type_, other->type_);
  swap(average_signal_, other->average_signal_);
  swap(azimuth_, other->azimuth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Handover::GetMetadata() const {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ncm::InitAsDefaultInstance() {
  ::_Ncm_default_instance_._instance.get_mutable()->state_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_Ncm_default_instance_._instance.get_mutable()->handover_ = const_cast< ::Handover*>(
      ::Handover::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ncm::kTimestampFieldNumber;
const int Ncm::kStateFieldNumber;
const int Ncm::kHandoverFieldNumber;
const int Ncm::kStationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ncm::Ncm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ncm_2eproto::scc_info_Ncm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ncm)
}
Ncm::Ncm(const Ncm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stations_(from.stations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_handover()) {
    handover_ = new ::Handover(*from.handover_);
  } else {
    handover_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Ncm)
}

void Ncm::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&state_)) + sizeof(timestamp_));
}

Ncm::~Ncm() {
  // @@protoc_insertion_point(destructor:Ncm)
  SharedDtor();
}

void Ncm::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete handover_;
}

void Ncm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ncm::descriptor() {
  ::protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ncm& Ncm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ncm_2eproto::scc_info_Ncm.base);
  return *internal_default_instance();
}


void Ncm::Clear() {
// @@protoc_insertion_point(message_clear_start:Ncm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stations_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && handover_ != NULL) {
    delete handover_;
  }
  handover_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Ncm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ncm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Handover handover = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NeighborStation stations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ncm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ncm)
  return false;
#undef DO_
}

void Ncm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ncm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .State state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  // .Handover handover = 3;
  if (this->has_handover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_handover(), output);
  }

  // repeated .NeighborStation stations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stations(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Ncm)
}

::google::protobuf::uint8* Ncm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ncm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .State state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  // .Handover handover = 3;
  if (this->has_handover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_handover(), deterministic, target);
  }

  // repeated .NeighborStation stations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ncm)
  return target;
}

size_t Ncm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ncm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NeighborStation stations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stations(static_cast<int>(i)));
    }
  }

  // .State state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .Handover handover = 3;
  if (this->has_handover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handover_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ncm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ncm)
  GOOGLE_DCHECK_NE(&from, this);
  const Ncm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ncm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ncm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ncm)
    MergeFrom(*source);
  }
}

void Ncm::MergeFrom(const Ncm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ncm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stations_.MergeFrom(from.stations_);
  if (from.has_state()) {
    mutable_state()->::State::MergeFrom(from.state());
  }
  if (from.has_handover()) {
    mutable_handover()->::Handover::MergeFrom(from.handover());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Ncm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ncm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ncm::CopyFrom(const Ncm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ncm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ncm::IsInitialized() const {
  return true;
}

void Ncm::Swap(Ncm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ncm::InternalSwap(Ncm* other) {
  using std::swap;
  CastToBase(&stations_)->InternalSwap(CastToBase(&other->stations_));
  swap(state_, other->state_);
  swap(handover_, other->handover_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ncm::GetMetadata() const {
  protobuf_ncm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ncm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Gps* Arena::CreateMaybeMessage< ::Gps >(Arena* arena) {
  return Arena::CreateInternal< ::Gps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NeighborStation* Arena::CreateMaybeMessage< ::NeighborStation >(Arena* arena) {
  return Arena::CreateInternal< ::NeighborStation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::State* Arena::CreateMaybeMessage< ::State >(Arena* arena) {
  return Arena::CreateInternal< ::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Handover* Arena::CreateMaybeMessage< ::Handover >(Arena* arena) {
  return Arena::CreateInternal< ::Handover >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Ncm* Arena::CreateMaybeMessage< ::Ncm >(Arena* arena) {
  return Arena::CreateInternal< ::Ncm >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
