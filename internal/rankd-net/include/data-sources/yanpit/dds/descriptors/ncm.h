// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ncm.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_NCM_NCM_H_
#define _FAST_DDS_GENERATED_NCM_NCM_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ncm_SOURCE)
#define ncm_DllAPI __declspec( dllexport )
#else
#define ncm_DllAPI __declspec( dllimport )
#endif // ncm_SOURCE
#else
#define ncm_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ncm_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace Ncm {
    /*!
     * @brief This class represents the structure Gps defined by the user in the IDL file.
     * @ingroup NCM
     */
    class Gps
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Gps();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Gps();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Ncm::Gps that will be copied.
         */
        eProsima_user_DllExport Gps(
                const Gps& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Ncm::Gps that will be copied.
         */
        eProsima_user_DllExport Gps(
                Gps&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Ncm::Gps that will be copied.
         */
        eProsima_user_DllExport Gps& operator =(
                const Gps& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Ncm::Gps that will be copied.
         */
        eProsima_user_DllExport Gps& operator =(
                Gps&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::Gps object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Gps& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::Gps object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Gps& x) const;

        /*!
         * @brief This function sets a value in member longitude
         * @param _longitude New value for member longitude
         */
        eProsima_user_DllExport void longitude(
                double _longitude);

        /*!
         * @brief This function returns the value of member longitude
         * @return Value of member longitude
         */
        eProsima_user_DllExport double longitude() const;

        /*!
         * @brief This function returns a reference to member longitude
         * @return Reference to member longitude
         */
        eProsima_user_DllExport double& longitude();

        /*!
         * @brief This function sets a value in member latitude
         * @param _latitude New value for member latitude
         */
        eProsima_user_DllExport void latitude(
                double _latitude);

        /*!
         * @brief This function returns the value of member latitude
         * @return Value of member latitude
         */
        eProsima_user_DllExport double latitude() const;

        /*!
         * @brief This function returns a reference to member latitude
         * @return Reference to member latitude
         */
        eProsima_user_DllExport double& latitude();

        /*!
         * @brief This function sets a value in member track
         * @param _track New value for member track
         */
        eProsima_user_DllExport void track(
                double _track);

        /*!
         * @brief This function returns the value of member track
         * @return Value of member track
         */
        eProsima_user_DllExport double track() const;

        /*!
         * @brief This function returns a reference to member track
         * @return Reference to member track
         */
        eProsima_user_DllExport double& track();

        /*!
         * @brief This function sets a value in member speed
         * @param _speed New value for member speed
         */
        eProsima_user_DllExport void speed(
                double _speed);

        /*!
         * @brief This function returns the value of member speed
         * @return Value of member speed
         */
        eProsima_user_DllExport double speed() const;

        /*!
         * @brief This function returns a reference to member speed
         * @return Reference to member speed
         */
        eProsima_user_DllExport double& speed();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Ncm::Gps& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_longitude;
        double m_latitude;
        double m_track;
        double m_speed;

    };
    /*!
     * @brief This class represents the enumeration ConnectionState defined by the user in the IDL file.
     * @ingroup NCM
     */
    enum ConnectionState : uint32_t
    {
        DISCONNECTED,
        CONNECTED_CELLULAR,
        CONNECTED_WAVE,
        ERRONEOUS_STATE
    };
    /*!
     * @brief This class represents the structure NeighborStation defined by the user in the IDL file.
     * @ingroup NCM
     */
    class NeighborStation
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport NeighborStation();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~NeighborStation();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Ncm::NeighborStation that will be copied.
         */
        eProsima_user_DllExport NeighborStation(
                const NeighborStation& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Ncm::NeighborStation that will be copied.
         */
        eProsima_user_DllExport NeighborStation(
                NeighborStation&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Ncm::NeighborStation that will be copied.
         */
        eProsima_user_DllExport NeighborStation& operator =(
                const NeighborStation& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Ncm::NeighborStation that will be copied.
         */
        eProsima_user_DllExport NeighborStation& operator =(
                NeighborStation&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::NeighborStation object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const NeighborStation& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::NeighborStation object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const NeighborStation& x) const;

        /*!
         * @brief This function sets a value in member identification
         * @param _identification New value for member identification
         */
        eProsima_user_DllExport void identification(
                int32_t _identification);

        /*!
         * @brief This function returns the value of member identification
         * @return Value of member identification
         */
        eProsima_user_DllExport int32_t identification() const;

        /*!
         * @brief This function returns a reference to member identification
         * @return Reference to member identification
         */
        eProsima_user_DllExport int32_t& identification();

        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const Ncm::Gps& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                Ncm::Gps&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const Ncm::Gps& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport Ncm::Gps& location();
        /*!
         * @brief This function sets a value in member in_range
         * @param _in_range New value for member in_range
         */
        eProsima_user_DllExport void in_range(
                bool _in_range);

        /*!
         * @brief This function returns the value of member in_range
         * @return Value of member in_range
         */
        eProsima_user_DllExport bool in_range() const;

        /*!
         * @brief This function returns a reference to member in_range
         * @return Reference to member in_range
         */
        eProsima_user_DllExport bool& in_range();

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                int64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport int64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport int64_t& timestamp();

        /*!
         * @brief This function sets a value in member signal
         * @param _signal New value for member signal
         */
        eProsima_user_DllExport void signal(
                int32_t _signal);

        /*!
         * @brief This function returns the value of member signal
         * @return Value of member signal
         */
        eProsima_user_DllExport int32_t signal() const;

        /*!
         * @brief This function returns a reference to member signal
         * @return Reference to member signal
         */
        eProsima_user_DllExport int32_t& signal();

        /*!
         * @brief This function sets a value in member average_signal
         * @param _average_signal New value for member average_signal
         */
        eProsima_user_DllExport void average_signal(
                int32_t _average_signal);

        /*!
         * @brief This function returns the value of member average_signal
         * @return Value of member average_signal
         */
        eProsima_user_DllExport int32_t average_signal() const;

        /*!
         * @brief This function returns a reference to member average_signal
         * @return Reference to member average_signal
         */
        eProsima_user_DllExport int32_t& average_signal();

        /*!
         * @brief This function sets a value in member azimuth
         * @param _azimuth New value for member azimuth
         */
        eProsima_user_DllExport void azimuth(
                double _azimuth);

        /*!
         * @brief This function returns the value of member azimuth
         * @return Value of member azimuth
         */
        eProsima_user_DllExport double azimuth() const;

        /*!
         * @brief This function returns a reference to member azimuth
         * @return Reference to member azimuth
         */
        eProsima_user_DllExport double& azimuth();

        /*!
         * @brief This function sets a value in member tx_rate
         * @param _tx_rate New value for member tx_rate
         */
        eProsima_user_DllExport void tx_rate(
                double _tx_rate);

        /*!
         * @brief This function returns the value of member tx_rate
         * @return Value of member tx_rate
         */
        eProsima_user_DllExport double tx_rate() const;

        /*!
         * @brief This function returns a reference to member tx_rate
         * @return Reference to member tx_rate
         */
        eProsima_user_DllExport double& tx_rate();

        /*!
         * @brief This function sets a value in member inactive_time
         * @param _inactive_time New value for member inactive_time
         */
        eProsima_user_DllExport void inactive_time(
                int32_t _inactive_time);

        /*!
         * @brief This function returns the value of member inactive_time
         * @return Value of member inactive_time
         */
        eProsima_user_DllExport int32_t inactive_time() const;

        /*!
         * @brief This function returns a reference to member inactive_time
         * @return Reference to member inactive_time
         */
        eProsima_user_DllExport int32_t& inactive_time();

        /*!
         * @brief This function sets a value in member i_throughput
         * @param _i_throughput New value for member i_throughput
         */
        eProsima_user_DllExport void i_throughput(
                double _i_throughput);

        /*!
         * @brief This function returns the value of member i_throughput
         * @return Value of member i_throughput
         */
        eProsima_user_DllExport double i_throughput() const;

        /*!
         * @brief This function returns a reference to member i_throughput
         * @return Reference to member i_throughput
         */
        eProsima_user_DllExport double& i_throughput();

        /*!
         * @brief This function sets a value in member d_throughput
         * @param _d_throughput New value for member d_throughput
         */
        eProsima_user_DllExport void d_throughput(
                double _d_throughput);

        /*!
         * @brief This function returns the value of member d_throughput
         * @return Value of member d_throughput
         */
        eProsima_user_DllExport double d_throughput() const;

        /*!
         * @brief This function returns a reference to member d_throughput
         * @return Reference to member d_throughput
         */
        eProsima_user_DllExport double& d_throughput();

        /*!
         * @brief This function sets a value in member rx_bytes
         * @param _rx_bytes New value for member rx_bytes
         */
        eProsima_user_DllExport void rx_bytes(
                int64_t _rx_bytes);

        /*!
         * @brief This function returns the value of member rx_bytes
         * @return Value of member rx_bytes
         */
        eProsima_user_DllExport int64_t rx_bytes() const;

        /*!
         * @brief This function returns a reference to member rx_bytes
         * @return Reference to member rx_bytes
         */
        eProsima_user_DllExport int64_t& rx_bytes();

        /*!
         * @brief This function sets a value in member tx_bytes
         * @param _tx_bytes New value for member tx_bytes
         */
        eProsima_user_DllExport void tx_bytes(
                int64_t _tx_bytes);

        /*!
         * @brief This function returns the value of member tx_bytes
         * @return Value of member tx_bytes
         */
        eProsima_user_DllExport int64_t tx_bytes() const;

        /*!
         * @brief This function returns a reference to member tx_bytes
         * @return Reference to member tx_bytes
         */
        eProsima_user_DllExport int64_t& tx_bytes();

        /*!
         * @brief This function sets a value in member tx_retries
         * @param _tx_retries New value for member tx_retries
         */
        eProsima_user_DllExport void tx_retries(
                int32_t _tx_retries);

        /*!
         * @brief This function returns the value of member tx_retries
         * @return Value of member tx_retries
         */
        eProsima_user_DllExport int32_t tx_retries() const;

        /*!
         * @brief This function returns a reference to member tx_retries
         * @return Reference to member tx_retries
         */
        eProsima_user_DllExport int32_t& tx_retries();

        /*!
         * @brief This function sets a value in member tx_fails
         * @param _tx_fails New value for member tx_fails
         */
        eProsima_user_DllExport void tx_fails(
                int32_t _tx_fails);

        /*!
         * @brief This function returns the value of member tx_fails
         * @return Value of member tx_fails
         */
        eProsima_user_DllExport int32_t tx_fails() const;

        /*!
         * @brief This function returns a reference to member tx_fails
         * @return Reference to member tx_fails
         */
        eProsima_user_DllExport int32_t& tx_fails();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Ncm::NeighborStation& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_identification;
        Ncm::Gps m_location;
        bool m_in_range;
        int64_t m_timestamp;
        int32_t m_signal;
        int32_t m_average_signal;
        double m_azimuth;
        double m_tx_rate;
        int32_t m_inactive_time;
        double m_i_throughput;
        double m_d_throughput;
        int64_t m_rx_bytes;
        int64_t m_tx_bytes;
        int32_t m_tx_retries;
        int32_t m_tx_fails;

    };
    /*!
     * @brief This class represents the enumeration HandoverType defined by the user in the IDL file.
     * @ingroup NCM
     */
    enum HandoverType : uint32_t
    {
        REGULAR_HANDOVER,
        SLOW_HANDOVER,
        ERRONEOUS_HANDOVER
    };
    /*!
     * @brief This class represents the structure Handover defined by the user in the IDL file.
     * @ingroup NCM
     */
    class Handover
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Handover();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Handover();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Ncm::Handover that will be copied.
         */
        eProsima_user_DllExport Handover(
                const Handover& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Ncm::Handover that will be copied.
         */
        eProsima_user_DllExport Handover(
                Handover&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Ncm::Handover that will be copied.
         */
        eProsima_user_DllExport Handover& operator =(
                const Handover& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Ncm::Handover that will be copied.
         */
        eProsima_user_DllExport Handover& operator =(
                Handover&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::Handover object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Handover& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::Handover object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Handover& x) const;

        /*!
         * @brief This function sets a value in member source_state
         * @param _source_state New value for member source_state
         */
        eProsima_user_DllExport void source_state(
                Ncm::ConnectionState _source_state);

        /*!
         * @brief This function returns the value of member source_state
         * @return Value of member source_state
         */
        eProsima_user_DllExport Ncm::ConnectionState source_state() const;

        /*!
         * @brief This function returns a reference to member source_state
         * @return Reference to member source_state
         */
        eProsima_user_DllExport Ncm::ConnectionState& source_state();

        /*!
         * @brief This function sets a value in member source_gateway_id
         * @param _source_gateway_id New value for member source_gateway_id
         */
        eProsima_user_DllExport void source_gateway_id(
                int32_t _source_gateway_id);

        /*!
         * @brief This function returns the value of member source_gateway_id
         * @return Value of member source_gateway_id
         */
        eProsima_user_DllExport int32_t source_gateway_id() const;

        /*!
         * @brief This function returns a reference to member source_gateway_id
         * @return Reference to member source_gateway_id
         */
        eProsima_user_DllExport int32_t& source_gateway_id();

        /*!
         * @brief This function sets a value in member destination_state
         * @param _destination_state New value for member destination_state
         */
        eProsima_user_DllExport void destination_state(
                Ncm::ConnectionState _destination_state);

        /*!
         * @brief This function returns the value of member destination_state
         * @return Value of member destination_state
         */
        eProsima_user_DllExport Ncm::ConnectionState destination_state() const;

        /*!
         * @brief This function returns a reference to member destination_state
         * @return Reference to member destination_state
         */
        eProsima_user_DllExport Ncm::ConnectionState& destination_state();

        /*!
         * @brief This function sets a value in member destination_gateway_id
         * @param _destination_gateway_id New value for member destination_gateway_id
         */
        eProsima_user_DllExport void destination_gateway_id(
                int32_t _destination_gateway_id);

        /*!
         * @brief This function returns the value of member destination_gateway_id
         * @return Value of member destination_gateway_id
         */
        eProsima_user_DllExport int32_t destination_gateway_id() const;

        /*!
         * @brief This function returns a reference to member destination_gateway_id
         * @return Reference to member destination_gateway_id
         */
        eProsima_user_DllExport int32_t& destination_gateway_id();

        /*!
         * @brief This function sets a value in member type
         * @param _type New value for member type
         */
        eProsima_user_DllExport void type(
                Ncm::HandoverType _type);

        /*!
         * @brief This function returns the value of member type
         * @return Value of member type
         */
        eProsima_user_DllExport Ncm::HandoverType type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport Ncm::HandoverType& type();

        /*!
         * @brief This function sets a value in member average_signal
         * @param _average_signal New value for member average_signal
         */
        eProsima_user_DllExport void average_signal(
                int32_t _average_signal);

        /*!
         * @brief This function returns the value of member average_signal
         * @return Value of member average_signal
         */
        eProsima_user_DllExport int32_t average_signal() const;

        /*!
         * @brief This function returns a reference to member average_signal
         * @return Reference to member average_signal
         */
        eProsima_user_DllExport int32_t& average_signal();

        /*!
         * @brief This function sets a value in member azimuth
         * @param _azimuth New value for member azimuth
         */
        eProsima_user_DllExport void azimuth(
                double _azimuth);

        /*!
         * @brief This function returns the value of member azimuth
         * @return Value of member azimuth
         */
        eProsima_user_DllExport double azimuth() const;

        /*!
         * @brief This function returns a reference to member azimuth
         * @return Reference to member azimuth
         */
        eProsima_user_DllExport double& azimuth();

        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const Ncm::Gps& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                Ncm::Gps&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const Ncm::Gps& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport Ncm::Gps& location();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Ncm::Handover& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Ncm::ConnectionState m_source_state;
        int32_t m_source_gateway_id;
        Ncm::ConnectionState m_destination_state;
        int32_t m_destination_gateway_id;
        Ncm::HandoverType m_type;
        int32_t m_average_signal;
        double m_azimuth;
        Ncm::Gps m_location;

    };
    /*!
     * @brief This class represents the structure State defined by the user in the IDL file.
     * @ingroup NCM
     */
    class State
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport State();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~State();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Ncm::State that will be copied.
         */
        eProsima_user_DllExport State(
                const State& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Ncm::State that will be copied.
         */
        eProsima_user_DllExport State(
                State&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Ncm::State that will be copied.
         */
        eProsima_user_DllExport State& operator =(
                const State& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Ncm::State that will be copied.
         */
        eProsima_user_DllExport State& operator =(
                State&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::State object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const State& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::State object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const State& x) const;

        /*!
         * @brief This function copies the value in member location
         * @param _location New value to be copied in member location
         */
        eProsima_user_DllExport void location(
                const Ncm::Gps& _location);

        /*!
         * @brief This function moves the value in member location
         * @param _location New value to be moved in member location
         */
        eProsima_user_DllExport void location(
                Ncm::Gps&& _location);

        /*!
         * @brief This function returns a constant reference to member location
         * @return Constant reference to member location
         */
        eProsima_user_DllExport const Ncm::Gps& location() const;

        /*!
         * @brief This function returns a reference to member location
         * @return Reference to member location
         */
        eProsima_user_DllExport Ncm::Gps& location();
        /*!
         * @brief This function sets a value in member connection_state
         * @param _connection_state New value for member connection_state
         */
        eProsima_user_DllExport void connection_state(
                Ncm::ConnectionState _connection_state);

        /*!
         * @brief This function returns the value of member connection_state
         * @return Value of member connection_state
         */
        eProsima_user_DllExport Ncm::ConnectionState connection_state() const;

        /*!
         * @brief This function returns a reference to member connection_state
         * @return Reference to member connection_state
         */
        eProsima_user_DllExport Ncm::ConnectionState& connection_state();

        /*!
         * @brief This function sets a value in member neighbor_station
         * @param _neighbor_station New value for member neighbor_station
         */
        eProsima_user_DllExport void neighbor_station(
                int32_t _neighbor_station);

        /*!
         * @brief This function returns the value of member neighbor_station
         * @return Value of member neighbor_station
         */
        eProsima_user_DllExport int32_t neighbor_station() const;

        /*!
         * @brief This function returns a reference to member neighbor_station
         * @return Reference to member neighbor_station
         */
        eProsima_user_DllExport int32_t& neighbor_station();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Ncm::State& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Ncm::Gps m_location;
        Ncm::ConnectionState m_connection_state;
        int32_t m_neighbor_station;

    };
    /*!
     * @brief This class represents the structure NcmStatus defined by the user in the IDL file.
     * @ingroup NCM
     */
    class NcmStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport NcmStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~NcmStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Ncm::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus(
                const NcmStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Ncm::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus(
                NcmStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Ncm::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus& operator =(
                const NcmStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Ncm::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus& operator =(
                NcmStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::NcmStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const NcmStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Ncm::NcmStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const NcmStatus& x) const;

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member state_item
         * @param _state_item New value to be copied in member state_item
         */
        eProsima_user_DllExport void state_item(
                const Ncm::State& _state_item);

        /*!
         * @brief This function moves the value in member state_item
         * @param _state_item New value to be moved in member state_item
         */
        eProsima_user_DllExport void state_item(
                Ncm::State&& _state_item);

        /*!
         * @brief This function returns a constant reference to member state_item
         * @return Constant reference to member state_item
         */
        eProsima_user_DllExport const Ncm::State& state_item() const;

        /*!
         * @brief This function returns a reference to member state_item
         * @return Reference to member state_item
         */
        eProsima_user_DllExport Ncm::State& state_item();
        /*!
         * @brief This function copies the value in member handover_item
         * @param _handover_item New value to be copied in member handover_item
         */
        eProsima_user_DllExport void handover_item(
                const Ncm::Handover& _handover_item);

        /*!
         * @brief This function moves the value in member handover_item
         * @param _handover_item New value to be moved in member handover_item
         */
        eProsima_user_DllExport void handover_item(
                Ncm::Handover&& _handover_item);

        /*!
         * @brief This function returns a constant reference to member handover_item
         * @return Constant reference to member handover_item
         */
        eProsima_user_DllExport const Ncm::Handover& handover_item() const;

        /*!
         * @brief This function returns a reference to member handover_item
         * @return Reference to member handover_item
         */
        eProsima_user_DllExport Ncm::Handover& handover_item();
        /*!
         * @brief This function copies the value in member stations
         * @param _stations New value to be copied in member stations
         */
        eProsima_user_DllExport void stations(
                const std::vector<Ncm::NeighborStation>& _stations);

        /*!
         * @brief This function moves the value in member stations
         * @param _stations New value to be moved in member stations
         */
        eProsima_user_DllExport void stations(
                std::vector<Ncm::NeighborStation>&& _stations);

        /*!
         * @brief This function returns a constant reference to member stations
         * @return Constant reference to member stations
         */
        eProsima_user_DllExport const std::vector<Ncm::NeighborStation>& stations() const;

        /*!
         * @brief This function returns a reference to member stations
         * @return Reference to member stations
         */
        eProsima_user_DllExport std::vector<Ncm::NeighborStation>& stations();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Ncm::NcmStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_timestamp;
        Ncm::State m_state_item;
        Ncm::Handover m_handover_item;
        std::vector<Ncm::NeighborStation> m_stations;

    };
} // namespace Ncm

#endif // _FAST_DDS_GENERATED_NCM_NCM_H_