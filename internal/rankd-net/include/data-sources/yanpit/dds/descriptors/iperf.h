// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file iperf.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_IPERF_IPERF_H_
#define _FAST_DDS_GENERATED_IPERF_IPERF_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(iperf_SOURCE)
#define iperf_DllAPI __declspec( dllexport )
#else
#define iperf_DllAPI __declspec( dllimport )
#endif // iperf_SOURCE
#else
#define iperf_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define iperf_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace Iperf {
    /*!
     * @brief This class represents the structure ConnectionStatus defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ConnectionStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ConnectionStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ConnectionStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ConnectionStatus that will be copied.
         */
        eProsima_user_DllExport ConnectionStatus(
                const ConnectionStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ConnectionStatus that will be copied.
         */
        eProsima_user_DllExport ConnectionStatus(
                ConnectionStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ConnectionStatus that will be copied.
         */
        eProsima_user_DllExport ConnectionStatus& operator =(
                const ConnectionStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ConnectionStatus that will be copied.
         */
        eProsima_user_DllExport ConnectionStatus& operator =(
                ConnectionStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ConnectionStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ConnectionStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ConnectionStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ConnectionStatus& x) const;

        /*!
         * @brief This function sets a value in member socket_number
         * @param _socket_number New value for member socket_number
         */
        eProsima_user_DllExport void socket_number(
                int32_t _socket_number);

        /*!
         * @brief This function returns the value of member socket_number
         * @return Value of member socket_number
         */
        eProsima_user_DllExport int32_t socket_number() const;

        /*!
         * @brief This function returns a reference to member socket_number
         * @return Reference to member socket_number
         */
        eProsima_user_DllExport int32_t& socket_number();

        /*!
         * @brief This function copies the value in member local_host
         * @param _local_host New value to be copied in member local_host
         */
        eProsima_user_DllExport void local_host(
                const std::string& _local_host);

        /*!
         * @brief This function moves the value in member local_host
         * @param _local_host New value to be moved in member local_host
         */
        eProsima_user_DllExport void local_host(
                std::string&& _local_host);

        /*!
         * @brief This function returns a constant reference to member local_host
         * @return Constant reference to member local_host
         */
        eProsima_user_DllExport const std::string& local_host() const;

        /*!
         * @brief This function returns a reference to member local_host
         * @return Reference to member local_host
         */
        eProsima_user_DllExport std::string& local_host();
        /*!
         * @brief This function sets a value in member local_port
         * @param _local_port New value for member local_port
         */
        eProsima_user_DllExport void local_port(
                uint32_t _local_port);

        /*!
         * @brief This function returns the value of member local_port
         * @return Value of member local_port
         */
        eProsima_user_DllExport uint32_t local_port() const;

        /*!
         * @brief This function returns a reference to member local_port
         * @return Reference to member local_port
         */
        eProsima_user_DllExport uint32_t& local_port();

        /*!
         * @brief This function copies the value in member remote_host
         * @param _remote_host New value to be copied in member remote_host
         */
        eProsima_user_DllExport void remote_host(
                const std::string& _remote_host);

        /*!
         * @brief This function moves the value in member remote_host
         * @param _remote_host New value to be moved in member remote_host
         */
        eProsima_user_DllExport void remote_host(
                std::string&& _remote_host);

        /*!
         * @brief This function returns a constant reference to member remote_host
         * @return Constant reference to member remote_host
         */
        eProsima_user_DllExport const std::string& remote_host() const;

        /*!
         * @brief This function returns a reference to member remote_host
         * @return Reference to member remote_host
         */
        eProsima_user_DllExport std::string& remote_host();
        /*!
         * @brief This function sets a value in member remote_port
         * @param _remote_port New value for member remote_port
         */
        eProsima_user_DllExport void remote_port(
                uint32_t _remote_port);

        /*!
         * @brief This function returns the value of member remote_port
         * @return Value of member remote_port
         */
        eProsima_user_DllExport uint32_t remote_port() const;

        /*!
         * @brief This function returns a reference to member remote_port
         * @return Reference to member remote_port
         */
        eProsima_user_DllExport uint32_t& remote_port();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ConnectionStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_socket_number;
        std::string m_local_host;
        uint32_t m_local_port;
        std::string m_remote_host;
        uint32_t m_remote_port;

    };
    /*!
     * @brief This class represents the structure ConnectionIntention defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ConnectionIntention
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ConnectionIntention();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ConnectionIntention();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ConnectionIntention that will be copied.
         */
        eProsima_user_DllExport ConnectionIntention(
                const ConnectionIntention& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ConnectionIntention that will be copied.
         */
        eProsima_user_DllExport ConnectionIntention(
                ConnectionIntention&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ConnectionIntention that will be copied.
         */
        eProsima_user_DllExport ConnectionIntention& operator =(
                const ConnectionIntention& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ConnectionIntention that will be copied.
         */
        eProsima_user_DllExport ConnectionIntention& operator =(
                ConnectionIntention&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ConnectionIntention object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ConnectionIntention& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ConnectionIntention object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ConnectionIntention& x) const;

        /*!
         * @brief This function copies the value in member host
         * @param _host New value to be copied in member host
         */
        eProsima_user_DllExport void host(
                const std::string& _host);

        /*!
         * @brief This function moves the value in member host
         * @param _host New value to be moved in member host
         */
        eProsima_user_DllExport void host(
                std::string&& _host);

        /*!
         * @brief This function returns a constant reference to member host
         * @return Constant reference to member host
         */
        eProsima_user_DllExport const std::string& host() const;

        /*!
         * @brief This function returns a reference to member host
         * @return Reference to member host
         */
        eProsima_user_DllExport std::string& host();
        /*!
         * @brief This function sets a value in member port
         * @param _port New value for member port
         */
        eProsima_user_DllExport void port(
                uint32_t _port);

        /*!
         * @brief This function returns the value of member port
         * @return Value of member port
         */
        eProsima_user_DllExport uint32_t port() const;

        /*!
         * @brief This function returns a reference to member port
         * @return Reference to member port
         */
        eProsima_user_DllExport uint32_t& port();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ConnectionIntention& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_host;
        uint32_t m_port;

    };
    /*!
     * @brief This class represents the structure Connection defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class Connection
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Connection();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Connection();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::Connection that will be copied.
         */
        eProsima_user_DllExport Connection(
                const Connection& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::Connection that will be copied.
         */
        eProsima_user_DllExport Connection(
                Connection&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::Connection that will be copied.
         */
        eProsima_user_DllExport Connection& operator =(
                const Connection& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::Connection that will be copied.
         */
        eProsima_user_DllExport Connection& operator =(
                Connection&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Connection object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Connection& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Connection object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Connection& x) const;

        /*!
         * @brief This function copies the value in member connections
         * @param _connections New value to be copied in member connections
         */
        eProsima_user_DllExport void connections(
                const std::vector<Iperf::ConnectionStatus>& _connections);

        /*!
         * @brief This function moves the value in member connections
         * @param _connections New value to be moved in member connections
         */
        eProsima_user_DllExport void connections(
                std::vector<Iperf::ConnectionStatus>&& _connections);

        /*!
         * @brief This function returns a constant reference to member connections
         * @return Constant reference to member connections
         */
        eProsima_user_DllExport const std::vector<Iperf::ConnectionStatus>& connections() const;

        /*!
         * @brief This function returns a reference to member connections
         * @return Reference to member connections
         */
        eProsima_user_DllExport std::vector<Iperf::ConnectionStatus>& connections();
        /*!
         * @brief This function copies the value in member intention
         * @param _intention New value to be copied in member intention
         */
        eProsima_user_DllExport void intention(
                const Iperf::ConnectionIntention& _intention);

        /*!
         * @brief This function moves the value in member intention
         * @param _intention New value to be moved in member intention
         */
        eProsima_user_DllExport void intention(
                Iperf::ConnectionIntention&& _intention);

        /*!
         * @brief This function returns a constant reference to member intention
         * @return Constant reference to member intention
         */
        eProsima_user_DllExport const Iperf::ConnectionIntention& intention() const;

        /*!
         * @brief This function returns a reference to member intention
         * @return Reference to member intention
         */
        eProsima_user_DllExport Iperf::ConnectionIntention& intention();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::Connection& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::vector<Iperf::ConnectionStatus> m_connections;
        Iperf::ConnectionIntention m_intention;

    };
    /*!
     * @brief This class represents the enumeration ProtocolType defined by the user in the IDL file.
     * @ingroup IPERF
     */
    enum ProtocolType : uint32_t
    {
        TCP,
        UDP
    };
    /*!
     * @brief This class represents the structure BootstrapInformation defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class BootstrapInformation
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport BootstrapInformation();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~BootstrapInformation();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::BootstrapInformation that will be copied.
         */
        eProsima_user_DllExport BootstrapInformation(
                const BootstrapInformation& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::BootstrapInformation that will be copied.
         */
        eProsima_user_DllExport BootstrapInformation(
                BootstrapInformation&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::BootstrapInformation that will be copied.
         */
        eProsima_user_DllExport BootstrapInformation& operator =(
                const BootstrapInformation& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::BootstrapInformation that will be copied.
         */
        eProsima_user_DllExport BootstrapInformation& operator =(
                BootstrapInformation&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::BootstrapInformation object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const BootstrapInformation& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::BootstrapInformation object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const BootstrapInformation& x) const;

        /*!
         * @brief This function copies the value in member version
         * @param _version New value to be copied in member version
         */
        eProsima_user_DllExport void version(
                const std::string& _version);

        /*!
         * @brief This function moves the value in member version
         * @param _version New value to be moved in member version
         */
        eProsima_user_DllExport void version(
                std::string&& _version);

        /*!
         * @brief This function returns a constant reference to member version
         * @return Constant reference to member version
         */
        eProsima_user_DllExport const std::string& version() const;

        /*!
         * @brief This function returns a reference to member version
         * @return Reference to member version
         */
        eProsima_user_DllExport std::string& version();
        /*!
         * @brief This function copies the value in member system_information
         * @param _system_information New value to be copied in member system_information
         */
        eProsima_user_DllExport void system_information(
                const std::string& _system_information);

        /*!
         * @brief This function moves the value in member system_information
         * @param _system_information New value to be moved in member system_information
         */
        eProsima_user_DllExport void system_information(
                std::string&& _system_information);

        /*!
         * @brief This function returns a constant reference to member system_information
         * @return Constant reference to member system_information
         */
        eProsima_user_DllExport const std::string& system_information() const;

        /*!
         * @brief This function returns a reference to member system_information
         * @return Reference to member system_information
         */
        eProsima_user_DllExport std::string& system_information();
        /*!
         * @brief This function sets a value in member tcp_mss_default
         * @param _tcp_mss_default New value for member tcp_mss_default
         */
        eProsima_user_DllExport void tcp_mss_default(
                int32_t _tcp_mss_default);

        /*!
         * @brief This function returns the value of member tcp_mss_default
         * @return Value of member tcp_mss_default
         */
        eProsima_user_DllExport int32_t tcp_mss_default() const;

        /*!
         * @brief This function returns a reference to member tcp_mss_default
         * @return Reference to member tcp_mss_default
         */
        eProsima_user_DllExport int32_t& tcp_mss_default();

        /*!
         * @brief This function sets a value in member target_bitrate
         * @param _target_bitrate New value for member target_bitrate
         */
        eProsima_user_DllExport void target_bitrate(
                double _target_bitrate);

        /*!
         * @brief This function returns the value of member target_bitrate
         * @return Value of member target_bitrate
         */
        eProsima_user_DllExport double target_bitrate() const;

        /*!
         * @brief This function returns a reference to member target_bitrate
         * @return Reference to member target_bitrate
         */
        eProsima_user_DllExport double& target_bitrate();

        /*!
         * @brief This function sets a value in member sock_bufsize
         * @param _sock_bufsize New value for member sock_bufsize
         */
        eProsima_user_DllExport void sock_bufsize(
                int32_t _sock_bufsize);

        /*!
         * @brief This function returns the value of member sock_bufsize
         * @return Value of member sock_bufsize
         */
        eProsima_user_DllExport int32_t sock_bufsize() const;

        /*!
         * @brief This function returns a reference to member sock_bufsize
         * @return Reference to member sock_bufsize
         */
        eProsima_user_DllExport int32_t& sock_bufsize();

        /*!
         * @brief This function sets a value in member sndbuf_actual
         * @param _sndbuf_actual New value for member sndbuf_actual
         */
        eProsima_user_DllExport void sndbuf_actual(
                int32_t _sndbuf_actual);

        /*!
         * @brief This function returns the value of member sndbuf_actual
         * @return Value of member sndbuf_actual
         */
        eProsima_user_DllExport int32_t sndbuf_actual() const;

        /*!
         * @brief This function returns a reference to member sndbuf_actual
         * @return Reference to member sndbuf_actual
         */
        eProsima_user_DllExport int32_t& sndbuf_actual();

        /*!
         * @brief This function sets a value in member rcvbuf_actual
         * @param _rcvbuf_actual New value for member rcvbuf_actual
         */
        eProsima_user_DllExport void rcvbuf_actual(
                int32_t _rcvbuf_actual);

        /*!
         * @brief This function returns the value of member rcvbuf_actual
         * @return Value of member rcvbuf_actual
         */
        eProsima_user_DllExport int32_t rcvbuf_actual() const;

        /*!
         * @brief This function returns a reference to member rcvbuf_actual
         * @return Reference to member rcvbuf_actual
         */
        eProsima_user_DllExport int32_t& rcvbuf_actual();

        /*!
         * @brief This function sets a value in member protocol
         * @param _protocol New value for member protocol
         */
        eProsima_user_DllExport void protocol(
                Iperf::ProtocolType _protocol);

        /*!
         * @brief This function returns the value of member protocol
         * @return Value of member protocol
         */
        eProsima_user_DllExport Iperf::ProtocolType protocol() const;

        /*!
         * @brief This function returns a reference to member protocol
         * @return Reference to member protocol
         */
        eProsima_user_DllExport Iperf::ProtocolType& protocol();

        /*!
         * @brief This function sets a value in member number_of_streams
         * @param _number_of_streams New value for member number_of_streams
         */
        eProsima_user_DllExport void number_of_streams(
                int32_t _number_of_streams);

        /*!
         * @brief This function returns the value of member number_of_streams
         * @return Value of member number_of_streams
         */
        eProsima_user_DllExport int32_t number_of_streams() const;

        /*!
         * @brief This function returns a reference to member number_of_streams
         * @return Reference to member number_of_streams
         */
        eProsima_user_DllExport int32_t& number_of_streams();

        /*!
         * @brief This function sets a value in member block_size
         * @param _block_size New value for member block_size
         */
        eProsima_user_DllExport void block_size(
                int32_t _block_size);

        /*!
         * @brief This function returns the value of member block_size
         * @return Value of member block_size
         */
        eProsima_user_DllExport int32_t block_size() const;

        /*!
         * @brief This function returns a reference to member block_size
         * @return Reference to member block_size
         */
        eProsima_user_DllExport int32_t& block_size();

        /*!
         * @brief This function sets a value in member omitted_seconds
         * @param _omitted_seconds New value for member omitted_seconds
         */
        eProsima_user_DllExport void omitted_seconds(
                int32_t _omitted_seconds);

        /*!
         * @brief This function returns the value of member omitted_seconds
         * @return Value of member omitted_seconds
         */
        eProsima_user_DllExport int32_t omitted_seconds() const;

        /*!
         * @brief This function returns a reference to member omitted_seconds
         * @return Reference to member omitted_seconds
         */
        eProsima_user_DllExport int32_t& omitted_seconds();

        /*!
         * @brief This function sets a value in member duration
         * @param _duration New value for member duration
         */
        eProsima_user_DllExport void duration(
                int32_t _duration);

        /*!
         * @brief This function returns the value of member duration
         * @return Value of member duration
         */
        eProsima_user_DllExport int32_t duration() const;

        /*!
         * @brief This function returns a reference to member duration
         * @return Reference to member duration
         */
        eProsima_user_DllExport int32_t& duration();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                int32_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport int32_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport int32_t& bytes();

        /*!
         * @brief This function sets a value in member blocks
         * @param _blocks New value for member blocks
         */
        eProsima_user_DllExport void blocks(
                int32_t _blocks);

        /*!
         * @brief This function returns the value of member blocks
         * @return Value of member blocks
         */
        eProsima_user_DllExport int32_t blocks() const;

        /*!
         * @brief This function returns a reference to member blocks
         * @return Reference to member blocks
         */
        eProsima_user_DllExport int32_t& blocks();

        /*!
         * @brief This function sets a value in member reverse_mode
         * @param _reverse_mode New value for member reverse_mode
         */
        eProsima_user_DllExport void reverse_mode(
                bool _reverse_mode);

        /*!
         * @brief This function returns the value of member reverse_mode
         * @return Value of member reverse_mode
         */
        eProsima_user_DllExport bool reverse_mode() const;

        /*!
         * @brief This function returns a reference to member reverse_mode
         * @return Reference to member reverse_mode
         */
        eProsima_user_DllExport bool& reverse_mode();

        /*!
         * @brief This function sets a value in member tos
         * @param _tos New value for member tos
         */
        eProsima_user_DllExport void tos(
                int32_t _tos);

        /*!
         * @brief This function returns the value of member tos
         * @return Value of member tos
         */
        eProsima_user_DllExport int32_t tos() const;

        /*!
         * @brief This function returns a reference to member tos
         * @return Reference to member tos
         */
        eProsima_user_DllExport int32_t& tos();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::BootstrapInformation& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_version;
        std::string m_system_information;
        int32_t m_tcp_mss_default;
        double m_target_bitrate;
        int32_t m_sock_bufsize;
        int32_t m_sndbuf_actual;
        int32_t m_rcvbuf_actual;
        Iperf::ProtocolType m_protocol;
        int32_t m_number_of_streams;
        int32_t m_block_size;
        int32_t m_omitted_seconds;
        int32_t m_duration;
        int32_t m_bytes;
        int32_t m_blocks;
        bool m_reverse_mode;
        int32_t m_tos;

    };
    /*!
     * @brief This class represents the structure Header defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class Header
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Header();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Header();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::Header that will be copied.
         */
        eProsima_user_DllExport Header(
                const Header& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::Header that will be copied.
         */
        eProsima_user_DllExport Header(
                Header&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::Header that will be copied.
         */
        eProsima_user_DllExport Header& operator =(
                const Header& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::Header that will be copied.
         */
        eProsima_user_DllExport Header& operator =(
                Header&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Header object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Header& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Header object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Header& x) const;

        /*!
         * @brief This function copies the value in member cookie
         * @param _cookie New value to be copied in member cookie
         */
        eProsima_user_DllExport void cookie(
                const std::string& _cookie);

        /*!
         * @brief This function moves the value in member cookie
         * @param _cookie New value to be moved in member cookie
         */
        eProsima_user_DllExport void cookie(
                std::string&& _cookie);

        /*!
         * @brief This function returns a constant reference to member cookie
         * @return Constant reference to member cookie
         */
        eProsima_user_DllExport const std::string& cookie() const;

        /*!
         * @brief This function returns a reference to member cookie
         * @return Reference to member cookie
         */
        eProsima_user_DllExport std::string& cookie();
        /*!
         * @brief This function copies the value in member connection_item
         * @param _connection_item New value to be copied in member connection_item
         */
        eProsima_user_DllExport void connection_item(
                const Iperf::Connection& _connection_item);

        /*!
         * @brief This function moves the value in member connection_item
         * @param _connection_item New value to be moved in member connection_item
         */
        eProsima_user_DllExport void connection_item(
                Iperf::Connection&& _connection_item);

        /*!
         * @brief This function returns a constant reference to member connection_item
         * @return Constant reference to member connection_item
         */
        eProsima_user_DllExport const Iperf::Connection& connection_item() const;

        /*!
         * @brief This function returns a reference to member connection_item
         * @return Reference to member connection_item
         */
        eProsima_user_DllExport Iperf::Connection& connection_item();
        /*!
         * @brief This function copies the value in member information
         * @param _information New value to be copied in member information
         */
        eProsima_user_DllExport void information(
                const Iperf::BootstrapInformation& _information);

        /*!
         * @brief This function moves the value in member information
         * @param _information New value to be moved in member information
         */
        eProsima_user_DllExport void information(
                Iperf::BootstrapInformation&& _information);

        /*!
         * @brief This function returns a constant reference to member information
         * @return Constant reference to member information
         */
        eProsima_user_DllExport const Iperf::BootstrapInformation& information() const;

        /*!
         * @brief This function returns a reference to member information
         * @return Reference to member information
         */
        eProsima_user_DllExport Iperf::BootstrapInformation& information();
        /*!
         * @brief This function sets a value in member starting_time
         * @param _starting_time New value for member starting_time
         */
        eProsima_user_DllExport void starting_time(
                int64_t _starting_time);

        /*!
         * @brief This function returns the value of member starting_time
         * @return Value of member starting_time
         */
        eProsima_user_DllExport int64_t starting_time() const;

        /*!
         * @brief This function returns a reference to member starting_time
         * @return Reference to member starting_time
         */
        eProsima_user_DllExport int64_t& starting_time();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::Header& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::string m_cookie;
        Iperf::Connection m_connection_item;
        Iperf::BootstrapInformation m_information;
        int64_t m_starting_time;

    };
    /*!
     * @brief This class represents the structure Stream defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class Stream
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Stream();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Stream();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::Stream that will be copied.
         */
        eProsima_user_DllExport Stream(
                const Stream& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::Stream that will be copied.
         */
        eProsima_user_DllExport Stream(
                Stream&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::Stream that will be copied.
         */
        eProsima_user_DllExport Stream& operator =(
                const Stream& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::Stream that will be copied.
         */
        eProsima_user_DllExport Stream& operator =(
                Stream&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Stream object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Stream& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Stream object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Stream& x) const;

        /*!
         * @brief This function sets a value in member socket_number
         * @param _socket_number New value for member socket_number
         */
        eProsima_user_DllExport void socket_number(
                int32_t _socket_number);

        /*!
         * @brief This function returns the value of member socket_number
         * @return Value of member socket_number
         */
        eProsima_user_DllExport int32_t socket_number() const;

        /*!
         * @brief This function returns a reference to member socket_number
         * @return Reference to member socket_number
         */
        eProsima_user_DllExport int32_t& socket_number();

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();

        /*!
         * @brief This function sets a value in member omitted
         * @param _omitted New value for member omitted
         */
        eProsima_user_DllExport void omitted(
                bool _omitted);

        /*!
         * @brief This function returns the value of member omitted
         * @return Value of member omitted
         */
        eProsima_user_DllExport bool omitted() const;

        /*!
         * @brief This function returns a reference to member omitted
         * @return Reference to member omitted
         */
        eProsima_user_DllExport bool& omitted();

        /*!
         * @brief This function sets a value in member sender
         * @param _sender New value for member sender
         */
        eProsima_user_DllExport void sender(
                bool _sender);

        /*!
         * @brief This function returns the value of member sender
         * @return Value of member sender
         */
        eProsima_user_DllExport bool sender() const;

        /*!
         * @brief This function returns a reference to member sender
         * @return Reference to member sender
         */
        eProsima_user_DllExport bool& sender();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::Stream& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_socket_number;
        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;
        bool m_omitted;
        bool m_sender;

    };
    /*!
     * @brief This class represents the structure Interval defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class Interval
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Interval();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Interval();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::Interval that will be copied.
         */
        eProsima_user_DllExport Interval(
                const Interval& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::Interval that will be copied.
         */
        eProsima_user_DllExport Interval(
                Interval&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::Interval that will be copied.
         */
        eProsima_user_DllExport Interval& operator =(
                const Interval& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::Interval that will be copied.
         */
        eProsima_user_DllExport Interval& operator =(
                Interval&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Interval object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Interval& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Interval object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Interval& x) const;

        /*!
         * @brief This function copies the value in member streams
         * @param _streams New value to be copied in member streams
         */
        eProsima_user_DllExport void streams(
                const std::vector<Iperf::Stream>& _streams);

        /*!
         * @brief This function moves the value in member streams
         * @param _streams New value to be moved in member streams
         */
        eProsima_user_DllExport void streams(
                std::vector<Iperf::Stream>&& _streams);

        /*!
         * @brief This function returns a constant reference to member streams
         * @return Constant reference to member streams
         */
        eProsima_user_DllExport const std::vector<Iperf::Stream>& streams() const;

        /*!
         * @brief This function returns a reference to member streams
         * @return Reference to member streams
         */
        eProsima_user_DllExport std::vector<Iperf::Stream>& streams();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::Interval& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::vector<Iperf::Stream> m_streams;

    };
    /*!
     * @brief This class represents the structure CumulativeInterval defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class CumulativeInterval
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport CumulativeInterval();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~CumulativeInterval();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::CumulativeInterval that will be copied.
         */
        eProsima_user_DllExport CumulativeInterval(
                const CumulativeInterval& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::CumulativeInterval that will be copied.
         */
        eProsima_user_DllExport CumulativeInterval(
                CumulativeInterval&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::CumulativeInterval that will be copied.
         */
        eProsima_user_DllExport CumulativeInterval& operator =(
                const CumulativeInterval& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::CumulativeInterval that will be copied.
         */
        eProsima_user_DllExport CumulativeInterval& operator =(
                CumulativeInterval&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::CumulativeInterval object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const CumulativeInterval& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::CumulativeInterval object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const CumulativeInterval& x) const;

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::CumulativeInterval& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;

    };
    /*!
     * @brief This class represents the structure ReportedSendingStream defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedSendingStream
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedSendingStream();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedSendingStream();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedSendingStream that will be copied.
         */
        eProsima_user_DllExport ReportedSendingStream(
                const ReportedSendingStream& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedSendingStream that will be copied.
         */
        eProsima_user_DllExport ReportedSendingStream(
                ReportedSendingStream&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedSendingStream that will be copied.
         */
        eProsima_user_DllExport ReportedSendingStream& operator =(
                const ReportedSendingStream& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedSendingStream that will be copied.
         */
        eProsima_user_DllExport ReportedSendingStream& operator =(
                ReportedSendingStream&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSendingStream object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedSendingStream& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSendingStream object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedSendingStream& x) const;

        /*!
         * @brief This function sets a value in member socket_number
         * @param _socket_number New value for member socket_number
         */
        eProsima_user_DllExport void socket_number(
                int32_t _socket_number);

        /*!
         * @brief This function returns the value of member socket_number
         * @return Value of member socket_number
         */
        eProsima_user_DllExport int32_t socket_number() const;

        /*!
         * @brief This function returns a reference to member socket_number
         * @return Reference to member socket_number
         */
        eProsima_user_DllExport int32_t& socket_number();

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();

        /*!
         * @brief This function sets a value in member sender
         * @param _sender New value for member sender
         */
        eProsima_user_DllExport void sender(
                bool _sender);

        /*!
         * @brief This function returns the value of member sender
         * @return Value of member sender
         */
        eProsima_user_DllExport bool sender() const;

        /*!
         * @brief This function returns a reference to member sender
         * @return Reference to member sender
         */
        eProsima_user_DllExport bool& sender();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedSendingStream& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_socket_number;
        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;
        bool m_sender;

    };
    /*!
     * @brief This class represents the structure ReportedReceivingStream defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedReceivingStream
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedReceivingStream();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedReceivingStream();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedReceivingStream that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingStream(
                const ReportedReceivingStream& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedReceivingStream that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingStream(
                ReportedReceivingStream&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedReceivingStream that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingStream& operator =(
                const ReportedReceivingStream& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedReceivingStream that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingStream& operator =(
                ReportedReceivingStream&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedReceivingStream object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedReceivingStream& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedReceivingStream object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedReceivingStream& x) const;

        /*!
         * @brief This function sets a value in member socket_number
         * @param _socket_number New value for member socket_number
         */
        eProsima_user_DllExport void socket_number(
                int32_t _socket_number);

        /*!
         * @brief This function returns the value of member socket_number
         * @return Value of member socket_number
         */
        eProsima_user_DllExport int32_t socket_number() const;

        /*!
         * @brief This function returns a reference to member socket_number
         * @return Reference to member socket_number
         */
        eProsima_user_DllExport int32_t& socket_number();

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();

        /*!
         * @brief This function sets a value in member sender
         * @param _sender New value for member sender
         */
        eProsima_user_DllExport void sender(
                bool _sender);

        /*!
         * @brief This function returns the value of member sender
         * @return Value of member sender
         */
        eProsima_user_DllExport bool sender() const;

        /*!
         * @brief This function returns a reference to member sender
         * @return Reference to member sender
         */
        eProsima_user_DllExport bool& sender();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedReceivingStream& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int32_t m_socket_number;
        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;
        bool m_sender;

    };
    /*!
     * @brief This class represents the structure ReportedStreamsPair defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedStreamsPair
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedStreamsPair();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedStreamsPair();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedStreamsPair that will be copied.
         */
        eProsima_user_DllExport ReportedStreamsPair(
                const ReportedStreamsPair& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedStreamsPair that will be copied.
         */
        eProsima_user_DllExport ReportedStreamsPair(
                ReportedStreamsPair&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedStreamsPair that will be copied.
         */
        eProsima_user_DllExport ReportedStreamsPair& operator =(
                const ReportedStreamsPair& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedStreamsPair that will be copied.
         */
        eProsima_user_DllExport ReportedStreamsPair& operator =(
                ReportedStreamsPair&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedStreamsPair object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedStreamsPair& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedStreamsPair object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedStreamsPair& x) const;

        /*!
         * @brief This function copies the value in member sending_stream
         * @param _sending_stream New value to be copied in member sending_stream
         */
        eProsima_user_DllExport void sending_stream(
                const Iperf::ReportedSendingStream& _sending_stream);

        /*!
         * @brief This function moves the value in member sending_stream
         * @param _sending_stream New value to be moved in member sending_stream
         */
        eProsima_user_DllExport void sending_stream(
                Iperf::ReportedSendingStream&& _sending_stream);

        /*!
         * @brief This function returns a constant reference to member sending_stream
         * @return Constant reference to member sending_stream
         */
        eProsima_user_DllExport const Iperf::ReportedSendingStream& sending_stream() const;

        /*!
         * @brief This function returns a reference to member sending_stream
         * @return Reference to member sending_stream
         */
        eProsima_user_DllExport Iperf::ReportedSendingStream& sending_stream();
        /*!
         * @brief This function copies the value in member receiving_stream
         * @param _receiving_stream New value to be copied in member receiving_stream
         */
        eProsima_user_DllExport void receiving_stream(
                const Iperf::ReportedReceivingStream& _receiving_stream);

        /*!
         * @brief This function moves the value in member receiving_stream
         * @param _receiving_stream New value to be moved in member receiving_stream
         */
        eProsima_user_DllExport void receiving_stream(
                Iperf::ReportedReceivingStream&& _receiving_stream);

        /*!
         * @brief This function returns a constant reference to member receiving_stream
         * @return Constant reference to member receiving_stream
         */
        eProsima_user_DllExport const Iperf::ReportedReceivingStream& receiving_stream() const;

        /*!
         * @brief This function returns a reference to member receiving_stream
         * @return Reference to member receiving_stream
         */
        eProsima_user_DllExport Iperf::ReportedReceivingStream& receiving_stream();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedStreamsPair& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Iperf::ReportedSendingStream m_sending_stream;
        Iperf::ReportedReceivingStream m_receiving_stream;

    };
    /*!
     * @brief This class represents the structure ReportedSendingSummary defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedSendingSummary
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedSendingSummary();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedSendingSummary();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedSendingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedSendingSummary(
                const ReportedSendingSummary& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedSendingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedSendingSummary(
                ReportedSendingSummary&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedSendingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedSendingSummary& operator =(
                const ReportedSendingSummary& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedSendingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedSendingSummary& operator =(
                ReportedSendingSummary&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSendingSummary object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedSendingSummary& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSendingSummary object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedSendingSummary& x) const;

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();

        /*!
         * @brief This function sets a value in member sender
         * @param _sender New value for member sender
         */
        eProsima_user_DllExport void sender(
                bool _sender);

        /*!
         * @brief This function returns the value of member sender
         * @return Value of member sender
         */
        eProsima_user_DllExport bool sender() const;

        /*!
         * @brief This function returns a reference to member sender
         * @return Reference to member sender
         */
        eProsima_user_DllExport bool& sender();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedSendingSummary& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;
        bool m_sender;

    };
    /*!
     * @brief This class represents the structure ReportedReceivingSummary defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedReceivingSummary
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedReceivingSummary();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedReceivingSummary();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedReceivingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingSummary(
                const ReportedReceivingSummary& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedReceivingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingSummary(
                ReportedReceivingSummary&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedReceivingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingSummary& operator =(
                const ReportedReceivingSummary& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedReceivingSummary that will be copied.
         */
        eProsima_user_DllExport ReportedReceivingSummary& operator =(
                ReportedReceivingSummary&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedReceivingSummary object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedReceivingSummary& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedReceivingSummary object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedReceivingSummary& x) const;

        /*!
         * @brief This function sets a value in member start
         * @param _start New value for member start
         */
        eProsima_user_DllExport void start(
                double _start);

        /*!
         * @brief This function returns the value of member start
         * @return Value of member start
         */
        eProsima_user_DllExport double start() const;

        /*!
         * @brief This function returns a reference to member start
         * @return Reference to member start
         */
        eProsima_user_DllExport double& start();

        /*!
         * @brief This function sets a value in member end
         * @param _end New value for member end
         */
        eProsima_user_DllExport void end(
                double _end);

        /*!
         * @brief This function returns the value of member end
         * @return Value of member end
         */
        eProsima_user_DllExport double end() const;

        /*!
         * @brief This function returns a reference to member end
         * @return Reference to member end
         */
        eProsima_user_DllExport double& end();

        /*!
         * @brief This function sets a value in member range
         * @param _range New value for member range
         */
        eProsima_user_DllExport void range(
                double _range);

        /*!
         * @brief This function returns the value of member range
         * @return Value of member range
         */
        eProsima_user_DllExport double range() const;

        /*!
         * @brief This function returns a reference to member range
         * @return Reference to member range
         */
        eProsima_user_DllExport double& range();

        /*!
         * @brief This function sets a value in member bytes
         * @param _bytes New value for member bytes
         */
        eProsima_user_DllExport void bytes(
                uint64_t _bytes);

        /*!
         * @brief This function returns the value of member bytes
         * @return Value of member bytes
         */
        eProsima_user_DllExport uint64_t bytes() const;

        /*!
         * @brief This function returns a reference to member bytes
         * @return Reference to member bytes
         */
        eProsima_user_DllExport uint64_t& bytes();

        /*!
         * @brief This function sets a value in member bits_per_second
         * @param _bits_per_second New value for member bits_per_second
         */
        eProsima_user_DllExport void bits_per_second(
                double _bits_per_second);

        /*!
         * @brief This function returns the value of member bits_per_second
         * @return Value of member bits_per_second
         */
        eProsima_user_DllExport double bits_per_second() const;

        /*!
         * @brief This function returns a reference to member bits_per_second
         * @return Reference to member bits_per_second
         */
        eProsima_user_DllExport double& bits_per_second();

        /*!
         * @brief This function sets a value in member sender
         * @param _sender New value for member sender
         */
        eProsima_user_DllExport void sender(
                bool _sender);

        /*!
         * @brief This function returns the value of member sender
         * @return Value of member sender
         */
        eProsima_user_DllExport bool sender() const;

        /*!
         * @brief This function returns a reference to member sender
         * @return Reference to member sender
         */
        eProsima_user_DllExport bool& sender();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedReceivingSummary& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_start;
        double m_end;
        double m_range;
        uint64_t m_bytes;
        double m_bits_per_second;
        bool m_sender;

    };
    /*!
     * @brief This class represents the structure ReportedSummariesPair defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ReportedSummariesPair
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ReportedSummariesPair();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ReportedSummariesPair();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ReportedSummariesPair that will be copied.
         */
        eProsima_user_DllExport ReportedSummariesPair(
                const ReportedSummariesPair& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ReportedSummariesPair that will be copied.
         */
        eProsima_user_DllExport ReportedSummariesPair(
                ReportedSummariesPair&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ReportedSummariesPair that will be copied.
         */
        eProsima_user_DllExport ReportedSummariesPair& operator =(
                const ReportedSummariesPair& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ReportedSummariesPair that will be copied.
         */
        eProsima_user_DllExport ReportedSummariesPair& operator =(
                ReportedSummariesPair&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSummariesPair object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ReportedSummariesPair& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ReportedSummariesPair object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ReportedSummariesPair& x) const;

        /*!
         * @brief This function copies the value in member sending_summary
         * @param _sending_summary New value to be copied in member sending_summary
         */
        eProsima_user_DllExport void sending_summary(
                const Iperf::ReportedSendingSummary& _sending_summary);

        /*!
         * @brief This function moves the value in member sending_summary
         * @param _sending_summary New value to be moved in member sending_summary
         */
        eProsima_user_DllExport void sending_summary(
                Iperf::ReportedSendingSummary&& _sending_summary);

        /*!
         * @brief This function returns a constant reference to member sending_summary
         * @return Constant reference to member sending_summary
         */
        eProsima_user_DllExport const Iperf::ReportedSendingSummary& sending_summary() const;

        /*!
         * @brief This function returns a reference to member sending_summary
         * @return Reference to member sending_summary
         */
        eProsima_user_DllExport Iperf::ReportedSendingSummary& sending_summary();
        /*!
         * @brief This function copies the value in member receiving_summary
         * @param _receiving_summary New value to be copied in member receiving_summary
         */
        eProsima_user_DllExport void receiving_summary(
                const Iperf::ReportedReceivingSummary& _receiving_summary);

        /*!
         * @brief This function moves the value in member receiving_summary
         * @param _receiving_summary New value to be moved in member receiving_summary
         */
        eProsima_user_DllExport void receiving_summary(
                Iperf::ReportedReceivingSummary&& _receiving_summary);

        /*!
         * @brief This function returns a constant reference to member receiving_summary
         * @return Constant reference to member receiving_summary
         */
        eProsima_user_DllExport const Iperf::ReportedReceivingSummary& receiving_summary() const;

        /*!
         * @brief This function returns a reference to member receiving_summary
         * @return Reference to member receiving_summary
         */
        eProsima_user_DllExport Iperf::ReportedReceivingSummary& receiving_summary();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ReportedSummariesPair& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Iperf::ReportedSendingSummary m_sending_summary;
        Iperf::ReportedReceivingSummary m_receiving_summary;

    };
    /*!
     * @brief This class represents the structure ResourceStatistics defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class ResourceStatistics
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ResourceStatistics();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ResourceStatistics();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::ResourceStatistics that will be copied.
         */
        eProsima_user_DllExport ResourceStatistics(
                const ResourceStatistics& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::ResourceStatistics that will be copied.
         */
        eProsima_user_DllExport ResourceStatistics(
                ResourceStatistics&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::ResourceStatistics that will be copied.
         */
        eProsima_user_DllExport ResourceStatistics& operator =(
                const ResourceStatistics& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::ResourceStatistics that will be copied.
         */
        eProsima_user_DllExport ResourceStatistics& operator =(
                ResourceStatistics&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ResourceStatistics object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ResourceStatistics& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::ResourceStatistics object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ResourceStatistics& x) const;

        /*!
         * @brief This function sets a value in member host_total
         * @param _host_total New value for member host_total
         */
        eProsima_user_DllExport void host_total(
                double _host_total);

        /*!
         * @brief This function returns the value of member host_total
         * @return Value of member host_total
         */
        eProsima_user_DllExport double host_total() const;

        /*!
         * @brief This function returns a reference to member host_total
         * @return Reference to member host_total
         */
        eProsima_user_DllExport double& host_total();

        /*!
         * @brief This function sets a value in member host_user
         * @param _host_user New value for member host_user
         */
        eProsima_user_DllExport void host_user(
                double _host_user);

        /*!
         * @brief This function returns the value of member host_user
         * @return Value of member host_user
         */
        eProsima_user_DllExport double host_user() const;

        /*!
         * @brief This function returns a reference to member host_user
         * @return Reference to member host_user
         */
        eProsima_user_DllExport double& host_user();

        /*!
         * @brief This function sets a value in member host_system
         * @param _host_system New value for member host_system
         */
        eProsima_user_DllExport void host_system(
                double _host_system);

        /*!
         * @brief This function returns the value of member host_system
         * @return Value of member host_system
         */
        eProsima_user_DllExport double host_system() const;

        /*!
         * @brief This function returns a reference to member host_system
         * @return Reference to member host_system
         */
        eProsima_user_DllExport double& host_system();

        /*!
         * @brief This function sets a value in member remote_total
         * @param _remote_total New value for member remote_total
         */
        eProsima_user_DllExport void remote_total(
                double _remote_total);

        /*!
         * @brief This function returns the value of member remote_total
         * @return Value of member remote_total
         */
        eProsima_user_DllExport double remote_total() const;

        /*!
         * @brief This function returns a reference to member remote_total
         * @return Reference to member remote_total
         */
        eProsima_user_DllExport double& remote_total();

        /*!
         * @brief This function sets a value in member remote_user
         * @param _remote_user New value for member remote_user
         */
        eProsima_user_DllExport void remote_user(
                double _remote_user);

        /*!
         * @brief This function returns the value of member remote_user
         * @return Value of member remote_user
         */
        eProsima_user_DllExport double remote_user() const;

        /*!
         * @brief This function returns a reference to member remote_user
         * @return Reference to member remote_user
         */
        eProsima_user_DllExport double& remote_user();

        /*!
         * @brief This function sets a value in member remote_system
         * @param _remote_system New value for member remote_system
         */
        eProsima_user_DllExport void remote_system(
                double _remote_system);

        /*!
         * @brief This function returns the value of member remote_system
         * @return Value of member remote_system
         */
        eProsima_user_DllExport double remote_system() const;

        /*!
         * @brief This function returns a reference to member remote_system
         * @return Reference to member remote_system
         */
        eProsima_user_DllExport double& remote_system();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::ResourceStatistics& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        double m_host_total;
        double m_host_user;
        double m_host_system;
        double m_remote_total;
        double m_remote_user;
        double m_remote_system;

    };
    /*!
     * @brief This class represents the structure Report defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class Report
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Report();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Report();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::Report that will be copied.
         */
        eProsima_user_DllExport Report(
                const Report& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::Report that will be copied.
         */
        eProsima_user_DllExport Report(
                Report&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::Report that will be copied.
         */
        eProsima_user_DllExport Report& operator =(
                const Report& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::Report that will be copied.
         */
        eProsima_user_DllExport Report& operator =(
                Report&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Report object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const Report& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::Report object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const Report& x) const;

        /*!
         * @brief This function copies the value in member streams
         * @param _streams New value to be copied in member streams
         */
        eProsima_user_DllExport void streams(
                const std::vector<Iperf::ReportedStreamsPair>& _streams);

        /*!
         * @brief This function moves the value in member streams
         * @param _streams New value to be moved in member streams
         */
        eProsima_user_DllExport void streams(
                std::vector<Iperf::ReportedStreamsPair>&& _streams);

        /*!
         * @brief This function returns a constant reference to member streams
         * @return Constant reference to member streams
         */
        eProsima_user_DllExport const std::vector<Iperf::ReportedStreamsPair>& streams() const;

        /*!
         * @brief This function returns a reference to member streams
         * @return Reference to member streams
         */
        eProsima_user_DllExport std::vector<Iperf::ReportedStreamsPair>& streams();
        /*!
         * @brief This function copies the value in member summaries
         * @param _summaries New value to be copied in member summaries
         */
        eProsima_user_DllExport void summaries(
                const Iperf::ReportedSummariesPair& _summaries);

        /*!
         * @brief This function moves the value in member summaries
         * @param _summaries New value to be moved in member summaries
         */
        eProsima_user_DllExport void summaries(
                Iperf::ReportedSummariesPair&& _summaries);

        /*!
         * @brief This function returns a constant reference to member summaries
         * @return Constant reference to member summaries
         */
        eProsima_user_DllExport const Iperf::ReportedSummariesPair& summaries() const;

        /*!
         * @brief This function returns a reference to member summaries
         * @return Reference to member summaries
         */
        eProsima_user_DllExport Iperf::ReportedSummariesPair& summaries();
        /*!
         * @brief This function copies the value in member cpu_usage
         * @param _cpu_usage New value to be copied in member cpu_usage
         */
        eProsima_user_DllExport void cpu_usage(
                const Iperf::ResourceStatistics& _cpu_usage);

        /*!
         * @brief This function moves the value in member cpu_usage
         * @param _cpu_usage New value to be moved in member cpu_usage
         */
        eProsima_user_DllExport void cpu_usage(
                Iperf::ResourceStatistics&& _cpu_usage);

        /*!
         * @brief This function returns a constant reference to member cpu_usage
         * @return Constant reference to member cpu_usage
         */
        eProsima_user_DllExport const Iperf::ResourceStatistics& cpu_usage() const;

        /*!
         * @brief This function returns a reference to member cpu_usage
         * @return Reference to member cpu_usage
         */
        eProsima_user_DllExport Iperf::ResourceStatistics& cpu_usage();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::Report& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        std::vector<Iperf::ReportedStreamsPair> m_streams;
        Iperf::ReportedSummariesPair m_summaries;
        Iperf::ResourceStatistics m_cpu_usage;

    };
    /*!
     * @brief This class represents the structure IperfEntity defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class IperfEntity
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IperfEntity();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IperfEntity();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::IperfEntity that will be copied.
         */
        eProsima_user_DllExport IperfEntity(
                const IperfEntity& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::IperfEntity that will be copied.
         */
        eProsima_user_DllExport IperfEntity(
                IperfEntity&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::IperfEntity that will be copied.
         */
        eProsima_user_DllExport IperfEntity& operator =(
                const IperfEntity& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::IperfEntity that will be copied.
         */
        eProsima_user_DllExport IperfEntity& operator =(
                IperfEntity&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::IperfEntity object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const IperfEntity& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::IperfEntity object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const IperfEntity& x) const;

        /*!
         * @brief This function copies the value in member header_item
         * @param _header_item New value to be copied in member header_item
         */
        eProsima_user_DllExport void header_item(
                const Iperf::Header& _header_item);

        /*!
         * @brief This function moves the value in member header_item
         * @param _header_item New value to be moved in member header_item
         */
        eProsima_user_DllExport void header_item(
                Iperf::Header&& _header_item);

        /*!
         * @brief This function returns a constant reference to member header_item
         * @return Constant reference to member header_item
         */
        eProsima_user_DllExport const Iperf::Header& header_item() const;

        /*!
         * @brief This function returns a reference to member header_item
         * @return Reference to member header_item
         */
        eProsima_user_DllExport Iperf::Header& header_item();
        /*!
         * @brief This function copies the value in member intervals
         * @param _intervals New value to be copied in member intervals
         */
        eProsima_user_DllExport void intervals(
                const std::vector<Iperf::Interval>& _intervals);

        /*!
         * @brief This function moves the value in member intervals
         * @param _intervals New value to be moved in member intervals
         */
        eProsima_user_DllExport void intervals(
                std::vector<Iperf::Interval>&& _intervals);

        /*!
         * @brief This function returns a constant reference to member intervals
         * @return Constant reference to member intervals
         */
        eProsima_user_DllExport const std::vector<Iperf::Interval>& intervals() const;

        /*!
         * @brief This function returns a reference to member intervals
         * @return Reference to member intervals
         */
        eProsima_user_DllExport std::vector<Iperf::Interval>& intervals();
        /*!
         * @brief This function copies the value in member cumulative_intervals
         * @param _cumulative_intervals New value to be copied in member cumulative_intervals
         */
        eProsima_user_DllExport void cumulative_intervals(
                const std::vector<Iperf::CumulativeInterval>& _cumulative_intervals);

        /*!
         * @brief This function moves the value in member cumulative_intervals
         * @param _cumulative_intervals New value to be moved in member cumulative_intervals
         */
        eProsima_user_DllExport void cumulative_intervals(
                std::vector<Iperf::CumulativeInterval>&& _cumulative_intervals);

        /*!
         * @brief This function returns a constant reference to member cumulative_intervals
         * @return Constant reference to member cumulative_intervals
         */
        eProsima_user_DllExport const std::vector<Iperf::CumulativeInterval>& cumulative_intervals() const;

        /*!
         * @brief This function returns a reference to member cumulative_intervals
         * @return Reference to member cumulative_intervals
         */
        eProsima_user_DllExport std::vector<Iperf::CumulativeInterval>& cumulative_intervals();
        /*!
         * @brief This function copies the value in member end_report
         * @param _end_report New value to be copied in member end_report
         */
        eProsima_user_DllExport void end_report(
                const Iperf::Report& _end_report);

        /*!
         * @brief This function moves the value in member end_report
         * @param _end_report New value to be moved in member end_report
         */
        eProsima_user_DllExport void end_report(
                Iperf::Report&& _end_report);

        /*!
         * @brief This function returns a constant reference to member end_report
         * @return Constant reference to member end_report
         */
        eProsima_user_DllExport const Iperf::Report& end_report() const;

        /*!
         * @brief This function returns a reference to member end_report
         * @return Reference to member end_report
         */
        eProsima_user_DllExport Iperf::Report& end_report();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::IperfEntity& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Iperf::Header m_header_item;
        std::vector<Iperf::Interval> m_intervals;
        std::vector<Iperf::CumulativeInterval> m_cumulative_intervals;
        Iperf::Report m_end_report;

    };
    /*!
     * @brief This class represents the structure IperfStatus defined by the user in the IDL file.
     * @ingroup IPERF
     */
    class IperfStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IperfStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IperfStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Iperf::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus(
                const IperfStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Iperf::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus(
                IperfStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Iperf::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus& operator =(
                const IperfStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Iperf::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus& operator =(
                IperfStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::IperfStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const IperfStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Iperf::IperfStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const IperfStatus& x) const;

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member servers
         * @param _servers New value to be copied in member servers
         */
        eProsima_user_DllExport void servers(
                const std::vector<Iperf::IperfEntity>& _servers);

        /*!
         * @brief This function moves the value in member servers
         * @param _servers New value to be moved in member servers
         */
        eProsima_user_DllExport void servers(
                std::vector<Iperf::IperfEntity>&& _servers);

        /*!
         * @brief This function returns a constant reference to member servers
         * @return Constant reference to member servers
         */
        eProsima_user_DllExport const std::vector<Iperf::IperfEntity>& servers() const;

        /*!
         * @brief This function returns a reference to member servers
         * @return Reference to member servers
         */
        eProsima_user_DllExport std::vector<Iperf::IperfEntity>& servers();
        /*!
         * @brief This function copies the value in member clients
         * @param _clients New value to be copied in member clients
         */
        eProsima_user_DllExport void clients(
                const std::vector<Iperf::IperfEntity>& _clients);

        /*!
         * @brief This function moves the value in member clients
         * @param _clients New value to be moved in member clients
         */
        eProsima_user_DllExport void clients(
                std::vector<Iperf::IperfEntity>&& _clients);

        /*!
         * @brief This function returns a constant reference to member clients
         * @return Constant reference to member clients
         */
        eProsima_user_DllExport const std::vector<Iperf::IperfEntity>& clients() const;

        /*!
         * @brief This function returns a reference to member clients
         * @return Reference to member clients
         */
        eProsima_user_DllExport std::vector<Iperf::IperfEntity>& clients();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Iperf::IperfStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_timestamp;
        std::vector<Iperf::IperfEntity> m_servers;
        std::vector<Iperf::IperfEntity> m_clients;

    };
} // namespace Iperf

#endif // _FAST_DDS_GENERATED_IPERF_IPERF_H_