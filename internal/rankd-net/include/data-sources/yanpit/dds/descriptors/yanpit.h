// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file yanpit.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_YANPIT_YANPIT_H_
#define _FAST_DDS_GENERATED_YANPIT_YANPIT_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(yanpit_SOURCE)
#define yanpit_DllAPI __declspec( dllexport )
#else
#define yanpit_DllAPI __declspec( dllimport )
#endif // yanpit_SOURCE
#else
#define yanpit_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define yanpit_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace Yanpit {
    /*!
     * @brief This class represents the structure IperfStatus defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class IperfStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IperfStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IperfStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus(
                const IperfStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus(
                IperfStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus& operator =(
                const IperfStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::IperfStatus that will be copied.
         */
        eProsima_user_DllExport IperfStatus& operator =(
                IperfStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::IperfStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const IperfStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::IperfStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const IperfStatus& x) const;

        /*!
         * @brief This function sets a value in member running_instances
         * @param _running_instances New value for member running_instances
         */
        eProsima_user_DllExport void running_instances(
                uint32_t _running_instances);

        /*!
         * @brief This function returns the value of member running_instances
         * @return Value of member running_instances
         */
        eProsima_user_DllExport uint32_t running_instances() const;

        /*!
         * @brief This function returns a reference to member running_instances
         * @return Reference to member running_instances
         */
        eProsima_user_DllExport uint32_t& running_instances();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::IperfStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint32_t m_running_instances;

    };
    /*!
     * @brief This class represents the structure ActiveTools defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class ActiveTools
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ActiveTools();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ActiveTools();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::ActiveTools that will be copied.
         */
        eProsima_user_DllExport ActiveTools(
                const ActiveTools& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::ActiveTools that will be copied.
         */
        eProsima_user_DllExport ActiveTools(
                ActiveTools&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::ActiveTools that will be copied.
         */
        eProsima_user_DllExport ActiveTools& operator =(
                const ActiveTools& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::ActiveTools that will be copied.
         */
        eProsima_user_DllExport ActiveTools& operator =(
                ActiveTools&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::ActiveTools object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ActiveTools& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::ActiveTools object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ActiveTools& x) const;

        /*!
         * @brief This function copies the value in member iperf
         * @param _iperf New value to be copied in member iperf
         */
        eProsima_user_DllExport void iperf(
                const Yanpit::IperfStatus& _iperf);

        /*!
         * @brief This function moves the value in member iperf
         * @param _iperf New value to be moved in member iperf
         */
        eProsima_user_DllExport void iperf(
                Yanpit::IperfStatus&& _iperf);

        /*!
         * @brief This function returns a constant reference to member iperf
         * @return Constant reference to member iperf
         */
        eProsima_user_DllExport const Yanpit::IperfStatus& iperf() const;

        /*!
         * @brief This function returns a reference to member iperf
         * @return Reference to member iperf
         */
        eProsima_user_DllExport Yanpit::IperfStatus& iperf();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::ActiveTools& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Yanpit::IperfStatus m_iperf;

    };
    /*!
     * @brief This class represents the structure NcmStatus defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class NcmStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport NcmStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~NcmStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus(
                const NcmStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus(
                NcmStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus& operator =(
                const NcmStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::NcmStatus that will be copied.
         */
        eProsima_user_DllExport NcmStatus& operator =(
                NcmStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::NcmStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const NcmStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::NcmStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const NcmStatus& x) const;

        /*!
         * @brief This function sets a value in member is_running
         * @param _is_running New value for member is_running
         */
        eProsima_user_DllExport void is_running(
                bool _is_running);

        /*!
         * @brief This function returns the value of member is_running
         * @return Value of member is_running
         */
        eProsima_user_DllExport bool is_running() const;

        /*!
         * @brief This function returns a reference to member is_running
         * @return Reference to member is_running
         */
        eProsima_user_DllExport bool& is_running();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::NcmStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        bool m_is_running;

    };
    /*!
     * @brief This class represents the structure LocalnetStatus defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class LocalnetStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport LocalnetStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~LocalnetStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::LocalnetStatus that will be copied.
         */
        eProsima_user_DllExport LocalnetStatus(
                const LocalnetStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::LocalnetStatus that will be copied.
         */
        eProsima_user_DllExport LocalnetStatus(
                LocalnetStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::LocalnetStatus that will be copied.
         */
        eProsima_user_DllExport LocalnetStatus& operator =(
                const LocalnetStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::LocalnetStatus that will be copied.
         */
        eProsima_user_DllExport LocalnetStatus& operator =(
                LocalnetStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::LocalnetStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const LocalnetStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::LocalnetStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const LocalnetStatus& x) const;

        /*!
         * @brief This function sets a value in member is_running
         * @param _is_running New value for member is_running
         */
        eProsima_user_DllExport void is_running(
                bool _is_running);

        /*!
         * @brief This function returns the value of member is_running
         * @return Value of member is_running
         */
        eProsima_user_DllExport bool is_running() const;

        /*!
         * @brief This function returns a reference to member is_running
         * @return Reference to member is_running
         */
        eProsima_user_DllExport bool& is_running();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::LocalnetStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        bool m_is_running;

    };
    /*!
     * @brief This class represents the structure PassiveTools defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class PassiveTools
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PassiveTools();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PassiveTools();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::PassiveTools that will be copied.
         */
        eProsima_user_DllExport PassiveTools(
                const PassiveTools& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::PassiveTools that will be copied.
         */
        eProsima_user_DllExport PassiveTools(
                PassiveTools&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::PassiveTools that will be copied.
         */
        eProsima_user_DllExport PassiveTools& operator =(
                const PassiveTools& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::PassiveTools that will be copied.
         */
        eProsima_user_DllExport PassiveTools& operator =(
                PassiveTools&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::PassiveTools object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const PassiveTools& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::PassiveTools object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const PassiveTools& x) const;

        /*!
         * @brief This function copies the value in member ncm
         * @param _ncm New value to be copied in member ncm
         */
        eProsima_user_DllExport void ncm(
                const Yanpit::NcmStatus& _ncm);

        /*!
         * @brief This function moves the value in member ncm
         * @param _ncm New value to be moved in member ncm
         */
        eProsima_user_DllExport void ncm(
                Yanpit::NcmStatus&& _ncm);

        /*!
         * @brief This function returns a constant reference to member ncm
         * @return Constant reference to member ncm
         */
        eProsima_user_DllExport const Yanpit::NcmStatus& ncm() const;

        /*!
         * @brief This function returns a reference to member ncm
         * @return Reference to member ncm
         */
        eProsima_user_DllExport Yanpit::NcmStatus& ncm();
        /*!
         * @brief This function copies the value in member localnet
         * @param _localnet New value to be copied in member localnet
         */
        eProsima_user_DllExport void localnet(
                const Yanpit::LocalnetStatus& _localnet);

        /*!
         * @brief This function moves the value in member localnet
         * @param _localnet New value to be moved in member localnet
         */
        eProsima_user_DllExport void localnet(
                Yanpit::LocalnetStatus&& _localnet);

        /*!
         * @brief This function returns a constant reference to member localnet
         * @return Constant reference to member localnet
         */
        eProsima_user_DllExport const Yanpit::LocalnetStatus& localnet() const;

        /*!
         * @brief This function returns a reference to member localnet
         * @return Reference to member localnet
         */
        eProsima_user_DllExport Yanpit::LocalnetStatus& localnet();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::PassiveTools& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        Yanpit::NcmStatus m_ncm;
        Yanpit::LocalnetStatus m_localnet;

    };
    /*!
     * @brief This class represents the structure YanpitStatus defined by the user in the IDL file.
     * @ingroup YANPIT
     */
    class YanpitStatus
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport YanpitStatus();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~YanpitStatus();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Yanpit::YanpitStatus that will be copied.
         */
        eProsima_user_DllExport YanpitStatus(
                const YanpitStatus& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Yanpit::YanpitStatus that will be copied.
         */
        eProsima_user_DllExport YanpitStatus(
                YanpitStatus&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Yanpit::YanpitStatus that will be copied.
         */
        eProsima_user_DllExport YanpitStatus& operator =(
                const YanpitStatus& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Yanpit::YanpitStatus that will be copied.
         */
        eProsima_user_DllExport YanpitStatus& operator =(
                YanpitStatus&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::YanpitStatus object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const YanpitStatus& x) const;

        /*!
         * @brief Comparison operator.
         * @param x Yanpit::YanpitStatus object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const YanpitStatus& x) const;

        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(
                uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t& timestamp();

        /*!
         * @brief This function copies the value in member active_tools
         * @param _active_tools New value to be copied in member active_tools
         */
        eProsima_user_DllExport void active_tools(
                const Yanpit::ActiveTools& _active_tools);

        /*!
         * @brief This function moves the value in member active_tools
         * @param _active_tools New value to be moved in member active_tools
         */
        eProsima_user_DllExport void active_tools(
                Yanpit::ActiveTools&& _active_tools);

        /*!
         * @brief This function returns a constant reference to member active_tools
         * @return Constant reference to member active_tools
         */
        eProsima_user_DllExport const Yanpit::ActiveTools& active_tools() const;

        /*!
         * @brief This function returns a reference to member active_tools
         * @return Reference to member active_tools
         */
        eProsima_user_DllExport Yanpit::ActiveTools& active_tools();
        /*!
         * @brief This function copies the value in member passive_tools
         * @param _passive_tools New value to be copied in member passive_tools
         */
        eProsima_user_DllExport void passive_tools(
                const Yanpit::PassiveTools& _passive_tools);

        /*!
         * @brief This function moves the value in member passive_tools
         * @param _passive_tools New value to be moved in member passive_tools
         */
        eProsima_user_DllExport void passive_tools(
                Yanpit::PassiveTools&& _passive_tools);

        /*!
         * @brief This function returns a constant reference to member passive_tools
         * @return Constant reference to member passive_tools
         */
        eProsima_user_DllExport const Yanpit::PassiveTools& passive_tools() const;

        /*!
         * @brief This function returns a reference to member passive_tools
         * @return Reference to member passive_tools
         */
        eProsima_user_DllExport Yanpit::PassiveTools& passive_tools();

        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const Yanpit::YanpitStatus& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        uint64_t m_timestamp;
        Yanpit::ActiveTools m_active_tools;
        Yanpit::PassiveTools m_passive_tools;

    };
} // namespace Yanpit

#endif // _FAST_DDS_GENERATED_YANPIT_YANPIT_H_